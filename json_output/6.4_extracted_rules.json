{
    "6": {
        "description": "",
        "sub_rules": {
            "6.1.1": {
                "id": "6.1.1",
                "title": "Configure systemd -journald service  \nsystemd-journald  is a system service that collects and stores logging data. It creates \nand maintains structured, indexed journals based on logging information that is received \nfrom a variety of sources:  \nKernel log messages, via kmsg  \nSimple system log messages, via the libc syslog call  \nStructured system log messages via the native Journal API  \nStandard output and standard error of service units  \nAudit records, originating from the kernel audit subsystem  \nThe daemon will implicitly collect numerous metadata fields for each log messages in a \nsecure and unfakeable way. See systemd.journal -fields man page for more information \nabout the collected metadata.  \nThe journal service stores log data either persistently below /var/log/journal  or in a \nvolatile way below /run/log/journal/ . By default, log data is stored persistently if \n/var/log/journal/  exists during boot, with an implicit fallback to volatile storage. Use \nStorage=  in journald.conf  to configure where log data is placed, independently of \nthe existence of /var/log/journal/ . \nOn systems where /var/log/journal/  does not exist but where persistent logging is \ndesired, and the default journald.conf  is used, it is sufficient to create the directory \nand ensure it has the correct access modes and ownership.  \nNote:  systemd-journald.service  must be configured appropriately for either \njournald  - OR - rsyslog  to operate effectively.  Page 729 6.1.1.1 Ensure journald service is enabled and active (Automated)",
                "audit": "Run the following command to verify systemd-journald  is enabled:  \n# systemctl is -enabled systemd -journald.service  \n \nstatic \nNote:  By default the systemd-journald  service does not have an [Install]  section \nand thus cannot be enabled / disabled. It is meant to be referenced as Requires  or \nWants  by other unit files. As such, if the status of systemd-journald  is not static , \ninvestigate why  \nRun the following command to verify systemd-journald  is active:  \n# systemctl is -active systemd -journald.service  \n \nactive",
                "remediation": "Run the following commands to unmask and start systemd-journald.service  \n# systemctl unmask systemd -journald.service  \n# systemctl start systemd -journald.service  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -2, AU -7 AU -12 Page 730 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.2 Collect Audit Logs  \n Collect audit logs. Ensure that logging, per the enterprise\u2019s audit log \nmanagement process, has been enabled across enterprise assets.  \u25cf \u25cf \u25cf \nv7 6.2 Activate audit logging  \n Ensure that local logging has been enabled on all systems and networking \ndevices.  \u25cf \u25cf \u25cf \nv7 6.3 Enable Detailed Logging  \n Enable system logging to include detailed information such as an event \nsource, date, user, timestamp, source addresses, destination addresses, and \nother useful elements.   \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1070, T1070.002, T1562, \nT1562.001  TA0005  M1029  Page 731",
                "audit_command": "systemctl is -enabled systemd -journald.service  \nsystemctl is -active systemd -journald.service  ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "systemctl unmask systemd -journald.service",
                    "systemctl start systemd -journald.service"
                ]
            },
            "6.1.2": {
                "id": "6.1.2",
                "title": "Configure journald  \nIncluded in the systemd suite is a journaling service called systemd -journald.service for \nthe collection and storage of logging data. It creates and maintains structured, indexed \njournals based on logging information that is received from a variety of sour ces such as:  \nClassic RFC3164 BSD syslog via the /dev/log socket STDOUT/STDERR of programs \nvia StandardOutput=journal + StandardError=journal in service files (both of which are \ndefault settings) Kernel log messages via the /dev/kmsg device node Audit records via \nthe ke rnel\u2019s audit subsystem Structured log messages via journald\u2019s native protocol Any \nchanges made to the systemd -journald configuration will require a re -start of systemd -\njournald  \nNote:  \n- IF - rsyslog  will be used for remote logging on the system this subsection can be \nskipped  Page 741 6.1.2.1 Configure systemd -journal -remote  \nThe systemd-journal-remote  package includes systemd-journal-upload . \nsystemd-journal-upload  will upload journal entries to the URL specified with --url=. \nThis program reads journal entries from one or more journal files, similarly to journalctl.  \nsystemd-journal-upload  transfers the raw content of journal file and uses HTTP as a \ntransport protocol.  \nsystemd-journal-upload.service  is a system service that uses systemd-journalupload  to upload journal entries to a server. It uses the configuration in journalupload.conf . \nNote:  \n- IF - rsyslog  is in use this subsection can be skipped.  \nsystemd-journal-remote  package is part of the universe  component, this \nmay impact support and update frequency which should be considered when \nassessing organizational risk.  Page 742 6.1.2.1.1 Ensure systemd -journal -remote is installed (Automated)",
                "audit": "- IF - journald  will be used for logging on the system:  \nRun the following command to verify systemd-journal-remote  is installed.  \n# dpkg-query -s systemd -journal-remote &>/dev/null && echo \"systemd -journalremote is installed\"  \nVerify the output matches:  \nsystemd-journal-remote is installed",
                "remediation": "Run the following command to install systemd-journal-remote : \n# apt install systemd -journal-remote \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -2, AU -7 AU -12 Page 743 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.2 Collect Audit Logs  \n Collect audit logs. Ensure that logging, per the enterprise\u2019s audit log \nmanagement process, has been enabled across enterprise assets.  \u25cf \u25cf \u25cf \nv7 6.2 Activate audit logging  \n Ensure that local logging has been enabled on all systems and networking \ndevices.  \u25cf \u25cf \u25cf \nv7 6.3 Enable Detailed Logging  \n Enable system logging to include detailed information such as an event \nsource, date, user, timestamp, source addresses, destination addresses, and \nother useful elements.   \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1070, T1070.002, T1562, \nT1562.006  TA0040  M1029  Page 744",
                "audit_command": "dpkg-query -s systemd -journal-remote &>/dev/null && echo \"systemd -journalremote is installed\"  ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "apt install systemd -journal-remote"
                ]
            },
            "6.1.3": {
                "id": "6.1.3",
                "title": "Configure rsyslog  \nThe rsyslog  software package may be used instead of the default journald  logging \nmechanism.  \nRsyslog has evolved over several decades. For this reason it supports three different \nconfiguration formats (\u201clanguages\u201d):  \nbasic  - previously known as the sysklogd  format, this is the format best used to \nexpress basic things, such as where the statement fits on a single line.  \no It stems back to the original syslog.conf format, in use now for several \ndecades.  \no The most common use case is matching on facility/severity and writing \nmatching messages to a log file.  \nadvanced  - previously known as the RainerScript  format, this format was first \navailable in rsyslog v6 and is the current, best and most precise format for non -\ntrivial use cases where more than one line is needed.  \no Prior to v7, there was a performance impact when using this format that \nencouraged use of the basic format for best results. Current versions of \nrsyslog do not suffer from this (historical) performance impact.  \no This new style format is specifically targeted towards more advanced use \ncases like forwarding to remote hosts that might be partially offline.  \nobsolete legacy  - previously known simply as the legacy  format, this format is \nexactly what its name implies: it is obsolete and should not be used when writing \nnew configurations. It was created in the early days (up to rsyslog version 5) \nwhere we expected that rsyslog would extend sysklogd just mildly. Conse quently, \nit was primarily aimed at small additions to the original sysklogd format.  \no Practice has shown that it was notoriously hard to use for more advanced \nuse cases, and thus we replaced it with the advanced format.  \no In essence, everything that needs to be written on a single line that starts \nwith a dollar sign is legacy format. Users of this format are encouraged to \nmigrate to the basic or advanced formats.  \nNote:  This section only applies if rsyslog  is the chosen method for client side logging. \nDo not apply this section if journald  is used.  Page 765 6.1.3.1 Ensure rsyslog is installed (Automated)",
                "audit": "- IF - rsyslog  is being used for logging on the system:  \nRun the following command to verify rsyslog  is installed:  \n# dpkg-query -s rsyslog &>/dev/null && echo \"rsyslog is installed\"  \nVerify the output matches:  \nrsyslog is installed",
                "remediation": "Run the following command to install rsyslog : \n# apt install rsyslog",
                "audit_command": "dpkg-query -s rsyslog &>/dev/null && echo \"rsyslog is installed\"  ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "apt install rsyslog"
                ]
            },
            "6.1.4": {
                "id": "6.1.4",
                "title": "Configure Logfiles  Page 790 6.1.4.1 Ensure access to all logfiles has been configured \n(Automated)",
                "audit": "Run the following script to verify that files in /var/log/  have appropriate permissions \nand ownership:  \n#!/usr/bin/env bash  \n \n{ \n   a_output=(); a_output2=()  \n   f_file_test_chk()  \n   { \n      a_out2=()  \n      maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"  \n      [ $(( $l_mode & $perm_mask )) -gt 0 ] && \\ \n         a_out2+=(\"   o Mode: \\\"$l_mode \\\" should be \\\"$maxperm \\\" or more restrictive\")  \n      [[ ! \"$l_user\" =~ $l_auser ]] && \\ \n         a_out2+=(\"   o Owned by: \\\"$l_user \\\" and should be owned by \\\"${l_auser//|/ or } \\\"\") \n      [[ ! \"$l_group\" =~ $l_agroup ]] && \\ \n         a_out2+=(\"   o Group owned by: \\\"$l_group\\\" and should be group owned by \n\\\"${l_agroup//|/ or } \\\"\") \n      [ \"${#a_out2[@]}\" -gt 0 ] && a_output2+=(\" - File: \\\"$l_fname \\\" is:\" \"${a_out2[@]}\")  \n   } \n   while IFS= read -r -d $'\\0' l_file; do  \n      while IFS=: read -r l_fname l_mode l_user l_group ; do \n         if grep -Pq -- '\\/(apt)\\h*$' <<< \"$(dirname \"$l_fname\")\"; then  \n            perm_mask='0133' l_auser=\"root\" l_agroup=\"(root|adm)\"; f_file_test_chk  \n         else \n            case \"$(basename \"$l_fname\")\" in  \n               lastlog | lastlog.* | wtmp | wtmp.* | wtmp -* | btmp | btmp.* | btmp -* | README)  \n                  perm_mask='0113' l_auser=\"root\" l_agroup=\"(root|utmp)\"  \n                  f_file_test_chk ;;  \n               cloud-init.log* | localmessages* | waagent.log*)  \n                  perm_mask='0133' l_auser=\"(root|syslog)\" l_agroup=\"(root|adm)\"  \n                  file_test_chk ;;  \n               secure{,*.*,.*, -*} | auth.log | syslog | messages)  \n                  perm_mask='0137' l_auser=\"(root|syslog)\" l_agroup=\"(root|adm)\"  \n                  f_file_test_chk ;;  \n               SSSD | sssd)  \n                  perm_mask='0117' l_auser=\"(root|SSSD)\" l_agroup=\"(root|SSSD)\"  \n                  f_file_test_chk ;;  \n               gdm | gdm3)  \n                  perm_mask='0117' l_auser=\"root\" l_agroup=\"(roo t|gdm|gdm3)\"  \n                  f_file_test_chk ;;  \n               *.journal | *.journal~)  \n                  perm_mask='0137' l_auser=\"root\" l_agroup=\"(root|systemd -journal)\"  \n                  f_file_test_chk ;;  \n               *) \n                  perm_mask= '0137' l_auser=\"(root|syslog)\" l_agroup=\"(root|adm)\"  \n                  if [ \"$l_user\" = \"root\" ] || ! grep -Pq -- \"^\\h*$(awk -F: '$1==\"'\"$l_user\"'\" \n{print $7}' /etc/passwd) \\b\" /etc/shells; then  \n                     ! grep -Pq -- \"$l_auser\" <<< \"$l_user\" &&  l_auser=\"(root|syslog|$l_user)\"  \n                     ! grep -Pq -- \"$l_agroup\" <<< \"$l_group\" && l_agroup=\"(root|adm|$l_group)\"  \n                  fi \n                  f_file_test_chk ;;  \n            esac \n         fi \n      done < <(stat -Lc '%n:%#a:%U:%G' \" $l_file\")  \n   done < <(find -L /var/log -type f \\( -perm /0137 -o ! -user root -o ! -group root \\) -print0) \n   if [ \"${#a_output2[@]}\" -le 0 ]; then  \n      a_output+=(\"  - All files in \\\"/var/log/ \\\" have appropriate permissions and ownership\")  \n      printf ' \\n%s' \"- Audit Result:\" \"  ** PASS **\" \"${a_output[@]}\" \"\"  \n   else \n      printf ' \\n%s' \"- Audit Result:\" \"  ** FAIL **\" \" - Reason(s) for audit failure:\" \n\"${a_output2[@]}\" \"\"  \n   fi \n} \n  Page 792",
                "remediation": "Run the following script to update permissions and ownership on files in /var/log . \nAlthough the script is not destructive, ensure that the output of the audit procedure is \ncaptured in the event that the remediation causes issues.  Page 793 #!/usr/bin/env bash  \n \n{ \n   a_output2=()  \n   f_file_test_fix()  \n   { \n      a_out2=()  \n      maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"  \n      if [ $(( $l_mode & $perm_mask )) -gt 0 ]; then  \n         a_out2+=(\"   o Mode: \\\"$l_mode \\\" should be \\\"$maxperm \\\" or more \nrestrictive\" \"     x Removing excess permissions\")  \n         chmod \"$l_rperms\" \"$l_fname\"  \n      fi \n      if [[ ! \"$l_user\" =~ $l_auser ]]; then  \n         a_out2+=(\"   o Owned by: \\\"$l_user \\\" and should be owned by \n\\\"${l_auser//|/ or } \\\"\" \"     x Cha nging ownership to: \\\"$l_fix_account \\\"\") \n         chown \"$l_fix_account\" \"$l_fname\"  \n      fi \n      if [[ ! \"$l_group\" =~ $l_agroup ]]; then  \n         a_out2+=(\"   o Group owned by: \\\"$l_group \\\" and should be group \nowned by \\\"${l_agroup//|/ or } \\\"\" \"     x C hanging group ownership to: \n\\\"$l_fix_account \\\"\") \n         chgrp \"$l_fix_account\" \"$l_fname\"  \n      fi \n      [ \"${#a_out2[@]}\" -gt 0 ] && a_output2+=(\" - File: \\\"$l_fname \\\" is:\" \n\"${a_out2[@]}\")  \n   } \n   l_fix_account='root'  \n   while IFS= read -r -d $'\\0' l_file; do \n      while IFS=: read -r l_fname l_mode l_user l_group; do  \n         if grep -Pq -- '\\/(apt)\\h*$' <<< \"$(dirname \"$l_fname\")\"; then  \n            perm_mask='0133' l_rperms=\"u -x,go-wx\" l_auser=\"root\" \nl_agroup=\"(root|adm)\"; f_file_test_fix  \n         else \n            case \"$(basename \"$l_fname\")\" in  \n               lastlog | lastlog.* | wtmp | wtmp.* | wtmp -* | btmp | btmp.* | \nbtmp-* | README)  \n                  perm_mask='0113' l_rperms=\"ug -x,o-wx\" l_auser=\"root\" \nl_agroup=\"(root|utmp)\"  \n                  f_file_test_fix ;;  \n               cloud-init.log* | localmessages* | waagent.log*)  \n                  perm_mask='0133' l_rperms=\"u -x,go-wx\" \nl_auser=\"(root|syslog)\" l_agroup=\"(root|adm)\"  \n                  file_test_fix ;;  \n               secure | auth.log | syslo g | messages)  \n                  perm_mask='0137' l_rperms=\"u -x,g-wx,o-rwx\" \nl_auser=\"(root|syslog)\" l_agroup=\"(root|adm)\"  \n                  f_file_test_fix ;;  \n               SSSD | sssd)  \n                  perm_mask='0117' l_rperms=\"ug -x,o-rwx\" \nl_auser=\"(roo t|SSSD)\" l_agroup=\"(root|SSSD)\"  \n                  f_file_test_fix ;;  \n               gdm | gdm3)  \n                  perm_mask='0117' l_rperms=\"ug -x,o-rwx\" l_auser=\"root\" \nl_agroup=\"(root|gdm|gdm3)\"  \n                  f_file_test_fix ;;  \n               *.journal  | *.journal~)  Page 794                   perm_mask='0137' l_rperms=\"u -x,g-wx,o-rwx\" l_auser=\"root\" \nl_agroup=\"(root|systemd -journal)\"        \n                  f_file_test_fix ;;  \n               *) \n                  perm_mask='0137' l_rperms=\"u -x,g-wx,o-rwx\" \nl_auser=\"(root|syslog)\"  l_agroup=\"(root|adm)\"  \n                  if [ \"$l_user\" = \"root\" ] || ! grep -Pq -- \"^\\h*$(awk -F: \n'$1==\"'\"$l_user\"'\" {print $7}' /etc/passwd) \\b\" /etc/shells; then  \n                     ! grep -Pq -- \"$l_auser\" <<< \"$l_user\" && \nl_auser=\"(root|syslog|$l_user )\" \n                     ! grep -Pq -- \"$l_agroup\" <<< \"$l_group\" && \nl_agroup=\"(root|adm|$l_group)\"  \n                  fi \n                  f_file_test_fix ;;  \n            esac \n         fi \n      done < <(stat -Lc '%n:%#a:%U:%G' \"$l_file\")  \n   done < <(find -L /var/log -type f \\( -perm /0137 -o ! -user root -o ! -\ngroup root \\) -print0) \n   if [ \"${#a_output2[@]}\" -le 0 ]; then # If all files passed, then we \nreport no changes  \n      a_output+=(\"  - All files in \\\"/var/log/ \\\" have appropriate permissions \nand ownersh ip\") \n      printf ' \\n%s' \"- All files in \\\"/var/log/ \\\" have appropriate \npermissions and ownership\" \"  o No changes required\" \"\"  \n   else \n      printf ' \\n%s' \"${a_output2[@]}\" \"\"  \n   fi \n} \nNote:  You may also need to change the configuration for your logging software or \nservices for any logs that had incorrect permissions.  \nIf there are services that log to other locations, ensure that those log files have the \nappropriate permissions.  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AC -3, MP -2 \n  Page 795 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 3.3 Configure Data Access Control Lists  \n Configure data access control lists based on a user\u2019s need to know. Apply data \naccess control lists, also known as access permissions, to local and remote file \nsystems, databases, and applications.  \u25cf \u25cf \u25cf \nv7 14.6 Protect Information through Access Control Lists  \n Protect all information stored on systems with file system, network share, \nclaims, application, or database specific access control lists. These controls will \nenforce the principle that only authorized individuals should have access to the \ninformation base d on their need to access the information as a part of their \nresponsibilities.  \u25cf \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1070, T1070.002, T1083, \nT1083.000  TA0007  M1028  \n \n  Page 796 6.2 System Auditing  \nThe Linux Auditing System operates on a set of rules that collects certain types of \nsystem activity to facilitate incident investigation, detect unauthorized access or \nmodification of data. By default events will be logged to /var/log/audit/audit.log , \nwhich can be configured in /etc/audit/auditd.conf . \nThe following types of audit rules can be specified:  \nControl rules: Configuration of the auditing system.  \nFile system rules: Allow the auditing of access to a particular file or a directory. \nAlso known as file watches.  \nSystem call rules: Allow logging of system calls that any specified program \nmakes.  \nAudit rules can be set:  \nOn the command line using the auditctl  utility. These rules are not persistent \nacross reboots.  \nIn /etc/audit/audit.rules . These rules have to be merged and loaded before \nthey are active.  \nNotes:  \nFor 64 bit systems that have arch  as a rule parameter, you will need two rules: \none for 64 bit and one for 32 bit systems calls.  \nIf the auditing system is configured to be locked ( -e 2), a system reboot will be \nrequired in order to load any changes.  \nKey names are optional on the rules and will not be used as a compliance \nauditing. The usage of key names is highly recommended as it facilitates \norganization and searching, as such, all remediation steps will have key names \nsupplied.  \nIt is best practice to store the rules, in number prepended files, in \n/etc/audit/rules.d/ . Rules must end in a .rules  suffix. This then requires \nthe use of augenrules  to merge all the rules into /etc/audit/audit.rules  \nbased on their their alphabetical (lexical) sort order. All benchmark \nrecommendations follow this best practice for remediation, specifically using the \nprefix of 50 which is centre weighed if all rule sets make use of the number \nprepending naming convention.  \nYour system may have been customized to change the default UID_MIN . All \nsamples output uses 1000 , but this value will not be used in compliance auditing. \nTo confirm the UID_MIN  for your system, run the following command: awk \n'/^\\s*UID_MIN/{print $2}' /etc/login.defs   \n  Page 797 Normalization  \nThe Audit system normalizes some entries, so when you look at the sample output keep \nin mind that:  \nWith regards to users whose login UID is not set, the values -1 / unset  / \n4294967295  are equivalent and normalized to -1. \nWhen comparing field types and both sides of the comparison is valid fields \ntypes, such as euid!=uid , then the auditing system may normalize such that the \noutput is uid!=euid . \nSome parts of the rule may be rearranged whilst others are dependant on \nprevious syntax. For example, the following two statements are the same:  \n-a always,exit -F arch=b64 -S execve -C uid!=euid -F auid!= -1 -F \nkey=user_emulation  \nand \n-a always,exit -F arch=b64 -C euid!=uid -F auid!=unset -S execve -k \nuser_emulation  \nCapacity planning  \nThe recommendations in this section implement auditing policies that not only produces \nlarge quantities of logged data, but may also negatively impact system performance. \nCapacity planning is critical in order not to adversely impact production environment s. \nDisk space. If a significantly large set of events are captured, additional on \nsystem or off system storage may need to be allocated. If the logs are not sent to \na remote log server, ensure that log rotation is implemented else the disk will fill \nup and th e system will halt. Even when logs are sent to a log server, ensure \nsufficient disk space to allow caching of logs in the case of temporary network \noutages.  \nDisk IO. It is not just the amount of data collected that should be considered, but \nthe rate at which logs are generated.  \nCPU overhead. System call rules might incur considerable CPU overhead. Test \nthe systems open/close syscalls per second with and without the rules to gauge \nthe impact of the rules.  Page 798",
                "audit_command": "!/usr/bin/env bash  ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "!/usr/bin/env bash",
                    "a_out2[@]}\" -gt 0 ] && a_output2+=(\" - File: \\\"$l_fname \\\" is:\"",
                    "a:%U:%G' \"$l_file\")",
                    "a_output2[@]}\" -le 0 ]; then # If all files passed, then we",
                    "( printf '%o' $(( 0777 & ~$perm_mask)) )\"",
                    "(( $l_mode & $perm_mask )) -gt 0 ]; then",
                    "l_mode \\\" should be \\\"$maxperm \\\" or more",
                    "l_rperms\" \"$l_fname\"",
                    "l_user\" =~ $l_auser ]]; then",
                    "l_user \\\" and should be owned by",
                    "{l_auser//|/ or } \\\"\" \"     x Cha nging ownership to: \\\"$l_fix_account \\\"\")",
                    "l_fix_account\" \"$l_fname\"",
                    "l_group\" =~ $l_agroup ]]; then",
                    "l_group \\\" and should be group",
                    "{l_agroup//|/ or } \\\"\" \"     x C hanging group ownership to:",
                    "l_fix_account \\\"\")",
                    "l_fix_account\" \"$l_fname\"",
                    "{#a_out2[@]}\" -gt 0 ] && a_output2+=(\" - File: \\\"$l_fname \\\" is:\"",
                    "{a_out2[@]}\")",
                    "'\\0' l_file; do",
                    "' <<< \"$(dirname \"$l_fname\")\"; then",
                    "(basename \"$l_fname\")\" in",
                    "l_user\" = \"root\" ] || ! grep -Pq -- \"^\\h*$(awk -F:",
                    "1==\"'\"$l_user\"'\" {print $7}' /etc/passwd) \\b\" /etc/shells; then",
                    "l_auser\" <<< \"$l_user\" &&",
                    "l_user )\"",
                    "l_agroup\" <<< \"$l_group\" &&",
                    "l_group)\"",
                    "l_file\")",
                    "{#a_output2[@]}\" -le 0 ]; then # If all files passed, then we",
                    "{a_output2[@]}\" \"\"",
                    "2}' /etc/login.defs",
                    "chmod",
                    "chown"
                ]
            },
            "6.2.1": {
                "id": "6.2.1",
                "title": "Configure auditd Service  \nThe capturing of system events provides system administrators with information to allow \nthem to determine if unauthorized access to their system is occurring.  Page 799 6.2.1.1 Ensure auditd packages are installed (Automated)",
                "audit": "Run the following command and verify auditd  is installed:  \n# dpkg-query -s auditd &>/dev/null && echo auditd is installed  \n \nauditd is installed  \nRun the following command to verify audispd-plugins  is installed:  \n# dpkg-query -s audispd -plugins &>/dev/null && echo audispd -plugins is \ninstalled  \n \naudispd-plugins is installed",
                "remediation": "Run the following command to Install auditd  and audispd-plugins  \n# apt install auditd audispd -plugins \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -2, AU -3, AU -12, SI -5 \n  Page 800 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.5 Collect Detailed Audit Logs  \n Configure detailed audit logging for enterprise assets containing sensitive data. \nInclude event source, date, username, timestamp, source addresses, destination \naddresses, and other useful elements that could assist in a forensic investigation.   \u25cf \u25cf \nv7 6.2 Activate audit logging  \n Ensure that local logging has been enabled on all systems and networking \ndevices.  \u25cf \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1562, T1562.001  TA0005  M1018  Page 801",
                "audit_command": "dpkg-query -s auditd &>/dev/null && echo auditd is installed  \ndpkg-query -s audispd -plugins &>/dev/null && echo audispd -plugins is ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "apt install auditd audispd -plugins"
                ]
            },
            "6.2.2": {
                "id": "6.2.2",
                "title": "Configure Data Retention  \nWhen auditing, it is important to carefully configure the storage requirements for audit \nlogs. By default, auditd will max out the log files at 5MB and retain only 4 copies of \nthem. Older versions will be deleted. It is possible on a system that the 20 MBs  of audit \nlogs may fill up the system causing loss of audit data. While the recommendations here \nprovide guidance, check your site policy for audit storage requirements.  Page 808 6.2.2.1 Ensure audit log storage size is configured (Automated)",
                "audit": "Run the following command and ensure output is in compliance with site policy:  \n# grep -Po -- '^\\h*max_log_file \\h*=\\h*\\d+\\b' /etc/audit/auditd.conf  \n \nmax_log_file = <MB>",
                "remediation": "Set the following parameter in /etc/audit/auditd.conf  in accordance with site \npolicy:  \nmax_log_file = <MB>",
                "audit_command": "grep -Po -- '^\\h*max_log_file \\h*=\\h*\\d+\\b' /etc/audit/auditd.conf  ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": []
            },
            "6.2.3": {
                "id": "6.2.3",
                "title": "Configure auditd Rules  \nThe Audit system operates on a set of rules that define what is to be captured in the log \nfiles. \nThe following types of Audit rules can be specified:  \nControl rules: Allow the Audit system's behavior and some of its configuration to \nbe modified.  \nFile system rules: Allow the auditing of access to a particular file or a directory. \n(Also known as file watches)  \nSystem call rules: Allow logging of system calls that any specified program \nmakes.  \nAudit rules can be set:  \non the command line using the auditctl utility. Note that these rules are not \npersistent across reboots.  \nin a file ending in .rules  in the /etc/audit/rules.d/  directory.  \nNote:  The Linux Benchmarks are written and tested against x86_64 processor \narchitecture. If you are running a different processor type, please review and update the \naudit rules for the processor architecture of the system  Page 819 6.2.3.1 Ensure changes to system administration scope (sudoers) \nis collected (Automated)",
                "audit": "On disk configuration  \nRun the following command to check the on disk rules:  \n# awk '/^ * -w/ \\ \n&&/\\/etc\\/sudoers/ \\ \n&&/ +-p *wa/ \\ \n&&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules  \nVerify the output matches:  \n-w /etc/sudoers -p wa -k scope \n-w /etc/sudoers.d -p wa -k scope \nRunning configuration  \nRun the following command to check loaded rules:  \n# auditctl -l | awk '/^ * -w/ \\ \n&&/\\/etc\\/sudoers/ \\ \n&&/ +-p *wa/ \\ \n&&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)'  \nVerify the output matches:  \n-w /etc/sudoers -p wa -k scope \n-w /etc/sudoers.d -p wa -k scope",
                "remediation": "Edit or create a file in the /etc/audit/rules.d/  directory, ending in .rules  extension, \nwith the relevant rules to monitor scope changes for system administrators.  \nExample:  \n# printf \"  \n-w /etc/sudoers -p wa -k scope \n-w /etc/sudoers.d -p wa -k scope \n\" >> /etc/audit/rules.d/50 -scope.rules  \nMerge and load the rules into active configuration:  \n# augenrules --load \nCheck if reboot is required.  \n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot \nrequired to load rules \\n\"; fi \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -3 \n  Page 821 Additional Information:  \nPotential reboot required  \nIf the auditing configuration is locked ( -e 2), then augenrules  will not warn in any way \nthat rules could not be loaded into the running configuration. A system reboot will be \nrequired to load the rules into the running configuration.  \nSystem call structure  \nFor performance ( man 7 audit.rules ) reasons it is preferable to have all the system \ncalls on one line. However, your configuration may have them on one line each or some \nother combination. This is important to understand for both the auditing and remediation \nsections as the examples given are optimized for performance as per the man page.  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.5 Collect Detailed Audit Logs  \n Configure detailed audit logging for enterprise assets containing sensitive data. \nInclude event source, date, username, timestamp, source addresses, destination \naddresses, and other useful elements that could assist in a forensic investigation.   \u25cf \u25cf \nv7 4.8 Log and Alert on Changes to Administrative Group \nMembership  \n Configure systems to issue a log entry and alert when an account is added to \nor removed from any group assigned administrative privileges.   \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1562, T1562.006  TA0004  M1047  Page 822",
                "audit_command": "awk '/^ * -w/ \\ \nauditctl -l | awk '/^ * -w/ \\ ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "printf \"",
                    "augenrules --load",
                    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot",
                    "(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot"
                ]
            },
            "6.2.4": {
                "id": "6.2.4",
                "title": "Configure auditd File Access  \nWithout the capability to restrict which roles and individuals can select which events are \naudited, unauthorized personnel may be able to prevent the auditing of critical events.  Page 899 6.2.4.1 Ensure audit log files mode is configured (Automated)",
                "audit": "Run the following script to verify audit log files are mode 0640  or more restrictive:  \n#!/usr/bin/env bash  \n \n{ \n   l_perm_mask=\"0137\"  \n   if [ -e \"/etc/audit/auditd.conf\" ]; then  \n      l_audit_log_directory=\"$(dirname \"$(awk -F= '/^\\s*log_file \\s*/{print \n$2}' /etc/audit/auditd.conf | xargs)\")\"  \n      if [ -d \"$l_audit_log_directory\" ]; then  \n         l_maxperm=\"$(printf '%o' $(( 0777 & ~$l_perm_mask )) )\"  \n         a_files=()  \n         while IFS= read -r -d $'\\0' l_file; do  \n            [ -e \"$l_file\" ] && a_files+=(\"$l_file\")  \n         done < <(find \"$l_audit_log_directory\" -maxdepth 1 -type f -perm \n/\"$l_perm_mask\" -print0) \n   if (( \"${#a_files[@]}\" > 0 )); then  \n            for l_file in \"${a_files[@]}\"; do  \n               l_file_mode=\"$(stat -Lc '%#a' \"$l_file\")\"  \n               echo -e \"\\n- Audit Result: \\n  ** FAIL ** \\n  - File: \n\\\"$l_file \\\" is mode: \\\"$l_file_mode \\\"\\n     (should be mode: \\\"$l_maxperm \\\" \nor more restrictive) \\n\" \n            done \n         else \n            echo -e \"\\n- Audit Result: \\n  ** PASS ** \\n  - All files in \n\\\"$l_audit_log_directory \\\" are mode: \\\"$l_maxperm \\\" or more restrictive\"  \n         fi \n      else \n         echo -e \"\\n- Audit Result: \\n  ** FAIL ** \\n  - Log file directory not \nset in \\\"/etc/audit/auditd.conf \\\" please set log file directory\"  \n      fi \n   else \n      echo -e \"\\n- Audit Result: \\n  ** FAIL ** \\n  - File: \n\\\"/etc/audit/auditd .conf\\\" not found. \\n  - ** Verify auditd is installed **\"  \n   fi \n}",
                "remediation": "Run the following command to remove more permissive mode than 0640  from audit log \nfiles: \n# [ -f /etc/audit/auditd.conf ] && find \"$(dirname $(awk -F \"=\" \n'/^\\s*log_file/ {print $2}' /etc/audit/auditd.conf | xargs))\" -type f -perm \n/0137 -exec chmod u -x,g-wx,o-rwx {} +  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -3 Page 901 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 3.3 Configure Data Access Control Lists  \n Configure data access control lists based on a user\u2019s need to know. Apply data \naccess control lists, also known as access permissions, to local and remote file \nsystems, databases, and applications.  \u25cf \u25cf \u25cf \nv7 14.6 Protect Information through Access Control Lists  \n Protect all information stored on systems with file system, network share, \nclaims, application, or database specific access control lists. These controls will \nenforce the principle that only authorized individuals should have access to the \ninformation base d on their need to access the information as a part of their \nresponsibilities.  \u25cf \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1070, T1070.002, T1083, \nT1083.000  TA0007  M1022  Page 902",
                "audit_command": "!/usr/bin/env bash  \n2}' /etc/audit/auditd.conf | xargs)\")\"  ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "[ -f /etc/audit/auditd.conf ] && find \"$(dirname $(awk -F \"=\"",
                    "(dirname $(awk -F \"=\"",
                    "2}' /etc/audit/auditd.conf | xargs))\" -type f -perm"
                ]
            }
        }
    },
    "1": {
        "description": "",
        "sub_rules": {
            "1.1.2": {
                "id": "1.1.2",
                "title": "Ensure journald log file access is configured (Manual)",
                "audit": "Run the following script to verify:  \nsystemd -journald logfiles are mode 0640  or more restrictive  \nDirectories /run/ and /var/lib/systemd/ are mode 0755  or more restrictive  \nAll other configured directories are mode 2755 , 0750 , or more restrictive  Page 732 #!/usr/bin/env bash  \n \n{ \n   a_output=() a_output2=()  \n   l_systemd_config_file=\"/etc/tmpfiles.d/systemd.conf\" \nl_analyze_cmd=\"$(readlink -f /bin/systemd -analyze)\"  \n   f_file_chk()  \n   { \n      l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_perm_mask )) )\"  \n      if [ $(( $l_mode & $l_perm_mask )) -le 0 ] || [[ \"$l_type\" = \n\"Directory\" && \"$l_mode\" =~ 275(0|5) ]]; then  \n         a_out+=(\"  - $l_type \\\"$l_logfile \\\" access is:\" \\ \n         \"    mode: \\\"$l_mode \\\", owned by: \\\"$l_user \\\", and group owned by: \n\\\"$l_group \\\"\") \n      else \n         a_out2+=(\"  - $l_type \\\"$l_logfile \\\" access is:\" \\ \n         \"    mode: \\\"$l_mode \\\", owned by: \\\"$l_user \\\", and group owned by: \n\\\"$l_group \\\"\" \\ \n         \"    should be mode: \\\"$l_maxperm \\\" or more restrictive\")  \n      fi \n   } \n   while IFS= read  -r l_file; do  \n      l_file=\"$(tr -d '# ' <<< \"$l_file\")\" a_out=() a_out2=()  \n      l_logfile_perms_line=\"$(awk '($1~/^(f|d)$/ && $2~/ \\/\\S+/ && $3~/[0 -\n9]{3,}/){print $2 \":\" $3 \":\" $4 \":\" $5}' \"$l_file\")\"  \n      while IFS=: read -r l_logfile l_mode l_user l_g roup; do  \n         if [ -d \"$l_logfile\" ]; then  \n            l_perm_mask=\"0027\" l_type=\"Directory\"  \n            grep -Psq '^(\\/run|\\/var\\/lib\\/systemd) \\b' <<< \"$l_logfile\" && \nl_perm_mask=\"0022\"  \n         else \n            l_perm_mask=\"0137\" l_type=\"File\"  \n         fi \n         grep -Psq '^(\\/run|\\/var\\/lib\\/systemd) \\b' <<< \"$l_logfile\" && \nl_perm_mask=\"0022\"  \n         f_file_chk  \n      done <<< \"$l_logfile_perms_line\"  \n      [ \"${#a_out[@]}\" -gt \"0\" ] && a_output+=(\" - File: \\\"$l_file \\\" sets:\" \n\"${a_out[@]}\")  \n      [ \"${#a_out2[@]}\" -gt \"0\" ] && a_output2+=(\" - File: \\\"$l_file \\\" sets:\" \n\"${a_out2[@]}\")  \n   done < <($l_analyze_cmd cat -config \"$l_systemd_config_file\" | tac | grep -\nPio '^\\h*#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b') \n   if [ \"${#a_output2[@]}\" -le 0 ]; then  \n      printf '%s \\n' \"\" \"- Audit Result:\" \"  ** PASS **\" \"${a_output[@]}\" \"\"  \n   else \n      printf '%s \\n' \"\" \"- Audit Result:\" \"  ** REVIEW **\" \\ \n      \" -  Review file access to ensure they are set IAW site policy:\" \n\"${a_output2[@]}\"  \n      [ \"${#a_output[@]}\" -gt 0 ] && pr intf '%s \\n' \"\" \"- Correctly set:\" \n\"${a_output[@]}\" \"\"  \n   fi    \n} \nReview the output  Page 733",
                "remediation": "If the default configuration is not appropriate for the site specific requirements, copy \n/usr/lib/tmpfiles.d/systemd.conf  to /etc/tmpfiles.d/systemd.conf  and \nmodify as required. Recommended mode for logfiles is 0640  or more restrictive.  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AC -3, AU -2, AU -12, MP -2, SI-5 \nAdditional Information:  \nSee man 5 tmpfiles.d  for detailed information on the permission sets for the relevant \nlog files. Further information with examples can be found at \nhttps://www.freedesktop.org/software/systemd/man/tmpfiles.d.html  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 3.3 Configure Data Access Control Lists  \n Configure data access control lists based on a user\u2019s need to know. Apply data \naccess control lists, also known as access permissions, to local and remote file \nsystems, databases, and applications.  \u25cf \u25cf \u25cf \nv7 14.6 Protect Information through Access Control Lists  \n Protect all information stored on systems with file system, network share, \nclaims, application, or database specific access control lists. These controls will \nenforce the principle that only authorized individuals should have access to the \ninformation base d on their need to access the information as a part of their \nresponsibilities.  \u25cf \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1070, T1070.002, T1083, \nT1083.000  TA0007  M1022  \nPage 734",
                "audit_command": "",
                "audit_output": "No specific audit output provided.",
                "remediation_command": []
            },
            "1.1.3": {
                "id": "1.1.3",
                "title": "Ensure journald log file rotation is configured (Manual)",
                "audit": "Review the systemd-journald  configuration. Verify logs are rotated according to site \npolicy. The specific parameters for log rotation are:  \nRun the following script and review the output to ensure logs are rotated according to \nsite policy:  Page 735 #!/usr/bin/env bash  \n \n{ \n   a_output=() a_output2=() l_analyze_cmd=\"$(readlink -f /bin/systemd -analyze)\" \nl_systemd_config_file=\"systemd/journald.conf\"  \n   a_parameters=(\"SystemMaxUse=^.+$\" \"SystemKeepFree=^.+$\" \"RuntimeMaxUse=^.+$\" \n\"RuntimeKeepFree=^.+$\" \"Max FileSec=^.+$\")  \n   f_config_file_parameter_chk()  \n   { \n      l_used_parameter_setting=\"\"  \n      while IFS= read -r l_file; do  \n         l_file=\"$(tr -d '# ' <<< \"$l_file\")\"  \n         l_used_parameter_setting=\"$(grep -PHs -- '^\\h*'\"$l_parameter_name\"' \\b' \n\"$l_file\" | tail -n 1)\" \n         [ -n \"$l_used_parameter_setting\" ] && break  \n      done < <($l_analyze_cmd cat -config \"$l_systemd_config_file\" | tac | grep -Pio \n'^\\h*#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b') \n      if [ -n \"$l_used_parameter_setting\" ]; then  \n         while IFS= : read -r l_file_name l_file_parameter; do  \n            while IFS=\"=\" read -r l_file_parameter_name l_file_parameter_value; do  \n               if grep -Pq -- \"$l_parameter_value\" <<< \"$l_file_parameter_value\"; then  \n                  a_output+=(\"  - Parameter : \\\"${l_file_parameter_name// /} \\\"\" \\ \n                  \"    set to: \\\"${l_file_parameter_value// /} \\\"\" \\ \n                  \"    in the file: \\\"$l_file_name \\\"\") \n               fi \n            done <<< \"$l_file_parameter\"  \n         done <<< \"$l_used_parameter _setting\"  \n      else \n         a_output2+=(\"  - Parameter: \\\"$l_parameter_name \\\" is not set in an included \nfile\" \\ \n         \"   *** Note: ***\" \"   \\\"$l_parameter_name \\\" May be set in a file that's \nignored by load procedure\")  \n      fi \n   } \n   for l_input_par ameter in \"${a_parameters[@]}\"; do  \n      while IFS=\"=\" read -r l_parameter_name l_parameter_value; do # Assess and check \nparameters  \n         l_parameter_name=\"${l_parameter_name// /}\"; \nl_parameter_value=\"${l_parameter_value// /}\"  \n         l_value_out=\"${l_ parameter_value// -/ through }\"; \nl_value_out=\"${l_value_out//|/ or }\"  \n         l_value_out=\"$(tr -d '(){}' <<< \"$l_value_out\")\"  \n         f_config_file_parameter_chk  \n      done <<< \"$l_input_parameter\"  \n   done \n   if [ \"${#a_output2[@]}\" -le 0 ]; then  \n      printf '%s \\n' \"\" \"- Audit Result:\" \"  ** PASS **\" \"${a_output[@]}\" \"\"  \n   else \n      printf '%s \\n' \"\" \"- Audit Result:\" \"  ** FAIL **\" \" - Reason(s) for audit \nfailure:\" \"${a_output2[@]}\"  \n      [ \"${#a_output[@]}\" -gt 0 ] && printf '%s \\n' \"\" \"- Correctly set: \" \n\"${a_output[@]}\" \"\"  \n   fi \n} \n  Page 736",
                "remediation": "Edit /etc/systemd/journald.conf  or a file ending in .conf  the \n/etc/systemd/journald.conf.d/  directory. Set the following parameters in the \n[Journal]  section to ensure logs are rotated according to site policy. The settings \nshould be carefully understood as there are specific edge cases and prioritization of \nparameters.  \nExample Configuration : \n[Journal]  \nSystemMaxUse=1G  \nSystemKeepFree=500M  \nRuntimeMaxUse=200M  \nRuntimeKeepFree=50M  \nMaxFileSec=1month  \nExample script to create systemd drop -in configuration file:  \n{ \n   a_settings=(\"SystemMaxUse=1G\" \"SystemKeepFree=500M\" \"RuntimeMaxUse=200M\" \n\"RuntimeKeepFree=50M\" \"MaxFileSec=1month\")  \n   [ ! -d /etc/systemd/journald.conf.d/ ] && mkdir \n/etc/systemd/journald.conf.d/  \n   if grep -Psq -- '^\\h*\\[Journal \\]' /etc/systemd/jour nald.conf.d/60 -\njournald.conf; then  \n      printf '%s \\n' \"\" \"${a_settings[@]}\" >> /etc/systemd/journald.conf.d/60 -\njournald.conf  \n   else \n      printf '%s \\n' \"\" \"[Journal]\" \"${a_settings[@]}\" >> \n/etc/systemd/journald.conf.d/60 -journald.conf  \n   fi \n} \nNote:  \nIf these settings appear in a canonically later file, or later in the same file, the \nsetting will be overwritten  \nLogfile size and configuration to move logfiles to a remote log server should be \naccounted for when configuring these settings  \nRun to following command to update the parameters in the service:  \n# systemctl reload -or-restart systemd -journald  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -2, AU -7, AU -12 \nAdditional Information:  \nSee man 5 journald.conf  for detailed information regarding the parameters in use.  Page 737 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.2 Collect Audit Logs  \n Collect audit logs. Ensure that logging, per the enterprise\u2019s audit log \nmanagement process, has been enabled across enterprise assets.  \u25cf \u25cf \u25cf \nv7 6.2 Activate audit logging  \n Ensure that local logging has been enabled on all systems and networking \ndevices.  \u25cf \u25cf \u25cf \nv7 6.3 Enable Detailed Logging  \n Enable system logging to include detailed information such as an event \nsource, date, user, timestamp, source addresses, destination addresses, and \nother useful elements.   \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1070, T1070.002  TA0040  M1022  Page 738",
                "audit_command": "",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "systemctl reload -or-restart systemd -journald",
                    "{a_settings[@]}\" >> /etc/systemd/journald.conf.d/60 -",
                    "{a_settings[@]}\" >>"
                ]
            },
            "1.1.4": {
                "id": "1.1.4",
                "title": "Ensure only one logging system is in use (Automated)",
                "audit": "Run the following script to ensure only one logging system is in use:  \n#!/usr/bin/env bash  \n \n{ \n    l_output=\"\" l_output2=\"\" # Check the status of rsyslog and journald  \n    if systemctl is -active --quiet rsyslog; then  \n        l_output=\"$l_output \\n - rsyslog is in use \\n- follow the \nrecommendations in Configure rsyslog subsection only\" \n    elif systemctl is -active --quiet systemd -journald; then  \n        l_output=\"$l_output \\n - journald is in use \\n- follow the \nrecommendations in Configure journald subsection only\"  \n    else \n        echo -e \u201cunable to determine system logging\u201d  \n        l_output2=\"$l_output2 \\n - unable to determine system logging \\n- \nConfigure only ONE system logging: rsyslog OR journald\"  \n    fi \n    if [ -z \"$l_output2\" ]; then  # Provide audit results  \n        echo -e \"\\n- Audit Result: \\n  ** PASS ** \\n$l_output \\n\" \n    else \n        echo -e \"\\n- Audit Result: \\n  ** FAIL ** \\n - Reason(s) for audit \nfailure: \\n$l_output2\"  \n    fi \n}",
                "remediation": "1. Determine whether to use journald  - OR - rsyslog  depending on site needs  \n2. Configure systemd-jounald.service  \n3. Configure only ONE  either journald  - OR - rsyslog  and complete the \nrecommendations in that subsection  \n4. Return to this recommendation to ensure only one logging system is in use  \n  Page 740",
                "audit_command": "!/usr/bin/env bash  ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": []
            },
            "1.2.2": {
                "id": "1.2.2",
                "title": "Ensure journald ForwardToSyslog is disabled (Automated)",
                "audit": "- IF - journald  is the method for capturing logs  \nRun the following script to verify ForwardToSyslog  is set to no: Page 753 #!/usr/bin/env bash  \n \n{ \n   a_output=() a_output2=() l_analyze_cmd=\"$(readlink -f /bin/systemd -analyze)\" \nl_systemd_config_file=\"systemd/journald.conf\"  \n   a_parameters=(\"ForwardToSyslog=no\")  \n   f_config_file_parameter_chk()  \n   { \n      l_used_parameter_setting =\"\" \n      while IFS= read -r l_file; do  \n         l_file=\"$(tr -d '# ' <<< \"$l_file\")\"  \n         l_used_parameter_setting=\"$(grep -PHs -- '^\\h*'\"$l_parameter_name\"' \\b' \n\"$l_file\" | tail -n 1)\" \n         [ -n \"$l_used_parameter_setting\" ] && break  \n      done < <($l_analyze_cmd cat -config \"$l_systemd_config_file\" | tac | grep -Pio \n'^\\h*#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b') \n      if [ -n \"$l_used_parameter_setting\" ]; then  \n         while IFS=: read -r l_file_name l_file_parameter; do  \n            while IFS=\"=\" read -r l_file _parameter_name l_file_parameter_value; do  \n               if grep -Pq -- \"$l_parameter_value\" <<< \"$l_file_parameter_value\"; then  \n                  a_output+=(\"  - Parameter: \\\"${l_file_parameter_name// /} \\\"\" \\ \n                  \"    correctly set to: \\\"${l_file_parameter_value// /} \\\"\" \\ \n                  \"    in the file: \\\"$l_file_name \\\"\") \n               else \n                  a_output2+=(\"  - Parameter: \\\"${l_file_parameter_name// /} \\\"\" \\ \n                  \"    incorrectly set to: \\\"${l_file_parameter_va lue// /} \\\"\" \\ \n                  \"    in the file: \\\"$l_file_name \\\"\" \\ \n                  \"    Should be set to: \\\"$l_value_out \\\"\") \n               fi \n            done <<< \"$l_file_parameter\"  \n         done <<< \"$l_used_parameter_setting\"  \n      else \n         a_output2+=(\"  - Parameter: \\\"$l_parameter_name \\\" is not set in an included \nfile\" \\ \n         \"   *** Note: \\\"$l_parameter_name \\\" May be set in a file that's ignored by \nload procedure ***\")  \n      fi \n   } \n   for l_input_parameter in \"${a_parameters[@]}\"; do  \n      while IFS=\"=\" read -r l_parameter_name l_parameter_value; do # Assess and check \nparameters  \n         l_parameter_name=\"${l_parameter_name// /}\"; \nl_parameter_value=\"${l_parameter_value// /}\"  \n         l_value_out=\"${l_parameter_value// -/ through }\"; \nl_value_out=\"${l_value_out//|/ or }\"  \n         l_value_out=\"$(tr -d '(){}' <<< \"$l_value_out\")\"  \n         f_config_file_parameter_chk  \n      done <<< \"$l_input_parameter\"  \n   done \n   if [ \"${#a_output2[@]}\" -le 0 ]; then  \n      printf '%s \\n' \"\" \"- Audit Result:\" \"  ** PASS **\" \"${a_output[@]}\" \"\"  \n   else \n      printf '%s \\n' \"\" \"- Audit Result:\" \"  ** FAIL **\" \" - Reason(s) for audit \nfailure:\" \"${a_output2[@]}\"  \n      [ \"${#a_output[@]}\" -gt 0 ] && printf '%s \\n' \"\" \"- Correctly set:\" \n\"${a_output[@]}\" \"\"  \n   fi \n} \n  Page 754",
                "remediation": "- IF - rsyslog  is the preferred method for capturing logs, this section and \nRecommendation should be skipped and the \"Configure rsyslog\" section followed.  \n- IF - journald  is the preferred method for capturing logs:  \nSet the following parameter in the [Journal]  section in \n/etc/systemd/journald.conf  or a file in /etc/systemd/journald.conf.d/ ending in \n.conf : \nForwardToSyslog=no  \nExample script to create systemd drop -in configuration file:  \n#!/usr/bin/env bash  \n \n{ \n   a_settings=(\"ForwardToSyslog=no\")  \n   [ ! -d /etc/systemd/journald.conf.d/ ] && mkdir \n/etc/systemd/journald.conf.d/  \n   if grep -Psq -- '^\\h*\\[Journal \\]' /etc/systemd/journald.conf.d/60 -\njournald.conf; then  \n      printf '%s \\n' \"\" \"${ a_settings[@]}\" >> /etc/systemd/journald.conf.d/60 -\njournald.conf  \n   else \n      printf '%s \\n' \"\" \"[Journal]\" \"${a_settings[@]}\" >> \n/etc/systemd/journald.conf.d/60 -journald.conf  \n   fi \n} \nNote:  If this setting appears in a canonically later file, or later in the same file, the \nsetting will be overwritten  \nRun to following command to update the parameters in the service:  \n# systemctl reload -or-restart systemd -journald",
                "audit_command": "",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "!/usr/bin/env bash",
                    "systemctl reload -or-restart systemd -journald",
                    "{ a_settings[@]}\" >> /etc/systemd/journald.conf.d/60 -",
                    "{a_settings[@]}\" >>"
                ]
            },
            "1.2.3": {
                "id": "1.2.3",
                "title": "Ensure journald Compress is configured (Automated)",
                "audit": "- IF - journald  is the method for capturing logs  \nRun the following script to verify Compress  is set to yes: Page 757 #!/usr/bin/env bash  \n \n{ \n   a_output=() a_output2=() l_analyze_cmd=\"$(readlink -f /bin/systemd -analyze)\" \nl_systemd_config_file=\"systemd/journald.conf\"  \n   a_parameters=(\"Compress=yes\")  \n   f_config_file_parameter_chk()  \n   { \n      l_used_parameter_setting=\"\"  \n      while IFS= read -r l_file; do  \n         l_file=\"$(tr -d '# ' <<< \"$l_file\")\"  \n         l_used_parameter_setting=\"$(grep -PHs -- '^\\h*'\"$l_parameter_name\"' \\b' \n\"$l_file\" | tail -n 1)\" \n         [ -n \"$l_used_parameter_setting\" ] && break  \n      done < <($l_a nalyze_cmd cat -config \"$l_systemd_config_file\" | tac | grep -Pio \n'^\\h*#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b') \n      if [ -n \"$l_used_parameter_setting\" ]; then  \n         while IFS=: read -r l_file_name l_file_parameter; do  \n            while IFS=\"=\" read -r l_file_param eter_name l_file_parameter_value; do  \n               if grep -Pq -- \"$l_parameter_value\" <<< \"$l_file_parameter_value\"; then  \n                  a_output+=(\"  - Parameter: \\\"${l_file_parameter_name// /} \\\"\" \\ \n                  \"    correctly set to: \\\"${l_file _parameter_value// /} \\\"\" \\ \n                  \"    in the file: \\\"$l_file_name \\\"\") \n               else \n                  a_output2+=(\"  - Parameter: \\\"${l_file_parameter_name// /} \\\"\" \\ \n                  \"    incorrectly set to: \\\"${l_file_parameter_value// /}\\\"\" \\ \n                  \"    in the file: \\\"$l_file_name \\\"\" \\ \n                  \"    Should be set to: \\\"$l_value_out \\\"\") \n               fi \n            done <<< \"$l_file_parameter\"  \n         done <<< \"$l_used_parameter_setting\"  \n      else \n         a_output2+=(\"  - Parameter: \\\"$l_parameter_name \\\" is not set in an included \nfile\" \\ \n         \"   *** Note: \\\"$l_parameter_name \\\" May be set in a file that's ignored by \nload procedure ***\")  \n      fi \n   } \n   for l_input_parameter in \"${a_parameters[@]}\"; do  \n      while IFS=\"=\" read -r l_parameter_name l_parameter_value; do # Assess and check \nparameters  \n         l_parameter_name=\"${l_parameter_name// /}\"; \nl_parameter_value=\"${l_parameter_value// /}\"  \n         l_value_out=\"${l_parameter_value// -/ through }\"; \nl_value_ou t=\"${l_value_out//|/ or }\"  \n         l_value_out=\"$(tr -d '(){}' <<< \"$l_value_out\")\"  \n         f_config_file_parameter_chk  \n      done <<< \"$l_input_parameter\"  \n   done \n   if [ \"${#a_output2[@]}\" -le 0 ]; then  \n      printf '%s \\n' \"\" \"- Audit Result:\" \"  ** PA SS **\" \"${a_output[@]}\" \"\"  \n   else \n      printf '%s \\n' \"\" \"- Audit Result:\" \"  ** FAIL **\" \" - Reason(s) for audit \nfailure:\" \"${a_output2[@]}\"  \n      [ \"${#a_output[@]}\" -gt 0 ] && printf '%s \\n' \"\" \"- Correctly set:\" \n\"${a_output[@]}\" \"\"  \n   fi \n} \n  Page 758",
                "remediation": "- IF - rsyslog  is the preferred method for capturing logs, this section and \nRecommendation should be skipped and the \"Configure rsyslog\" section followed.  \n- IF - journald  is the preferred method for capturing logs:  \nSet the following parameter in the [Journal]  section in \n/etc/systemd/journald.conf  or a file in /etc/systemd/journald.conf.d/  ending \nin .conf : \nCompress=yes  \nExample script to create systemd drop -in configuration file:  \n#!/usr/bin/env bash  \n \n{ \n   a_settings=(\"Compress=yes\")  \n   [ ! -d /etc/systemd/journald.conf.d/ ] && mkdir \n/etc/systemd/journald.conf.d/  \n   if grep -Psq -- '^\\h*\\[Journal \\]' /etc/systemd/journald.conf.d/60 -\njournald.conf; then  \n      printf '%s \\n' \"\" \"${a_sett ings[@]}\" >> /etc/systemd/journald.conf.d/60 -\njournald.conf  \n   else \n      printf '%s \\n' \"\" \"[Journal]\" \"${a_settings[@]}\" >> \n/etc/systemd/journald.conf.d/60 -journald.conf  \n   fi \n} \nNote:  If this setting appears in a canonically later file, or later in the same file, the \nsetting will be overwritten  \nRun to following command to update the parameters in the service:  \n# systemctl reload -or-restart systemd -journald",
                "audit_command": "",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "!/usr/bin/env bash",
                    "systemctl reload -or-restart systemd -journald",
                    "{a_sett ings[@]}\" >> /etc/systemd/journald.conf.d/60 -",
                    "{a_settings[@]}\" >>"
                ]
            },
            "1.2.4": {
                "id": "1.2.4",
                "title": "Ensure journald Storage is configured (Automated)",
                "audit": "- IF - journald  is the method for capturing logs  \nRun the following script to verify Storage  is set to persistent : Page 761 #!/usr/bin/env bash  \n \n{ \n   a_output=() a_output2=() l_analyze_cmd=\"$(readlink -f /bin/systemd -analyze)\" \nl_systemd_config_file=\"systemd/journald.conf\"  \n   a_parameters=(\"Storage=persistent\")  \n   f_config_file_parameter_chk()  \n   { \n      l_used_parameter_setting =\"\" \n      while IFS= read -r l_file; do  \n         l_file=\"$(tr -d '# ' <<< \"$l_file\")\"  \n         l_used_parameter_setting=\"$(grep -PHs -- '^\\h*'\"$l_parameter_name\"' \\b' \n\"$l_file\" | tail -n 1)\" \n         [ -n \"$l_used_parameter_setting\" ] && break  \n      done < <($l_analyze_cmd cat -config \"$l_systemd_config_file\" | tac | grep -Pio \n'^\\h*#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b') \n      if [ -n \"$l_used_parameter_setting\" ]; then  \n         while IFS=: read -r l_file_name l_file_parameter; do  \n            while IFS=\"=\" read -r l_file _parameter_name l_file_parameter_value; do  \n               if grep -Pq -- \"$l_parameter_value\" <<< \"$l_file_parameter_value\"; then  \n                  a_output+=(\"  - Parameter: \\\"${l_file_parameter_name// /} \\\"\" \\ \n                  \"    correctly set to: \\\"${l_file_parameter_value// /} \\\"\" \\ \n                  \"    in the file: \\\"$l_file_name \\\"\") \n               else \n                  a_output2+=(\"  - Parameter: \\\"${l_file_parameter_name// /} \\\"\" \\ \n                  \"    incorrectly set to: \\\"${l_file_parameter_va lue// /} \\\"\" \\ \n                  \"    in the file: \\\"$l_file_name \\\"\" \\ \n                  \"    Should be set to: \\\"$l_value_out \\\"\") \n               fi \n            done <<< \"$l_file_parameter\"  \n         done <<< \"$l_used_parameter_setting\"  \n      else \n         a_output2+=(\"  - Parameter: \\\"$l_parameter_name \\\" is not set in an included \nfile\" \\ \n         \"   *** Note: \\\"$l_parameter_name \\\" May be set in a file that's ignored by \nload procedure ***\")  \n      fi \n   } \n   for l_input_parameter in \"${a_parameters[@]}\"; do  \n      while IFS=\"=\" read -r l_parameter_name l_parameter_value; do # Assess and check \nparameters  \n         l_parameter_name=\"${l_parameter_name// /}\"; \nl_parameter_value=\"${l_parameter_value// /}\"  \n         l_value_out=\"${l_parameter_value// -/ through }\"; \nl_value_out=\"${l_value_out//|/ or }\"  \n         l_value_out=\"$(tr -d '(){}' <<< \"$l_value_out\")\"  \n         f_config_file_parameter_chk  \n      done <<< \"$l_input_parameter\"  \n   done \n   if [ \"${#a_output2[@]}\" -le 0 ]; then  \n      printf '%s \\n' \"\" \"- Audit Result:\" \"  ** PASS **\" \"${a_output[@]}\" \"\"  \n   else \n      printf '%s \\n' \"\" \"- Audit Result:\" \"  ** FAIL **\" \" - Reason(s) for audit \nfailure:\" \"${a_output2[@]}\"  \n      [ \"${#a_output[@]}\" -gt 0 ] && printf '%s \\n' \"\" \"- Correctly set:\" \n\"${a_output[@]}\" \"\"  \n   fi \n} \n  Page 762",
                "remediation": "- IF - rsyslog  is the preferred method for capturing logs, this section and \nRecommendation should be skipped and the \"Configure rsyslog\" section followed.  \n- IF - journald  is the preferred method for capturing logs:  \nSet the following parameter in the [Journal]  section in \n/etc/systemd/journald.conf  or a file in /etc/systemd/journald.conf.d/ ending in \n.conf : \nStorage=persistent  \nExample script to create systemd drop -in configuration file:  \n#!/usr/bin/env bash  \n \n{ \n   a_settings=(\"Storage=persistent\")  \n   [ ! -d /etc/systemd/journald.conf.d/ ] && mkdir \n/etc/systemd/journald.conf.d/  \n   if grep -Psq -- '^\\h*\\[Journal \\]' /etc/systemd/journald.conf.d/60 -\njournald.conf; then  \n      printf '%s \\n' \"\" \"${a_settings[@]}\" >> /etc/systemd/journald.conf.d/60 -\njournald.con f \n   else \n      printf '%s \\n' \"\" \"[Journal]\" \"${a_settings[@]}\" >> \n/etc/systemd/journald.conf.d/60 -journald.conf  \n   fi \n} \nNote:  If this setting appears in a canonically later file, or later in the same file, the \nsetting will be overwritten  \nRun to following command to update the parameters in the service:  \n# systemctl reload -or-restart systemd -journald",
                "audit_command": "",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "!/usr/bin/env bash",
                    "systemctl reload -or-restart systemd -journald",
                    "{a_settings[@]}\" >> /etc/systemd/journald.conf.d/60 -",
                    "{a_settings[@]}\" >>"
                ]
            },
            "1.3.2": {
                "id": "1.3.2",
                "title": "Ensure rsyslog service is enabled and active (Automated)",
                "audit": "- IF - rsyslog  is being used for logging on the system:  \nRun the following command to verify rsyslog.service  is enabled:  \n# systemctl is -enabled rsyslog  \n \nenabled \nRun the following command to verify rsyslog.service  is active:  \n# systemctl is -active rsyslog.service  \n \nactive",
                "remediation": "- IF - rsyslog  is being used for logging on the system:  \nRun the following commands to unmask, enable, and start rsyslog.service : \n# systemctl unmask rsyslog.service  \n# systemctl enable rsyslog.service  \n# systemctl start rsyslog.service  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -2, AU -3, AU -12 Page 768 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.2 Collect Audit Logs  \n Collect audit logs. Ensure that logging, per the enterprise\u2019s audit log \nmanagement process, has been enabled across enterprise assets.  \u25cf \u25cf \u25cf \nv7 6.2 Activate audit logging  \n Ensure that local logging has been enabled on all systems and networking \ndevices.  \u25cf \u25cf \u25cf \nv7 6.3 Enable Detailed Logging  \n Enable system logging to include detailed information such as an event \nsource, date, user, timestamp, source addresses, destination addresses, and \nother useful elements.   \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1070, T1070.002, T1211, \nT1562, T1562.001  TA0005  M1029  Page 769",
                "audit_command": "systemctl is -enabled rsyslog  \nsystemctl is -active rsyslog.service  ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "systemctl unmask rsyslog.service",
                    "systemctl enable rsyslog.service",
                    "systemctl start rsyslog.service"
                ]
            },
            "1.3.3": {
                "id": "1.3.3",
                "title": "Ensure journald is configured to send logs to rsyslog \n(Automated)",
                "audit": "- IF - rsyslog  is the preferred method for capturing logs  \nRun the following script to verify that logs are forwarded to rsyslog  by setting \nForwardToSyslog  to yes in the systemd -journald configuration:  Page 770 #!/usr/bin/env bash  \n \n{ \n   a_output=() a_output2=() l_analyze_cmd=\"$(readlink -f /bin/systemd -analyze)\" \nl_systemd_config_file=\"systemd/journald.conf\"  \n   a_parameters=(\"ForwardToSyslog=yes\")  \n   f_config_file_parameter_chk()  \n   { \n      l_used_parameter_settin g=\"\" \n      while IFS= read -r l_file; do  \n         l_file=\"$(tr -d '# ' <<< \"$l_file\")\"  \n         l_used_parameter_setting=\"$(grep -PHs -- '^\\h*'\"$l_parameter_name\"' \\b' \n\"$l_file\" | tail -n 1)\" \n         [ -n \"$l_used_parameter_setting\" ] && break  \n      done < <($l_analyze_cmd cat -config \"$l_systemd_config_file\" | tac | grep -Pio \n'^\\h*#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b') \n      if [ -n \"$l_used_parameter_setting\" ]; then  \n         while IFS=: read -r l_file_name l_file_parameter; do  \n            while IFS=\"=\" read -r l_file_parameter_name l_file_parameter_value; do  \n               if grep -Pq -- \"$l_parameter_value\" <<< \"$l_file_parameter_value\"; then  \n                  a_output+=(\"  - Parameter: \\\"${l_file_parameter_name// /} \\\"\" \\ \n                  \"    correctly set to: \\\"${l_file_parameter_value// /} \\\"\" \\ \n                  \"    in the file: \\\"$l_file_name \\\"\") \n               else \n                  a_output2+=(\"  - Parameter: \\\"${l_file_parameter_name// /} \\\"\" \\ \n                  \"    incorrectly set to: \\\"${l_file_parameter_v alue// /} \\\"\" \\ \n                  \"    in the file: \\\"$l_file_name \\\"\" \\ \n                  \"    Should be set to: \\\"$l_value_out \\\"\") \n               fi \n            done <<< \"$l_file_parameter\"  \n         done <<< \"$l_used_parameter_setting\"  \n      else \n         a_output2+=(\"  - Parameter: \\\"$l_parameter_name \\\" is not set in an included \nfile\" \\ \n         \"   *** Note: \\\"$l_parameter_name \\\" May be set in a file that's ignored by \nload procedure ***\")  \n      fi \n   } \n   for l_input_parameter in \"${a_parameters[@]}\"; do  \n      while IFS=\"=\" read -r l_parameter_name l_parameter_value; do # Assess and check \nparameters  \n         l_parameter_name=\"${l_parameter_name// /}\"; \nl_parameter_value=\"${l_parameter_value// /}\"  \n         l_value_out=\"${l_parameter_value// -/ through }\"; \nl_value_out=\"${l_value_out//|/ or }\"  \n         l_value_out=\"$(tr -d '(){}' <<< \"$l_value_out\")\"  \n         f_config_file_parameter_chk  \n      done <<< \"$l_input_parameter\"  \n   done \n   if [ \"${#a_output2[@]}\" -le 0 ]; then  \n      printf '%s \\n' \"\" \"- Audit Result:\" \"   ** PASS **\" \"${a_output[@]}\" \"\"  \n   else \n      printf '%s \\n' \"\" \"- Audit Result:\" \"  ** FAIL **\" \" - Reason(s) for audit \nfailure:\" \"${a_output2[@]}\"  \n      [ \"${#a_output[@]}\" -gt 0 ] && printf '%s \\n' \"\" \"- Correctly set:\" \n\"${a_output[@]}\" \"\"  \n   fi \n} \nRun the following command to verify systemd-journald.service  and \nrsyslog.service  are loaded and active:  Page 771 # systemctl list -units --type service | grep -P -- '(journald|rsyslog)'  \nOutput should be similar to:  \nrsyslog.service                                       loaded active running \nSystem Logging Service  \nsystemd-journald.service                              loaded active running \nJournal Service",
                "remediation": "- IF - Journald  is the preferred method for capturing logs, this section and \nRecommendation should be skipped and the \"Configure Journald\" section followed.  \n- IF - rsyslog  is the preferred method for capturing logs:  \nSet the following parameter in the [Journal]  section in \n/etc/systemd/journald.conf  or a file in /etc/systemd/journald.conf.d/  ending \nin .conf : \nForwardToSyslog=yes  \nExample script to create systemd drop -in configuration file:  \n#!/usr/bin/env bash  \n \n{ \n   a_settings=(\"ForwardToSyslog=yes\")  \n   [ ! -d /etc/systemd/journald.conf.d/ ] && mkdir \n/etc/systemd/journald.conf.d/  \n   if grep -Psq -- '^\\h*\\[Journal \\]' /etc/systemd/journald.conf.d/60 -\njournald.conf; then  \n      printf '%s \\n' \"\" \"$ {a_settings[@]}\" >> /etc/systemd/journald.conf.d/60 -\njournald.conf  \n   else \n      printf '%s \\n' \"\" \"[Journal]\" \"${a_settings[@]}\" >> \n/etc/systemd/journald.conf.d/60 -journald.conf  \n   fi \n} \nNote:  If this setting appears in a canonically later file, or later in the same file, the \nsetting will be overwritten  \nRun to following command to update the parameters in the service:  \nRestart systemd-journald.service : \n# systemctl reload -or-restart systemd -journald.service  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AC -3, AU -2, AU -4, AU -12, MP -2 \n2. SYSTEMD -JOURNALD.SERVICE(8)  \n3. JOURNALD.CONF(5)  Page 772 Additional Information:  \nAs noted in the systemd-journald  man pages, systemd-journald  logs may be \nexported to rsyslog  either through the process mentioned here, or through a facility \nlike systemd-journald.service . There are trade -offs involved in each \nimplementation, where ForwardToSyslog  will immediately capture all events (and \nforward to an external log server, if properly configured), but may not capture all boot -up \nactivities. Mechanisms such as systemd-journald.service , on the other hand, will \nrecord bootup events, but may delay sending the information to rsyslog , leading to the \npotential for log manipulation prior to  export. Be aware of the limitations of all tools \nemployed to secure a system.  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.2 Collect Audit Logs  \n Collect audit logs. Ensure that logging, per the enterprise\u2019s audit log \nmanagement process, has been enabled across enterprise assets.  \u25cf \u25cf \u25cf \nv8 8.9 Centralize Audit Logs  \n Centralize, to the extent possible, audit log collection and retention across \nenterprise assets.   \u25cf \u25cf \nv7 6.2 Activate audit logging  \n Ensure that local logging has been enabled on all systems and networking \ndevices.  \u25cf \u25cf \u25cf \nv7 6.3 Enable Detailed Logging  \n Enable system logging to include detailed information such as an event \nsource, date, user, timestamp, source addresses, destination addresses, and \nother useful elements.   \u25cf \u25cf \nv7 6.5 Central Log Management  \n Ensure that appropriate logs are being aggregated to a central log \nmanagement system for analysis and review.   \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1070, T1070.002, T1562, \nT1562.006, T1565  TA0040  M1029  Page 773",
                "audit_command": "",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "!/usr/bin/env bash",
                    "systemctl reload -or-restart systemd -journald.service",
                    "{a_settings[@]}\" >> /etc/systemd/journald.conf.d/60 -",
                    "{a_settings[@]}\" >>"
                ]
            },
            "1.3.4": {
                "id": "1.3.4",
                "title": "Ensure rsyslog log file creation mode is configured \n(Automated)",
                "audit": "",
                "remediation": "",
                "audit_command": "",
                "audit_output": "No specific audit output provided.",
                "remediation_command": []
            },
            "1.3.5": {
                "id": "1.3.5",
                "title": "Ensure rsyslog logging is configured (Manual)",
                "audit": "Review the contents of /etc/rsyslog.conf  and /etc/rsyslog.d/*.conf  files to \nensure appropriate logging is set. In addition, run the following command and verify that \nthe log files are logging information as expected:  \nRun the following script and review the output from the rsyslog  configuration to ensure \nappropriate logging is set an in accordance with local site policy.  \n#!/usr/bin/env bash  \n \n{ \n   l_analyze_cmd=\" $(readlink -f /bin/systemd -analyze)\" \nl_include=' \\$IncludeConfig' a_config_files=(\"rsyslog.conf\")  \n   while IFS= read -r l_file; do  \n      l_conf_loc=\"$(awk '$1~/^ \\s*'\"$l_include\"'$/ {print $2}' \"$(tr -d '# ' \n<<< \"$l_file\")\" | tail -n 1)\" \n      [ -n \"$l_conf_ loc\" ] && break  \n   done < <($l_analyze_cmd cat -config \"${a_config_files[@]}\" | tac | grep -\nPio '^\\h*#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b') \n   if [ -d \"$l_conf_loc\" ]; then  \n      l_dir=\"$l_conf_loc\" l_ext=\"*\"  \n   elif  grep -Psq '\\/\\*\\.([^#/\\n\\r]+)?\\h*$' <<< \"$l_conf_l oc\" || [ -f \n\"$(readlink -f \"$l_conf_loc\")\" ]; then  \n      l_dir=\"$(dirname \"$l_conf_loc\")\" l_ext=\"$(basename \"$l_conf_loc\")\"  \n   fi \n   while read -r -d $'\\0' l_file_name; do  \n      [ -f \"$(readlink -f \"$l_file_name\")\" ] && a_config_files+=(\"$(readlink \n-f \"$l_file_name\")\")  \n   done < <(find -L \"$l_dir\" -type f -name \"$l_ext\" -print0 2>/dev/null)  \n   for l_logfile in \"${a_config_files[@]}\"; do  \n      grep -PHs -- '^\\h*[^#\\n\\r\\/:]+\\/var\\/log\\/.*$' \"$l_logfile\"  \n   done \n} \nExample output:  Page 778 /etc/rsyslog.d/60 -rsyslog.conf:auth,authpriv.*           /var/log/secure  \n/etc/rsyslog.d/60 -rsyslog.conf:mail.*                    -/var/log/mail  \n/etc/rsyslog.d/60 -rsyslog.conf:mail.info                 -/var/log/mail.info  \n/etc/rsyslog.d/60 -rsyslog.conf:mai l.warning              -/var/log/mail.warn  \n/etc/rsyslog.d/60 -rsyslog.conf:mail.err                  /var/log/mail.err  \n/etc/rsyslog.d/60 -rsyslog.conf:cron.*                    /var/log/cron  \n/etc/rsyslog.d/60 -rsyslog.conf:*.=warning;*.=err         -/var/log/ warn \n/etc/rsyslog.d/60 -rsyslog.conf:*.crit                    /var/log/warn  \n/etc/rsyslog.d/60 -rsyslog.conf:*.*;mail.none;news.none   -/var/log/messages  \n/etc/rsyslog.d/60 -rsyslog.conf:local0,local1.*           -\n/var/log/localmessages  \n/etc/rsyslog.d/60 -rsyslog.conf:local2,local3.*           -\n/var/log/localmessages  \n/etc/rsyslog.d/60 -rsyslog.conf:local4,local5.*           -\n/var/log/localmessages  \n/etc/rsyslog.d/60 -rsyslog.conf:local6,local7.*           -\n/var/log/localmessages  \n/etc/rsyslog.d/50 -default.conf:auth, authpriv.*           /var/log/auth.log \n#<- Will be ignored  \n/etc/rsyslog.d/50 -default.conf:*.*;auth,authpriv.none    -/var/log/syslog  \n/etc/rsyslog.d/50 -default.conf:kern.*                    -/var/log/kern.log  \n/etc/rsyslog.d/50 -default.conf:mail.*                    -/var/log/mail.log \n#<- Will be ignored  \n/etc/rsyslog.d/50 -default.conf:mail.err                  /var/log/mail.err \n#<- Will be ignored  \nNote:  \nOutput is generated as <CONFIGURATION_FILE>:<PARAMETER>  \nFiles are listed in order of precedence. If the same parameter is listed multiple \ntimes, only the first occurrence will be used be the rsyslog  daemon",
                "remediation": "Edit the following lines in the configuration file(s) returned by the audit as appropriate for \nyour environment.  \nNote:  The below configuration is shown for example purposes only. Due care should be \ngiven to how the organization wishes to store log data.  \n*.emerg                                  :omusrmsg:*  \nauth,authpriv.*                          /var/log/secure  \nmail.*                                  -/var/log/mail  \nmail.info                               -/var/log/mail.info  \nmail.warning                            -/var/log/mail.warn  \nmail.err                                 /var/log/mail.err  \ncron.*                                   /var/log/cron  \n*.=warning;*.=err                       -/var/log/warn  \n*.crit                                   /var/log/warn  \n*.*;mail.none;news.none                 -/var/log/messages  \nlocal0,local1.*                         -/var/log/localmessages  \nlocal2,local3.*                         -/var/log/localmessages  \nlocal4,local5.*                         -/var/log/localmessages  \nlocal6,l ocal7.*                         -/var/log/localmessages  \nRun the following command to reload the rsyslogd  configuration:  Page 779 # systemctl reload -or-restart rsyslog  \nReferences:  \n1. See the rsyslog.conf(5) man page for more information.  \n2. NIST SP 800 -53 Rev. 5: AU -2, AU -7, AU -12 \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.2 Collect Audit Logs  \n Collect audit logs. Ensure that logging, per the enterprise\u2019s audit log \nmanagement process, has been enabled across enterprise assets.  \u25cf \u25cf \u25cf \nv7 6.2 Activate audit logging  \n Ensure that local logging has been enabled on all systems and networking \ndevices.  \u25cf \u25cf \u25cf \nv7 6.3 Enable Detailed Logging  \n Enable system logging to include detailed information such as an event \nsource, date, user, timestamp, source addresses, destination addresses, and \nother useful elements.   \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1070, T1070.002  TA0005  M1047  Page 780",
                "audit_command": "!/usr/bin/env bash  \n<- Will be ignored  \n<- Will be ignored  \n<- Will be ignored  ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "systemctl reload -or-restart rsyslog"
                ]
            },
            "1.3.6": {
                "id": "1.3.6",
                "title": "Ensure rsyslog is configured to send logs to a remote log \nhost (Manual)",
                "audit": "Run the following script and review the output of rsyslog  configuration. Verify that logs \nare sent to a central host used by your organization:  \nbasic format  \n#!/usr/bin/env bash  \n \n{ \n   l_analyze_cmd=\"$(readlink -f /bin/systemd -analyze)\" \nl_include=' \\$IncludeConfig' a_config_files=(\"rsyslog.conf\")  \n   while IFS= read -r l_file; do  \n      l_conf_loc=\"$(awk '$1~/^ \\s*'\"$l_include\"'$/ {print $2}' \"$(tr -d '# ' \n<<< \"$l_f ile\")\" | tail -n 1)\" \n      [ -n \"$l_conf_loc\" ] && break  \n   done < <($l_analyze_cmd cat -config \"${a_config_files[@]}\" | tac | grep -\nPio '^\\h*#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b') \n   if [ -d \"$l_conf_loc\" ]; then  \n      l_dir=\"$l_conf_loc\" l_ext=\"*\"  \n   elif  grep -Psq '\\/\\*\\.([^#/\\n\\r]+)?\\h*$' <<< \"$l_conf_loc\" || [ -f \n\"$(readlink -f \"$l_conf_loc\")\" ]; then  \n      l_dir=\"$(dirname \"$l_conf_loc\")\" l_ext=\"$(basename \"$l_conf_loc\")\"  \n   fi \n   while read -r -d $'\\0' l_file_name; do  \n      [ -f \"$(readlink -f \"$l_file_name\")\" ] && a_config_files+=(\"$(readlink \n-f \"$l_file_name\")\")  \n   done < <(find -L \"$l_dir\" -type f -name \"$l_ext\" -print0 2>/dev/null)  \n   for l_logfile in \"${a_config_files[@]}\"; do  \n      grep -Hs -- \"^*.*[^I][^I]*@\" \"$l_logfile\"  \n   done \n} \nOutput should include @@<FQDN or IP of remote loghost> : \nExample output:  \n/etc/rsyslog.d/60 -rsyslog.conf:*.* @@loghost.example.com  \n- OR - \nRun the following script and review the output of rsyslog  configuration. Verify that logs \nare sent to a central host used by your organization:  \nadvanced format  Page 782 #!/usr/bin/env bash  \n \n{ \n   l_analyze_cmd=\"$(readlink -f /bin/systemd -analyze)\" \nl_include=' \\$IncludeConfig' a_config_files=(\"rsyslog.conf\")  \n   while IFS= read -r l_file; do  \n      l_conf_loc=\"$(awk '$1~/^ \\s*'\"$l_include\"'$/ {print $2}' \"$(tr -d '# ' \n<<< \"$l_f ile\")\" | tail -n 1)\" \n      [ -n \"$l_conf_loc\" ] && break  \n   done < <($l_analyze_cmd cat -config \"${a_config_files[@]}\" | tac | grep -\nPio '^\\h*#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b') \n   if [ -d \"$l_conf_loc\" ]; then  \n      l_dir=\"$l_conf_loc\" l_ext=\"*\"  \n   elif  grep -Psq '\\/\\*\\.([^#/\\n\\r]+)?\\h*$' <<< \"$l_conf_loc\" || [ -f \n\"$(readlink -f \"$l_conf_loc\")\" ]; then  \n      l_dir=\"$(dirname \"$l_conf_loc\")\" l_ext=\"$(basename \"$l_conf_loc\")\"  \n   fi \n   while read -r -d $'\\0' l_file_name; do  \n      [ -f \"$(readlink -f \"$l_file_name\")\" ] && a_config_files+=(\"$(readlink \n-f \"$l_file_name\")\")  \n   done < <(find -L \"$l_dir\" -type f -name \"$l_ext\" -print0 2>/dev/null)  \n   for l_logfile in \"${a_config_files[@]}\"; do  \n      grep -PHsi -- \n'^\\s*([^#]+ \\s+)?action \\(([^#]+\\s+)?\\btarget= \\\"?[^#\"]+ \\\"?\\b' \"$l_logfile\"  \n   done \n} \nOutput should include target=<FQDN or IP of remote loghost> : \nExample output:  \n/etc/rsyslog.d/60 -rsyslog.conf:*.* action(type=\"omfwd\" \ntarget=\"loghost.example.com\" port=\"514\" protocol=\"tcp\"",
                "remediation": "Edit the rsyslog  configuration and add the following line (where \nloghost.example.com  is the name of your central log host). The target  directive may \neither be a fully qualified domain name or an IP address.  \nExample script to create a drop -in configuration file:  \n#!/usr/bin/env bash  \n \n{ \n   a_parameters=('*.* action(type=\"omfwd\" target=\"loghost.example.com\" \nport=\"514\" protocol=\"tcp\"' \\ \n   '           action.resumeRetryCount=\"100\"' '           \nqueue.type=\"LinkedList\" queue.size=\"1000\")')  \n   [ ! -d \"/etc/rsyslog.d/\" ] && mkdir /etc/rsyslod.d/  \n   printf '%s \\n' \"\" \"${a_parameters[@]}\" >> /etc/rsyslog.d/60 -rsyslog.conf  \n} \nRun the following command to reload rsyslog.service : Page 783 # systemctl reload -or-restart rsyslog.service  \nReferences:  \n1. See the rsyslog.conf(5) man page for more information.  \n2. NIST SP 800 -53 Rev. 5: AU -6 \n3. https://www.rsyslog.com/doc/  \nAdditional Information:  \nIn addition, see the rsyslog documentation  for implementation details of TLS.  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.2 Collect Audit Logs  \n Collect audit logs. Ensure that logging, per the enterprise\u2019s audit log \nmanagement process, has been enabled across enterprise assets.  \u25cf \u25cf \u25cf \nv7 6.2 Activate audit logging  \n Ensure that local logging has been enabled on all systems and networking \ndevices.  \u25cf \u25cf \u25cf \nv7 6.3 Enable Detailed Logging  \n Enable system logging to include detailed information such as an event \nsource, date, user, timestamp, source addresses, destination addresses, and \nother useful elements.   \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1070, T1070.002, T1562, \nT1562.006  TA0040  M1029  \nPage 784",
                "audit_command": "!/usr/bin/env bash  ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "!/usr/bin/env bash",
                    "systemctl reload -or-restart rsyslog.service",
                    "{a_parameters[@]}\" >> /etc/rsyslog.d/60 -rsyslog.conf"
                ]
            },
            "1.3.7": {
                "id": "1.3.7",
                "title": "Ensure rsyslog is not configured to receive logs from a \nremote client (Automated)",
                "audit": "Unless the system's primary function is to serve as a logfile server, run the following \nscript to review the rsyslog  configuration and verify that the system is not configured to \naccept incoming logs.  \nadvanced format  \n#!/usr/bin/env bash  \n \n{ \n   a_output2=()  \n   l_analyze_cmd=\"$(readlink -f /bin/systemd -analyze)\" \nl_include=' \\$IncludeConfig' a_config_files=(\"rsyslog.conf\")  \n   while IFS= read -r l_file; do  \n      l_conf_loc=\"$(awk '$1~/^ \\s*'\"$l_include\"'$/ {print $2}' \"$(tr -d '# ' \n<<< \"$l_file\")\" | tail -n 1)\" \n      [ -n \"$l_conf_loc\" ] && break  \n   done < <($l_analyze_cmd cat -config \"${a_config_files[@]}\" | tac | grep -\nPio '^\\h*#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b') \n   if [ -d \"$l_conf_loc\" ]; then  \n      l_dir=\"$l_conf_loc\" l_ext=\"*\"  \n   elif  grep -Psq '\\/\\*\\.([^#/\\n\\r]+)?\\h*$' <<< \"$l_conf_loc\" || [ -f \n\"$(readlink -f \"$l_conf_loc\")\" ]; then  \n      l_dir=\"$(dirname \"$l_conf_loc\")\" l_ext=\"$(basename \"$l_conf_loc\")\"  \n   fi \n   while read -r -d $'\\0' l_file_name; do  \n      [ -f \"$(readlink -f \"$l_file_name\")\" ] && a_config_files+=(\"$(readlink \n-f \"$l_file_name\")\")  \n   done < <(find -L \"$l_dir\" -type f -name \"$l_ext\" -print0 2>/dev/null)  \n   for l_logfile in \"${a_config_files[@]}\"; do  \n      l_fail=\"$(grep -Psi -- '^\\h*module \\(load=\\\"?imtcp\\\"?\\)' \"$l_logfile\")\"  \n      [ -n \"$l_fail\" ] && a_output2+=(\" - Advanced format entry to accept \nincoming logs: \\\"$l_fail \\\"\" \"found in: \\\"$l_logfile \\\"\") \n      l_fail=\"$(grep -Psi -- '^\\h*input\\(type=\\\"?imtcp\\\"?\\b' \"$l_logfile\")\"  \n      [ -n \"$l_fail\" ] && a_output2+=(\" - Advanced format entry to accept \nincoming logs: \\\"$l_fail \\\"\" \"found in: \\\"$l_logfile \\\"\") \n      l_fail=\"$(grep -Psi -- '^\\h*module \\(load=\\\"?imtcp\\\"?\\)' \"$l_logfile\")\"  \n      [ -n \"$l_fail\" ] && a_output2+=(\" - Obsolete format entry to accept \nincoming logs: \\\"$l_fail \\\"\" \"found in: \\\"$l_logfile \\\"\") \n      l_fail=\"$(grep -Psi -- '^\\h*input\\(type=\\\"?imtcp\\\"?\\b' \"$l_logfile\")\"  \n      [ -n \"$l_fail\" ] && a_output2+=(\" - Obsolete format entry to accept \nincoming logs: \\\"$l_fail \\\"\" \"found in: \\\"$l_logfile \\\"\") \n   done \n   if [ \"${#a_output2[@]}\" -le \"0\" ]; then  \n      printf '%s \\n'  \"\" \" - Audit Result:\" \"  ** PASS **\" \" - No entries to \naccept incoming logs found\"  \n   else \n      printf '%s \\n' \"\" \"- Audit Result:\" \"  ** FAIL **\" \" - Reason(s) for \naudit failure:\" \"${a_output2[@] }\" \n   fi \n} \n  Page 786",
                "remediation": "Unless the system's primary function is to serve as a logfile server , modify the files \nreturned by the Audit Procedure and remove the specific lines highlighted by the audit. \nVerify none of the following entries are present in the rsyslog  configuration.  \nadvanced format  \nmodule(load=\"imtcp\")  \ninput(type=\"imtcp\" port=\"514\")  \ndeprecated legacy format  \n$ModLoad imtcp  \n$InputTCPServerRun  \nReload the service:  \n# systemctl reload -or-restart rsyslog  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -2, AU -7, AU -12, CM -6 \n2. https://www.rsyslog.com/doc/index.html  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 4.8 Uninstall or Disable Unnecessary Services on \nEnterprise Assets and Software  \n Uninstall or disable unnecessary services on enterprise assets and software, \nsuch as an unused file sharing service, web application module, or service \nfunction.   \u25cf \u25cf \nv7 9.2 Ensure Only Approved Ports, Protocols and Services \nAre Running  \n Ensure that only network ports, protocols, and services listening on a system \nwith validated business needs, are running on each system.   \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1070, T1070.002, T1562, \nT1562.006  TA0005, TA0040  M1029  \nPage 787",
                "audit_command": "!/usr/bin/env bash  ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "systemctl reload -or-restart rsyslog",
                    "ModLoad imtcp",
                    "InputTCPServerRun"
                ]
            },
            "1.3.8": {
                "id": "1.3.8",
                "title": "Ensure logrotate is configured (Manual)",
                "audit": "Run the following script to analyze the logrotate  configuration:  \n#!/usr/bin/env bash  \n \n{ \n   l_analyze_cmd=\"$(readlink -f /bin/systemd -analyze)\" \nl_config_file=\"/etc/logrotate.conf\"  \n   l_include=\"$(awk '$1~/^ \\s*include$/{print$2}' \"$l_config_file\" \n2>/dev/null)\"  \n   [ -d \"$l_include\" ] && l_include=\"$l_include/*\"  \n   $l_analy ze_cmd cat -config \"$l_config_file\" $l_include  \n} \nNote:  The last occurrence of a argument is the one used for the logrotate  \nconfiguration",
                "remediation": "Edit /etc/logrotate.conf , or the appropriate configuration file provided by the script \nin the Audit Procedure, as necessary to ensure logs are rotated according to site policy.  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -8 Page 788 Additional Information:  \nIf no maxage  setting is set for logrotate  a situation can occur where logrotate  is \ninterrupted and fails to delete rotated log files. It is recommended to set this to a value \ngreater than the longest any log file should exist on your system to ensure that any such \nlog file is removed but standard rotation settings are not overridden.  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.3 Ensure Adequate Audit Log Storage  \n Ensure that logging destinations maintain adequate storage to comply with \nthe enterprise\u2019s audit log management process.  \u25cf \u25cf \u25cf \nv7 6.4 Ensure adequate storage for logs  \n Ensure that all systems that store logs have adequate storage space for the \nlogs generated.   \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1070, T1070.002  TA0040  M1022  Page 789",
                "audit_command": "!/usr/bin/env bash  ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": []
            }
        }
    },
    "2": {
        "description": "",
        "sub_rules": {
            "2.1.2": {
                "id": "2.1.2",
                "title": "Ensure auditd service is enabled and active (Automated)",
                "audit": "Run the following command to verify auditd  is enabled:  \n# systemctl is -enabled auditd | grep '^enabled'  \n \nenabled \nVerify result is \"enabled\".  \nRun the following command to verify auditd  is active:  \n# systemctl is -active auditd | grep '^active'  \n \nactive \nVerify result is active",
                "remediation": "Run the following commands to unmask, enable and start auditd : \n# systemctl unmask auditd  \n# systemctl enable auditd  \n# systemctl start auditd  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -2, AU -12, SI -5 Page 802 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.2 Collect Audit Logs  \n Collect audit logs. Ensure that logging, per the enterprise\u2019s audit log \nmanagement process, has been enabled across enterprise assets.  \u25cf \u25cf \u25cf \nv7 6.2 Activate audit logging  \n Ensure that local logging has been enabled on all systems and networking \ndevices.  \u25cf \u25cf \u25cf \nv7 6.3 Enable Detailed Logging  \n Enable system logging to include detailed information such as an event \nsource, date, user, timestamp, source addresses, destination addresses, and \nother useful elements.   \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1562, T1562.001  TA0005  M1028  Page 803",
                "audit_command": "systemctl is -enabled auditd | grep '^enabled'  \nsystemctl is -active auditd | grep '^active'  ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "systemctl unmask auditd",
                    "systemctl enable auditd",
                    "systemctl start auditd"
                ]
            },
            "2.1.4": {
                "id": "2.1.4",
                "title": "Ensure audit_backlog_limit is sufficient (Automated)",
                "audit": "Run the following command and verify the audit_backlog_limit=  parameter is set:  \n# find /boot -type f -name 'grub.cfg' -exec grep -Ph -- '^\\h*linux' {} + | \ngrep -Pv 'audit_backlog_limit= \\d+\\b' \nNothing should be returned.",
                "remediation": "Edit /etc/default/grub  and add audit_backlog_limit=N  to \nGRUB_CMDLINE_LINUX. The recommended size for N is 8192  or larger.  \nExample:  \nGRUB_CMDLINE_LINUX=\"audit_backlog_limit=8192\"  \nRun the following command to update the grub2  configuration:  \n# update -grub",
                "audit_command": "find /boot -type f -name 'grub.cfg' -exec grep -Ph -- '^\\h*linux' {} + | ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "update -grub"
                ]
            },
            "2.1.3": {
                "id": "2.1.3",
                "title": "Ensure auditing for processes that start prior to auditd is \nenabled (Automated)",
                "audit": "Run the following command:  \n# find /boot -type f -name 'grub.cfg' -exec grep -Ph -- '^\\h*linux' {} + | \ngrep -v 'audit=1'  \nNothing should be returned.",
                "remediation": "Edit /etc/default/grub  and add audit=1  to GRUB_CMDLINE_LINUX : \nExample:  \nGRUB_CMDLINE_LINUX=\"audit=1\"  \nRun the following command to update the grub2  configuration:  \n# update -grub \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -2, AU -3, AU -12 \nAdditional Information:  \nThis recommendation is designed around the grub2 bootloader, if another bootloader is \nin use in your environment enact equivalent settings.  Page 804 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.2 Collect Audit Logs  \n Collect audit logs. Ensure that logging, per the enterprise\u2019s audit log \nmanagement process, has been enabled across enterprise assets.  \u25cf \u25cf \u25cf \nv7 6.2 Activate audit logging  \n Ensure that local logging has been enabled on all systems and networking \ndevices.  \u25cf \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1562, T1562.001  TA0005  M1047  Page 805",
                "audit_command": "find /boot -type f -name 'grub.cfg' -exec grep -Ph -- '^\\h*linux' {} + | ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "update -grub"
                ]
            },
            "2.2.2": {
                "id": "2.2.2",
                "title": "Ensure audit logs are not automatically deleted \n(Automated)",
                "audit": "Run the following command and verify output matches:  \n# grep max_log_file_action /etc/audit/auditd.conf  \n \nmax_log_file_action = keep_logs",
                "remediation": "Set the following parameter in /etc/audit/auditd.conf:  \nmax_log_file_action = keep_logs  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -8 \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.3 Ensure Adequate Audit Log Storage  \n Ensure that logging destinations maintain adequate storage to comply with \nthe enterprise\u2019s audit log management process.  \u25cf \u25cf \u25cf \nv7 6.4 Ensure adequate storage for logs  \n Ensure that all systems that store logs have adequate storage space for the \nlogs generated.   \u25cf \u25cf \n Page 811 MITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1562, T1562.006  TA0005  M1053  Page 812",
                "audit_command": "grep max_log_file_action /etc/audit/auditd.conf  ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": []
            },
            "2.2.3": {
                "id": "2.2.3",
                "title": "Ensure system is disabled when audit logs are full \n(Automated)",
                "audit": "Run the following command and verify the disk_full_action  is set to either halt  or \nsingle : \n# grep -Pi -- '^\\h*disk_full_action \\h*=\\h*(halt|single) \\b' \n/etc/audit/auditd.conf  \n \ndisk_full_action = <halt|single>  \nRun the following command and verify the disk_error_action  is set to syslog , \nsingle , or halt : \n# grep -Pi -- '^\\h*disk_error_action \\h*=\\h*(syslog|single|halt) \\b' \n/etc/audit/auditd.conf  \n \ndisk_error_action = <syslog|single|halt>  \n  Page 814",
                "remediation": "Set one of the following parameters in /etc/audit/auditd.conf  depending on your \nlocal security policies.  \ndisk_full_action = <halt|single>  \ndisk_error_action = <syslog|single|halt>  \nExample:  \ndisk_full_action = halt  \ndisk_error_action = halt  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -2, AU -8, AU -12, SI -5 \n2. AUDITD.CONF(5)  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.2 Collect Audit Logs  \n Collect audit logs. Ensure that logging, per the enterprise\u2019s audit log \nmanagement process, has been enabled across enterprise assets.  \u25cf \u25cf \u25cf \nv8 8.3 Ensure Adequate Audit Log Storage  \n Ensure that logging destinations maintain adequate storage to comply with \nthe enterprise\u2019s audit log management process.  \u25cf \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1562, T1562.006  TA0005  M1028  Page 815",
                "audit_command": "grep -Pi -- '^\\h*disk_full_action \\h*=\\h*(halt|single) \\b' \ngrep -Pi -- '^\\h*disk_error_action \\h*=\\h*(syslog|single|halt) \\b' ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": []
            },
            "2.2.4": {
                "id": "2.2.4",
                "title": "Ensure system warns when audit logs are low on space \n(Automated)",
                "audit": "Run the following command and verify the space_left_action  is set to email , exec , \nsingle , or halt : \n# grep -P -- '^\\h*space_left_action \\h*=\\h*(email|exec|single|halt) \\b' \n/etc/audit/auditd.conf  \nVerify the output is email , exec , single , or halt  \nExample output  \nspace_left_action = email  \nRun the following command and verify the admin_space_left_action  is set to single  \n- OR - halt : \n# grep -P -- '^\\h*admin_space_left_action \\h*=\\h*(single|halt) \\b' \n/etc/audit/auditd.conf  \nVerify the output is single  or halt  \nExample output:  \nadmin_space_left_action = single  \nNote:  A Mail Transfer Agent (MTA) must be installed and configured properly to set \nspace_left_action = email",
                "remediation": "Set the space_left_action  parameter in /etc/audit/auditd.conf  to email , exec , \nsingle , or halt : \nExample:  \nspace_left_action = email  \nSet the admin_space_left_action  parameter in /etc/audit/auditd.conf  to \nsingle  or halt : \nExample:  \nadmin_space_left_action = single  \nNote:  A Mail Transfer Agent (MTA) must be installed and configured properly to set \nspace_left_action = email  Page 817 References:  \n1. NIST SP 800 -53 Rev. 5: AU -2, AU -8, AU -12, SI -5 \n2. AUDITD.CONF(5)  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.2 Collect Audit Logs  \n Collect audit logs. Ensure that logging, per the enterprise\u2019s audit log \nmanagement process, has been enabled across enterprise assets.  \u25cf \u25cf \u25cf \nv8 8.3 Ensure Adequate Audit Log Storage  \n Ensure that logging destinations maintain adequate storage to comply with \nthe enterprise\u2019s audit log management process.  \u25cf \u25cf \u25cf \nv7 6.2 Activate audit logging  \n Ensure that local logging has been enabled on all systems and networking \ndevices.  \u25cf \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1562, T1562.006  TA0005   Page 818",
                "audit_command": "grep -P -- '^\\h*space_left_action \\h*=\\h*(email|exec|single|halt) \\b' \ngrep -P -- '^\\h*admin_space_left_action \\h*=\\h*(single|halt) \\b' ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": []
            },
            "2.3.2": {
                "id": "2.3.2",
                "title": "Ensure actions as another user are always logged \n(Automated)",
                "audit": "On disk configuration  \nRun the following command to check the on disk rules:  \n# awk '/^ * -a *always,exit/ \\ \n&&/ -F *arch=b(32|64)/ \\ \n&&(/ -F *auid!=unset/||/ -F *auid!= -1/||/ -F *auid!=4294967295/) \\ \n&&(/ -C *euid!=uid/||/ -C *uid!=euid/) \\ \n&&/ -S *execve/ \\ \n&&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules  \nVerify the output matches:  \n-a always,exit -F arch=b64 -C euid!=uid -F auid!=unset -S execve -k \nuser_emulation  \n-a always,exit -F arch=b32 -C euid!=uid -F auid!=unset -S execve -k \nuser_emulation  \nRunning configuration  \nRun the following command to check loaded rules:  \n# auditctl -l | awk '/^ * -a *always,exit/ \\ \n&&/ -F *arch=b(32|64)/ \\ \n&&(/ -F *auid!=unset/||/ -F *auid!= -1/||/ -F *auid!=4294967295/) \\ \n&&(/ -C *euid!=uid/||/ -C *uid!=euid/) \\ \n&&/ -S *execve/ \\ \n&&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)'  \nVerify the output matches:  \n-a always,exit -F arch=b64 -S execve -C uid!=euid -F auid!= -1 -F \nkey=user_emulation  \n-a always,exit -F arch=b32 -S execve -C uid!=euid -F auid!= -1 -F \nkey=user_emulation  \n  Page 824",
                "remediation": "Create audit rules  \nEdit or create a file in the /etc/audit/rules.d/  directory, ending in .rules  extension, \nwith the relevant rules to monitor elevated privileges.  \nExample:  \n# printf \"  \n-a always,exit -F arch=b64 -C euid!=uid -F auid!=unset -S execve -k \nuser_emulation  \n-a always,exit -F arch=b32 -C euid!=uid -F auid!=unset -S execve -k \nuser_emulation  \n\" >> /etc/audit/rules.d/50 -user_emulation.rules  \nLoad audit rules  \nMerge and load the rules into active configuration:  \n# augenrules --load \nCheck if reboot is required.  \n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot \nrequired to load rules \\n\"; fi \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -3 \nAdditional Information:  \nPotential reboot required  \nIf the auditing configuration is locked ( -e 2), then augenrules  will not warn in any way \nthat rules could not be loaded into the running configuration. A system reboot will be \nrequired to load the rules into the running configuration.  \nSystem call structure  \nFor performance ( man 7 audit.rules ) reasons it is preferable to have all the system \ncalls on one line. However, your configuration may have them on one line each or some \nother combination. This is important to understand for both the auditing and remediation \nsections as the examples given are optimized for performance as per the man page.  \n  Page 825 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.5 Collect Detailed Audit Logs  \n Configure detailed audit logging for enterprise assets containing sensitive data. \nInclude event source, date, username, timestamp, source addresses, destination \naddresses, and other useful elements that could assist in a forensic investigation.   \u25cf \u25cf \nv7 4.9 Log and Alert on Unsuccessful Administrative Account \nLogin  \n Configure systems to issue a log entry and alert on unsuccessful logins to an \nadministrative account.   \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1562, T1562.006  TA0004  M1047  Page 826",
                "audit_command": "awk '/^ * -a *always,exit/ \\ \nauditctl -l | awk '/^ * -a *always,exit/ \\ ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "printf \"",
                    "augenrules --load",
                    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot",
                    "(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot"
                ]
            },
            "2.3.3": {
                "id": "2.3.3",
                "title": "Ensure events that modify the sudo log file are collected \n(Automated)",
                "audit": "Note:  This recommendation requires that the sudo logfile is configured. See guidance \nprovided in the recommendation \"Ensure sudo log file exists\"  \nOn disk configuration  \nRun the following command to check the on disk rules:  \n# { \n SUDO_LOG_FILE=$(grep -r logfile /etc/sudoers* | sed -e 's/.*logfile=//;s/,? \n.*//' -e 's/\"//g' -e 's|/|\\\\/|g') \n [ -n \"${SUDO_LOG_FILE}\" ] && awk \"/^ * -w/ \\ \n &&/\"${SUDO_LOG_FILE}\"/ \\ \n &&/ +-p *wa/ \\ \n &&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/ rules.d/*.rules \\ \n || printf \"ERROR: Variable 'SUDO_LOG_FILE' is unset. \\n\" \n} \nVerify output of matches:  \n-w /var/log/sudo.log -p wa -k sudo_log_file  \nRunning configuration  \nRun the following command to check loaded rules:  \n# { \n SUDO_LOG_FILE=$(grep -r logfile /etc/sudoers* | sed -e 's/.*logfile=//;s/,? \n.*//' -e 's/\"//g' -e 's|/|\\\\/|g') \n [ -n \"${SUDO_LOG_FILE}\" ] && auditctl -l | awk \"/^ * -w/ \\ \n &&/\"${SUDO_LOG_FILE}\"/ \\ \n &&/ +-p *wa/ \\ \n &&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)\" \\ \n || printf \"ERROR: Variable 'SUDO_LOG_FILE' is unset. \\n\" \n} \nVerify output matches:  \n-w /var/log/sudo.log -p wa -k sudo_log_file  \n  Page 828",
                "remediation": "Note:  This recommendation requires that the sudo logfile is configured. See guidance \nprovided in the recommendation \"Ensure sudo log file exists\"  \nEdit or create a file in the /etc/audit/rules.d/  directory, ending in .rules  extension, \nwith the relevant rules to monitor events that modify the sudo log file.  \nExample:  \n# { \nSUDO_LOG_FILE=$(grep -r logfile /etc/sudoers* | sed -e 's/.*logfile=//;s/,? \n.*//' -e 's/\"//g')  \n[ -n \"${SUDO_LOG_FILE}\" ] && printf \"  \n-w ${SUDO_LOG_FILE} -p wa -k sudo_log_file  \n\" >> /etc/audit/rules.d/50 -sudo.rules || printf \"ERROR: Variable \n'SUDO_LOG_F ILE' is unset. \\n\" \n} \nMerge and load the rules into active configuration:  \n# augenrules --load \nCheck if reboot is required.  \n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot \nrequired to load rules \\n\"; fi \nAdditional Information:  \nPotential reboot required  \nIf the auditing configuration is locked ( -e 2), then augenrules  will not warn in any way \nthat rules could not be loaded into the running configuration. A system reboot will be \nrequired to load the rules into the running configuration.  \nSystem call structure  \nFor performance ( man 7 audit.rules ) reasons it is preferable to have all the system \ncalls on one line. However, your configuration may have them on one line each or some \nother combination. This is important to understand for both the auditing and remediation \nsections as the examples given are optimized for performance as per the man page.  \n  Page 829 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.5 Collect Detailed Audit Logs  \n Configure detailed audit logging for enterprise assets containing sensitive data. \nInclude event source, date, username, timestamp, source addresses, destination \naddresses, and other useful elements that could assist in a forensic investigation.   \u25cf \u25cf \nv7 4.9 Log and Alert on Unsuccessful Administrative Account \nLogin  \n Configure systems to issue a log entry and alert on unsuccessful logins to an \nadministrative account.   \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1562, T1562.006  TA0004   Page 830",
                "audit_command": "{ \n{ ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "{",
                    "augenrules --load",
                    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot",
                    "(grep -r logfile /etc/sudoers* | sed -e 's/.*logfile=//;s/,?",
                    "{SUDO_LOG_FILE}\" ] && printf \"",
                    "{SUDO_LOG_FILE} -p wa -k sudo_log_file",
                    "(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot"
                ]
            },
            "2.3.4": {
                "id": "2.3.4",
                "title": "Ensure events that modify date and time information are \ncollected (Automated)",
                "audit": "On disk configuration  \nRun the following command to check the on disk rules:  \n# { \n awk '/^ * -a *always,exit/ \\ \n &&/ -F *arch=b(32|64)/ \\ \n &&/ -S/ \\ \n &&(/adjtimex/ \\ \n   ||/settimeofday/ \\ \n   ||/clock_settime/ ) \\ \n &&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules  \n \n awk '/^ * -w/ \\ \n &&/\\/etc\\/localtime/ \\ \n &&/ +-p *wa/ \\ \n &&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules  \n} \nVerify output of matches:  \n-a always,exit -F arch=b64 -S adjtimex,settimeofday -k time-change \n-a always,exit -F arch=b32 -S adjtimex,settimeofday -k time-change \n-a always,exit -F arch=b64 -S clock_settime -F a0=0x0 -k time-change \n-a always,exit -F arch=b32 -S clock_settime -F a0=0x0 -k time-change \n-w /etc/localtime -p wa -k time-change \nRunning configuration  \nRun the following command to check loaded rules:  \n# { \n auditctl -l | awk '/^ * -a *always,exit/ \\ \n &&/ -F *arch=b(32|64)/ \\ \n &&/ -S/ \\ \n &&(/adjtimex/ \\ \n   ||/settimeofday/ \\ \n   ||/clock_settime/ ) \\ \n &&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)'  \n \n auditctl -l | awk '/^ * -w/ \\ \n &&/\\/etc\\/localtime/ \\ \n &&/ +-p *wa/ \\ \n &&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)'  \n} \nVerify the output includes:  Page 832 -a always,exit -F arch=b64 -S adjtimex,settimeofday -F key=time -change \n-a always,exit -F arch=b32 -S settimeofday,adjtimex -F key=time -change \n-a always,exit -F arch=b64 -S clock_settime -F a0=0x0 -F key=time -change \n-a always,exit -F arch=b32 -S clock_setti me -F a0=0x0 -F key=time -change \n-w /etc/localtime -p wa -k time-change",
                "remediation": "Create audit rules  \nEdit or create a file in the /etc/audit/rules.d/  directory, ending in .rules  extension, \nwith the relevant rules to monitor events that modify date and time information.  \nExample:  \n# printf \"  \n-a always,exit -F arch=b64 -S adjtimex,settimeofday -k time-change \n-a always,exit -F arch=b32 -S adjtimex,settimeofday -k time-change \n-a always,exit -F arch=b64 -S clock_settime -F a0=0x0 -k time-change \n-a always,exit -F arch=b32 -S clock_settim e -F a0=0x0 -k time-change \n-w /etc/localtime -p wa -k time-change \n\" >> /etc/audit/rules.d/50 -time-change.rules  \nLoad audit rules  \nMerge and load the rules into active configuration:  \n# augenrules --load \nCheck if reboot is required.  \n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot \nrequired to load rules \\n\"; fi \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -3, CM -6 \nAdditional Information:  \nPotential reboot required  \nIf the auditing configuration is locked ( -e 2), then augenrules  will not warn in any way \nthat rules could not be loaded into the running configuration. A system reboot will be \nrequired to load the rules into the running configuration.  \nSystem call structure  \nFor performance ( man 7 audit.rules ) reasons it is preferable to have all the system \ncalls on one line. However, your configuration may have them on one line each or some \nother combination. This is important to understand for both the auditing and remediation \nsections as the examples given are optimized for performance as per the man page.  Page 833 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.5 Collect Detailed Audit Logs  \n Configure detailed audit logging for enterprise assets containing sensitive data. \nInclude event source, date, username, timestamp, source addresses, destination \naddresses, and other useful elements that could assist in a forensic investigation.   \u25cf \u25cf \nv7 5.5 Implement Automated Configuration Monitoring \nSystems  \n Utilize a Security Content Automation Protocol (SCAP) compliant configuration \nmonitoring system to verify all security configuration elements, catalog approved \nexceptions, and alert when unauthorized changes occur.   \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1562, T1562.006  TA0005  M1047  Page 834",
                "audit_command": "{ \n{ ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "printf \"",
                    "augenrules --load",
                    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot",
                    "(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot"
                ]
            },
            "2.3.5": {
                "id": "2.3.5",
                "title": "Ensure events that modify the system's network \nenvironment are collected (Automated)",
                "audit": "On disk configuration  \nRun the following commands to check the on disk rules:  \n# awk '/^ * -a *always,exit/ \\ \n&&/ -F *arch=b(32|64)/ \\ \n&&/ -S/ \\ \n&&(/sethostname/ \\ \n  ||/setdomainname/) \\ \n&&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules  \n \n# awk '/^ * -w/ \\ \n&&(/\\/etc\\/issue/ \\ \n  ||/\\/etc\\/issue.net/ \\ \n  ||/\\/etc\\/hosts/ \\ \n  ||/\\/etc\\/network/ \\ \n  ||/\\/etc\\/netplan/) \\ \n&&/ +-p *wa/ \\ \n&&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules  \nVerify the output matches:  \n-a always,exit -F arch=b64 -S sethostname,setdomainname -k system -locale \n-a always,exit -F arch=b32 -S sethostname,setdomainname -k system -locale \n-w /etc/issue -p wa -k system -locale \n-w /etc/issue.net -p wa -k system -locale \n-w /etc/hosts -p wa -k system -locale \n-w /etc/networks -p wa -k system -locale \n-w /etc/network -p wa -k system -locale \n-w /etc/netplan -p wa -k system -locale \nRunning configuration  \nRun the following command to check loaded rules:  \n# auditctl -l | awk '/^ * -a *always,exit/ \\ \n&&/ -F *arch=b(32|64)/ \\ \n&&/ -S/ \\ \n&&(/sethostname/ \\ \n  ||/setdomainname/) \\ \n&&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)'  \n \n# auditctl -l | awk '/^ * -w/ \\ \n&&(/\\/etc\\/issue/ \\ \n  ||/\\/etc\\/issue.net/ \\ \n  ||/\\/etc\\/hosts/ \\ \n  ||/\\/etc\\/network/ \\ \n  ||/\\/etc\\/netplan/) \\ \n&&/ +-p *wa/ \\ \n&&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)'  \nVerify the output includes:  Page 836 -a always,exit -F arch=b64 -S sethostname,setdomainname -F key=system -locale \n-a always,exit -F arch=b32 -S sethostname,setdomainname -F key=system -locale \n-w /etc/issue -p wa -k system -locale \n-w /etc/issue.net -p wa -k system -locale \n-w /etc/hosts -p wa -k system-locale \n-w /etc/networks -p wa -k system -locale \n-w /etc/network -p wa -k system -locale \n-w /etc/netplan -p wa -k system -locale",
                "remediation": "Create audit rules  \nEdit or create a file in the /etc/audit/rules.d/  directory, ending in .rules  extension, \nwith the relevant rules to monitor events that modify the system's network environment.  \nExample:  \n# printf \"  \n-a always,exit -F arch=b64 -S sethostname,setdomainname -k system -locale \n-a always,exit -F arch=b32 -S sethostname,setdomainname -k system -locale \n-w /etc/issue -p wa -k system -locale \n-w /etc/issue.net -p wa -k system -locale \n-w /etc/hosts -p wa -k system -locale \n-w /etc/networks -p wa -k system -locale \n-w /etc/network/ -p wa -k system -locale \n-w /etc/netplan/ -p wa -k system -locale \n\" >> /etc/audit/rules.d/50 -system_locale.rules  \nLoad audit rules  \nMerge and load the rules into active configuration:  \n# augenrules --load \nCheck if reboot is required.  \n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot \nrequired to load rules \\n\"; fi \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -3, CM -6 \n2. https://netplan.io/faq  \n  \nPage 837 Additional Information:  \nPotential reboot required  \nIf the auditing configuration is locked ( -e 2), then augenrules  will not warn in any way \nthat rules could not be loaded into the running configuration. A system reboot will be \nrequired to load the rules into the running configuration.  \nSystem call structure  \nFor performance ( man 7 audit.rules ) reasons it is preferable to have all the system \ncalls on one line. However, your configuration may have them on one line each or some \nother combination. This is important to understand for both the auditing and remediation \nsections as the examples given are optimized for performance as per the man page.  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.5 Collect Detailed Audit Logs  \n Configure detailed audit logging for enterprise assets containing sensitive data. \nInclude event source, date, username, timestamp, source addresses, destination \naddresses, and other useful elements that could assist in a forensic investigation.   \u25cf \u25cf \nv7 5.5 Implement Automated Configuration Monitoring \nSystems  \n Utilize a Security Content Automation Protocol (SCAP) compliant configuration \nmonitoring system to verify all security configuration elements, catalog approved \nexceptions, and alert when unauthorized changes occur.   \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1562, T1562.006  TA0003  M1047  Page 838",
                "audit_command": "awk '/^ * -a *always,exit/ \\ \nawk '/^ * -w/ \\ \nauditctl -l | awk '/^ * -a *always,exit/ \\ \nauditctl -l | awk '/^ * -w/ \\ ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "printf \"",
                    "augenrules --load",
                    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot",
                    "(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot"
                ]
            },
            "2.3.6": {
                "id": "2.3.6",
                "title": "Ensure use of privileged commands are collected \n(Automated)",
                "audit": "On disk configuration  \nRun the following script to check on disk rules:  \n#!/usr/bin/env bash  \n \n{ \n   for PARTITION in $(findmnt -n -l -k -it $(awk '/nodev/ { print $2 }' \n/proc/filesystems | paste -sd,) | grep -Pv \"noexec|nosuid\" | awk '{print \n$1}'); do  \n      for PRIVILEGED in $(find \"${PARTITION}\" -xdev -perm /6000 -type f); do  \n         grep -qr \"${PRIVILEGED}\" /etc/audit/rules.d && printf \"OK: \n'${PRIVILEGED}' found in auditing rules. \\n\" || printf \"Warning: \n'${PRIVILEGED}' not found in on disk configuration. \\n\" \n      done \n   done \n} \nVerify that all output is OK. \nRunning configuration  \nRun the following script to check loaded rules:  \n#!/usr/bin/env bash  \n \n{ \n   RUNNING=$(auditctl -l) \n   [ -n \"${RUNNING}\" ] && for PARTITION in $(findmnt -n -l -k -it $(awk \n'/nodev/ { print $2 }' /proc/filesystems | paste -sd,) | grep -Pv \n\"noexec|nosuid\" | awk '{print $1}'); do  \n      for PRIVILEGED in $(fin d \"${PARTITION}\" -xdev -perm /6000 -type f); do  \n         printf -- \"${RUNNING}\" | grep -q \"${PRIVILEGED}\" && printf \"OK: \n'${PRIVILEGED}' found in auditing rules. \\n\" || printf \"Warning: \n'${PRIVILEGED}' not found in running configuration. \\n\" \n      done \n   done \\ \n   || printf \"ERROR: Variable 'RUNNING' is unset. \\n\" \n} \nVerify that all output is OK. \nSpecial mount points  \nIf there are any special mount points that are not visible by default from findmnt  as per \nthe above audit, said file systems would have to be manually audited.  \n  Page 840",
                "remediation": "Edit or create a file in the /etc/audit/rules.d/  directory, ending in .rules  extension, \nwith the relevant rules to monitor the use of privileged commands.  \nExample script:  \n#!/usr/bin/env bash  \n \n{ \n  UID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n  AUDIT_RULE_FILE=\"/etc/audit/rules.d/50 -privileged.rules\"  \n  NEW_DATA=()  \n  for PARTITION in $(findmnt -n -l -k -it $(awk '/nodev/ { print $2 }' \n/proc/filesystems | paste -sd,) | grep -Pv \"noexec|nosuid\" | awk '{print \n$1}'); do  \n    readarray -t DATA < <(find \"${PARTITION}\" -xdev -perm /6000 -type f | awk \n-v UID_MIN=${UID_MIN} '{print \" -a always,exit -F path=\" $1 \" -F perm=x -F \nauid>=\"UID_MIN\" -F auid!=unset -k privileged\" }')  \n      for ENTRY in \"${DATA[@]}\"; do  \n        NEW_DATA+=(\"${ENTRY}\")  \n      done \n  done \n  readarray &> /dev/null -t OLD_DATA < \"${AUDIT_RULE_FILE}\"  \n  COMBINED_DATA=( \"${OLD_DATA[@]}\" \"${NEW_DATA[@]}\" )  \n  printf '%s \\n' \"${COMBINED_DATA[@]}\" | sort -u > \"${AUDIT _RULE_FILE}\"  \n} \nMerge and load the rules into active configuration:  \n# augenrules --load \nCheck if reboot is required.  \n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot \nrequired to load rules \\n\"; fi \nSpecial mount points  \nIf there are any special mount points that are not visible by default from just scanning /, \nchange the PARTITION  variable to the appropriate partition and re -run the remediation.  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -3, AU -3(1) \n  Page 841 Additional Information:  \nPotential reboot required  \nIf the auditing configuration is locked ( -e 2), then augenrules  will not warn in any way \nthat rules could not be loaded into the running configuration. A system reboot will be \nrequired to load the rules into the running configuration.  \nSystem call structure  \nFor performance ( man 7 audit.rules ) reasons it is preferable to have all the system \ncalls on one line. However, your configuration may have them on one line each or some \nother combination. This is important to understand for both the auditing and remediation \nsections as the examples given are optimized for performance as per the man page.  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.5 Collect Detailed Audit Logs  \n Configure detailed audit logging for enterprise assets containing sensitive data. \nInclude event source, date, username, timestamp, source addresses, destination \naddresses, and other useful elements that could assist in a forensic investigation.   \u25cf \u25cf \nv7 6.2 Activate audit logging  \n Ensure that local logging has been enabled on all systems and networking \ndevices.  \u25cf \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1562, T1562.006  TA0002  M1026  Page 842",
                "audit_command": "!/usr/bin/env bash  \n1}'); do  \n!/usr/bin/env bash  ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "!/usr/bin/env bash",
                    "augenrules --load",
                    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot",
                    "(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)",
                    "(findmnt -n -l -k -it $(awk '/nodev/ { print $2 }'",
                    "1}'); do",
                    "{PARTITION}\" -xdev -perm /6000 -type f | awk",
                    "{UID_MIN} '{print \" -a always,exit -F path=\" $1 \" -F perm=x -F",
                    "{DATA[@]}\"; do",
                    "{ENTRY}\")",
                    "{AUDIT_RULE_FILE}\"",
                    "{OLD_DATA[@]}\" \"${NEW_DATA[@]}\" )",
                    "{COMBINED_DATA[@]}\" | sort -u > \"${AUDIT _RULE_FILE}\"",
                    "(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot"
                ]
            },
            "2.3.7": {
                "id": "2.3.7",
                "title": "Ensure unsuccessful file access attempts are collected \n(Automated)",
                "audit": "On disk configuration  \nRun the following command to check the on disk rules:  \n# { \n UID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n [ -n \"${UID_MIN}\" ] && awk \"/^ * -a *always,exit/ \\ \n &&/ -F *arch=b(32|64)/ \\ \n &&(/ -F *auid!=unset/||/ -F *auid!= -1/||/ -F *auid!=4294967295/) \\ \n &&/ -F *auid>=${UID_MIN}/ \\ \n &&(/ -F *exit= -EACCES/||/ -F *exit= -EPERM/) \\ \n &&/ -S/ \\ \n &&/creat/ \\ \n &&/open/ \\ \n &&/truncate/ \\ \n &&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules \\ \n || printf \"ERROR: Variable 'UID_MIN' is unset. \\n\" \n} \nVerify the output includes:  \n-a always,exit -F arch=b64 -S creat,open,openat,truncate,ftruncate -F exit=-\nEACCES -F auid>=1000 -F auid!=unset -k access  \n-a always,exit -F arch=b64 -S creat,open,openat,truncate,ftruncate -F exit=-\nEPERM -F auid>=1000 -F auid!=unset -k access  \n-a always,exi t -F arch=b32 -S creat,open,openat,truncate,ftruncate -F exit=-\nEACCES -F auid>=1000 -F auid!=unset -k access  \n-a always,exit -F arch=b32 -S creat,open,openat,truncate,ftruncate -F exit=-\nEPERM -F auid>=1000 -F auid!=unset -k access  \nRunning configuration  \nRun the following command to check loaded rules:  \n# { \n UID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ * -a *always,exit/ \\ \n &&/ -F *arch=b(32|64)/ \\ \n &&(/ -F *auid!=unset/||/ -F *auid!= -1/||/ -F *auid!=4294967295/) \\ \n &&/ -F *auid>=${UID_MIN}/ \\ \n &&(/ -F *exit= -EACCES/||/ -F *exit= -EPERM/) \\ \n &&/ -S/ \\ \n &&/creat/ \\ \n &&/open/ \\ \n &&/truncate/ \\ \n &&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)\" \\ \n || printf \"ERROR: Variable 'UID_MIN' is unset. \\n\" \n} \nVerify the output includes:  Page 844 -a always,exit -F arch=b64 -S open,truncate,ftruncate,creat,openat -F exit=-\nEACCES -F auid>=1000 -F auid!= -1 -F key=access  \n-a always,exit -F arch=b64 -S open,truncate,ftruncate,creat,openat -F exit=-\nEPERM -F auid>=1000 -F auid!= -1 -F key=access  \n-a always,e xit -F arch=b32 -S open,truncate,ftruncate,creat,openat -F exit=-\nEACCES -F auid>=1000 -F auid!= -1 -F key=access  \n-a always,exit -F arch=b32 -S open,truncate,ftruncate,creat,openat -F exit=-\nEPERM -F auid>=1000 -F auid!= -1 -F key=access",
                "remediation": "Create audit rules  \nEdit or create a file in the /etc/audit/rules.d/  directory, ending in .rules  extension, \nwith the relevant rules to monitor unsuccessful file access attempts.  \nExample:  \n# { \nUID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n[ -n \"${UID_MIN}\" ] && printf \"  \n-a always,exit -F arch=b64 -S creat,open,openat,truncate,ftruncate -F exit=-\nEACCES -F auid>=${UID_MIN} -F auid!=unset -k access  \n-a always,exit -F arch=b64 -S creat,ope n,openat,truncate,ftruncate -F exit=-\nEPERM -F auid>=${UID_MIN} -F auid!=unset -k access  \n-a always,exit -F arch=b32 -S creat,open,openat,truncate,ftruncate -F exit=-\nEACCES -F auid>=${UID_MIN} -F auid!=unset -k access  \n-a always,exit -F arch=b32 -S creat,open ,openat,truncate,ftruncate -F exit=-\nEPERM -F auid>=${UID_MIN} -F auid!=unset -k access  \n\" >> /etc/audit/rules.d/50 -access.rules || printf \"ERROR: Variable 'UID_MIN' \nis unset. \\n\" \n} \nLoad audit rules  \nMerge and load the rules into active configuration:  \n# augenrules --load \nCheck if reboot is required.  \n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot \nrequired to load rules \\n\"; fi \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -3 \n  Page 845 Additional Information:  \nPotential reboot required  \nIf the auditing configuration is locked ( -e 2), then augenrules  will not warn in any way \nthat rules could not be loaded into the running configuration. A system reboot will be \nrequired to load the rules into the running configuration.  \nSystem call structure  \nFor performance ( man 7 audit.rules ) reasons it is preferable to have all the system \ncalls on one line. However, your configuration may have them on one line each or some \nother combination. This is important to understand for both the auditing and remediation \nsections as the examples given are optimized for performance as per the man page.  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.5 Collect Detailed Audit Logs  \n Configure detailed audit logging for enterprise assets containing sensitive data. \nInclude event source, date, username, timestamp, source addresses, destination \naddresses, and other useful elements that could assist in a forensic investigation.   \u25cf \u25cf \nv7 14.9 Enforce Detail Logging for Access or Changes to \nSensitive Data  \n Enforce detailed audit logging for access to sensitive data or changes to \nsensitive data (utilizing tools such as File Integrity Monitoring or Security \nInformation and Event Monitoring).    \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1562, T1562.006  TA0007  M1047  Page 846",
                "audit_command": "{ \n{ ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "{",
                    "augenrules --load",
                    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot",
                    "(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)",
                    "{UID_MIN}\" ] && printf \"",
                    "{UID_MIN} -F auid!=unset -k access",
                    "{UID_MIN} -F auid!=unset -k access",
                    "{UID_MIN} -F auid!=unset -k access",
                    "{UID_MIN} -F auid!=unset -k access",
                    "(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot"
                ]
            },
            "2.3.8": {
                "id": "2.3.8",
                "title": "Ensure events that modify user/group information are \ncollected (Automated)",
                "audit": "On disk configuration  \nRun the following command to check the on disk rules:  \n# awk '/^ * -w/ \\ \n&&(/\\/etc\\/group/ \\ \n  ||/\\/etc\\/passwd/ \\ \n  ||/\\/etc\\/gshadow/ \\ \n  ||/\\/etc\\/shadow/ \\ \n  ||/\\/etc\\/security \\/opasswd/ \\ \n  ||/\\/etc\\/nsswitch.conf/ \\ \n  ||/\\/etc\\/pam.conf/ \\ \n  ||/\\/etc\\/pam.d/) \\ \n&&/ +-p *wa/ \\ \n&&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules  \nVerify the output matches:  \n-w /etc/group -p wa -k identity  \n-w /etc/passwd -p wa -k identity  \n-w /etc/gshadow -p wa -k identity  \n-w /etc/shadow -p wa -k identity  \n-w /etc/security/opasswd -p wa -k identity  \n-w /etc/nsswitch.conf -p wa -k identity  \n-w /etc/pam.conf -p wa -k identity  \n-w /etc/pam.d -p wa -k identity  \nRunning configuration  \nRun the following command to check loaded rules:  \n# auditctl -l | awk '/^ * -w/ \\ \n&&(/\\/etc\\/group/ \\ \n  ||/\\/etc\\/passwd/ \\ \n  ||/\\/etc\\/gshadow/ \\ \n  ||/\\/etc\\/shadow/ \\ \n  ||/\\/etc\\/security \\/opasswd/ \\ \n  ||/\\/etc\\/nsswitch.conf/ \\ \n  ||/\\/etc\\/pam.conf/ \\ \n  ||/\\/etc\\/pam.d/) \\ \n&&/ +-p *wa/ \\ \n&&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)'  \nVerify the output matches:  Page 848 -w /etc/group -p wa -k identity  \n-w /etc/passwd -p wa -k identity  \n-w /etc/gshadow -p wa -k identity  \n-w /etc/shadow -p wa -k identity  \n-w /etc/security/opasswd -p wa -k identity  \n-w /etc/nsswitch.conf -p wa -k identity  \n-w /etc/pam.conf -p wa -k identity  \n-w /etc/pam.d -p wa -k identity",
                "remediation": "Edit or create a file in the /etc/audit/rules.d/  directory, ending in .rules  extension, \nwith the relevant rules to monitor events that modify user/group information.  \nExample:  \n# printf \"  \n-w /etc/group -p wa -k identity  \n-w /etc/passwd -p wa -k identity  \n-w /etc/gshadow -p wa -k identity  \n-w /etc/shadow -p wa -k identity  \n-w /etc/security/opasswd -p wa -k identity  \n-w /etc/nsswitch.conf -p wa -k identity  \n-w /etc/pam.conf -p wa -k identity \n-w /etc/pam.d -p wa -k identity  \n\" >> /etc/audit/rules.d/50 -identity.rules  \nMerge and load the rules into active configuration:  \n# augenrules --load \nCheck if reboot is required.  \n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot \nrequired to load rules \\n\"; fi \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -3 \n2. https://manpages.debian.org/bookworm/manpages/nsswitch.conf.5.en.html  \n3. https://access.redhat.com/documentation/en -\nus/red_hat_enterprise_linux/6/html/managing_smart_cards/pam_configuration_fil\nes \n  \nPage 849 Additional Information:  \nPotential reboot required  \nIf the auditing configuration is locked ( -e 2), then augenrules  will not warn in any way \nthat rules could not be loaded into the running configuration. A system reboot will be \nrequired to load the rules into the running configuration.  \nSystem call structure  \nFor performance ( man 7 audit.rules ) reasons it is preferable to have all the system \ncalls on one line. However, your configuration may have them on one line each or some \nother combination. This is important to understand for both the auditing and remediation \nsections as the examples given are optimized for performance as per the man page.  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.5 Collect Detailed Audit Logs  \n Configure detailed audit logging for enterprise assets containing sensitive data. \nInclude event source, date, username, timestamp, source addresses, destination \naddresses, and other useful elements that could assist in a forensic investigation.   \u25cf \u25cf \nv7 4.8 Log and Alert on Changes to Administrative Group \nMembership  \n Configure systems to issue a log entry and alert when an account is added to \nor removed from any group assigned administrative privileges.   \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1562, T1562.006  TA0004  M1047  Page 850",
                "audit_command": "awk '/^ * -w/ \\ \nauditctl -l | awk '/^ * -w/ \\ ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "printf \"",
                    "augenrules --load",
                    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot",
                    "(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot"
                ]
            },
            "2.3.9": {
                "id": "2.3.9",
                "title": "Ensure discretionary access control permission \nmodification events are collected (Automated)",
                "audit": "Note:  Output showing all audited syscalls, e.g. ( -a always,exit -F arch=b64 -S \nchmod,fchmod,fchmodat,chmod,fchmod,fchmodat,setxattr,lsetxattr,fsetxattr,removexattr\n,lremovexattr,fremovexattr -F auid>=1000 -F auid!=unset -F key=perm_mod) is also \nacceptable. These  have been separated by function on the displayed output for clarity.  \nOn disk configuration  \nRun the following command to check the on disk rules:  \n# { \n UID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n [ -n \"${UID_MIN}\" ] && awk \"/^ * -a *always,exit/ \\ \n &&/ -F *arch=b(32|64)/ \\ \n &&(/ -F *auid!=unset/||/ -F *auid!= -1/||/ -F *auid!=4294967295/) \\ \n &&/ -S/ \\ \n &&/ -F *auid>=${UID_MIN}/ \\ \n &&(/chmod/||/fchmod/||/fchmodat/ \\ \n   ||/chown/||/fchown/||/fchownat/||/lchown/ \\ \n   ||/setxattr/||/lsetxattr/||/fsetxattr/ \\ \n   ||/removexattr/||/lremovexattr/||/fremovexattr/) \\ \n &&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules \\ \n || printf \"ERROR: Variable 'UID_MIN' is unset. \\n\" \n} \nVerify the output matches:  \n-a always,exit -F arch=b64 -S chmod,fchmod,fchmodat -F auid>=1000 -F \nauid!=unset -F key=perm_mod  \n-a always,exit -F arch=b64 -S chown,fchown,lchown,fchownat -F auid>=1000 -F \nauid!=unset -F key=perm_mod  \n-a always,exit -F arch=b32 -S chmod,fchmod,fchmodat -F auid>=1000 -F \nauid!=unset -F key=perm_mod  \n-a always,exit -F arch=b32 -S lchown,fchown,chown,fchownat -F auid>=1000 -F \nauid!=unset -F key=perm_mod  \n-a always,exit -F arch=b64 -S \nsetxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F \nauid>=1000  -F auid!=unset -F key=perm_mod  \n-a always,exit -F arch=b32 -S \nsetxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F \nauid>=1000 -F auid!=unset -F key=perm_mod  \nRunning configuration  \nRun the following command to check loaded rules:  Page 852 # { \n UID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ * -a *always,exit/ \\ \n &&/ -F *arch=b(32|64)/ \\ \n &&(/ -F *auid!=unset/||/ -F *auid!= -1/||/ -F *auid!=4294967295/) \\ \n &&/ -S/ \\ \n &&/ -F *auid>=${UID_MI N}/ \\ \n &&(/chmod/||/fchmod/||/fchmodat/ \\ \n   ||/chown/||/fchown/||/fchownat/||/lchown/ \\ \n   ||/setxattr/||/lsetxattr/||/fsetxattr/ \\ \n   ||/removexattr/||/lremovexattr/||/fremovexattr/) \\ \n &&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)\" \\ \n || printf \"ERROR: Varia ble 'UID_MIN' is unset. \\n\" \n} \nVerify the output matches:  \n-a always,exit -F arch=b64 -S chmod,fchmod,fchmodat -F auid>=1000 -F auid!= -1 \n-F key=perm_mod  \n-a always,exit -F arch=b64 -S chown,fchown,lchown,fchownat -F auid>=1000 -F \nauid!=-1 -F key=perm_mod  \n-a always,exit -F arch=b32 -S chmod,fchmod,fchmodat -F auid>= 1000 -F auid!= -1 \n-F key=perm_mod  \n-a always,exit -F arch=b32 -S lchown,fchown,chown,fchownat -F auid>=1000 -F \nauid!=-1 -F key=perm_mod  \n-a always,exit -F arch=b64 -S \nsetxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F \nauid>=1000 -F auid!= -1 -F key=perm_mod  \n-a always,exit -F arch=b32 -S \nsetxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F \nauid>=1000 -F auid!= -1 -F key=perm_mod  \n  Page 853",
                "remediation": "Create audit rules  \nEdit or create a file in the /etc/audit/rules.d/  directory, ending in .rules  extension, \nwith the relevant rules to monitor discretionary access control permission modification \nevents.  \nExample:  \n# { \nUID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n[ -n \"${UID_MIN}\" ] && printf \"  \n-a always,exit -F arch=b64 -S chmod,fchmod,fchmodat -F auid>=${UID_MIN} -F \nauid!=unset -F key=perm_mod  \n-a always,exit -F arch=b64 -S chown,fchown,lchown,fchownat -F \nauid>=${UID_MIN} -F auid!=unset -F key=perm_mod  \n-a always,exit -F arch=b32 -S chmod,fchmod,fchmodat -F auid>=${UID_MIN} -F \nauid!=unset -F key=perm_mod  \n-a always,exit -F arch=b32 -S lchown,fchown,chown,fchownat -F \nauid>=${UID_MIN} -F auid!=unset -F key=pe rm_mod \n-a always,exit -F arch=b64 -S \nsetxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F \nauid>=${UID_MIN} -F auid!=unset -F key=perm_mod  \n-a always,exit -F arch=b32 -S \nsetxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F \nauid>=${UID_MIN} -F auid!=unset -F key=perm_mod  \n\" >> /etc/audit/rules.d/50 -perm_mod.rules || printf \"ERROR: Variable \n'UID_MIN' is unset. \\n\" \n} \nLoad audit rules  \nMerge and load the rules into active configuration:  \n# augenrules --load \nCheck if reboot is required.  \n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot \nrequired to load rules \\n\"; fi \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -3, CM -6 \n  Page 854 Additional Information:  \nPotential reboot required  \nIf the auditing configuration is locked ( -e 2), then augenrules  will not warn in any way \nthat rules could not be loaded into the running configuration. A system reboot will be \nrequired to load the rules into the running configuration.  \nSystem call structure  \nFor performance ( man 7 audit.rules ) reasons it is preferable to have all the system \ncalls on one line. However, your configuration may have them on one line each or some \nother combination. This is important to understand for both the auditing and remediation \nsections as the examples given are optimized for performance as per the man page.  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.5 Collect Detailed Audit Logs  \n Configure detailed audit logging for enterprise assets containing sensitive data. \nInclude event source, date, username, timestamp, source addresses, destination \naddresses, and other useful elements that could assist in a forensic investigation.   \u25cf \u25cf \nv7 5.5 Implement Automated Configuration Monitoring \nSystems  \n Utilize a Security Content Automation Protocol (SCAP) compliant configuration \nmonitoring system to verify all security configuration elements, catalog approved \nexceptions, and alert when unauthorized changes occur.   \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1562, T1562.006  TA0005  M1022  Page 855",
                "audit_command": "{ ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "{",
                    "augenrules --load",
                    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot",
                    "(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)",
                    "{UID_MIN}\" ] && printf \"",
                    "{UID_MIN} -F",
                    "{UID_MIN} -F auid!=unset -F key=perm_mod",
                    "{UID_MIN} -F",
                    "{UID_MIN} -F auid!=unset -F key=pe rm_mod",
                    "{UID_MIN} -F auid!=unset -F key=perm_mod",
                    "{UID_MIN} -F auid!=unset -F key=perm_mod",
                    "(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot"
                ]
            },
            "2.3.10": {
                "id": "2.3.10",
                "title": "Ensure successful file system mounts are collected \n(Automated)",
                "audit": "On disk configuration  \nRun the following command to check the on disk rules:  \n# { \n UID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n [ -n \"${UID_MIN}\" ] && awk \"/^ * -a *always,exit/ \\ \n &&/ -F *arch=b(32|64)/ \\ \n &&(/ -F *auid!=unset/||/ -F *auid!= -1/||/ -F *auid!=4294967295/) \\ \n &&/ -F *auid>=${UID_MIN}/ \\ \n &&/ -S/ \\ \n &&/mount/ \\ \n &&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules \\ \n || printf \"ERROR: Variable 'UID_MIN' is unset. \\n\" \n} \nVerify the output matches:  \n-a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=unset -k mounts  \n-a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=unset -k mounts  \nRunning configuration  \nRun the following command to check loaded rules:  \n# { \n UID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ * -a *always,exit/ \\ \n &&/ -F *arch=b(32|64)/ \\ \n &&(/ -F *auid!=unset/||/ -F *auid!= -1/||/ -F *auid!=4294967295/) \\ \n &&/ -F *auid>=${UID_MIN}/ \\ \n &&/ -S/ \\ \n &&/mount/ \\ \n &&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)\" \\ \n || printf \"ERROR: Variable 'UID_MIN' is unset. \\n\" \n} \nVerify the output matches:  \n-a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!= -1 -F key=mounts  \n-a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!= -1 -F key=mounts  \n  Page 857",
                "remediation": "Create audit rules  \nEdit or create a file in the /etc/audit/rules.d/  directory, ending in .rules  extension, \nwith the relevant rules to monitor successful file system mounts.  \nExample:  \n# { \nUID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n[ -n \"${UID_MIN}\" ] && printf \"  \n-a always,exit -F arch=b32 -S mount -F auid>=$UID_MIN -F auid!=unset -k \nmounts \n-a always,exit -F arch=b64 -S mount -F auid>=$UID_MIN -F auid!=unset -k \nmounts \n\" >> /etc/audit/rules.d/50 -mounts.rules || printf \"ERROR: Variable 'UID_MIN' \nis unset. \\n\" \n} \nLoad audit rules  \nMerge and load the rules into active configuration:  \n# augenrules --load \nCheck if reboot is required.  \n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot \nrequired to load rules \\n\"; fi \nReferences:  \n1. NIST SP 800 -53 Rev. 5: CM -6 \nAdditional Information:  \nPotential reboot required  \nIf the auditing configuration is locked ( -e 2), then augenrules  will not warn in any way \nthat rules could not be loaded into the running configuration. A system reboot will be \nrequired to load the rules into the running configuration.  \nSystem call structure  \nFor performance ( man 7 audit.rules ) reasons it is preferable to have all the system \ncalls on one line. However, your configuration may have them on one line each or some \nother combination. This is important to understand for both the auditing and remediation \nsections as the examples given are optimized for performance as per the man page.  Page 858 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.5 Collect Detailed Audit Logs  \n Configure detailed audit logging for enterprise assets containing sensitive data. \nInclude event source, date, username, timestamp, source addresses, destination \naddresses, and other useful elements that could assist in a forensic investigation.   \u25cf \u25cf \nv7 6.3 Enable Detailed Logging  \n Enable system logging to include detailed information such as an event source, \ndate, user, timestamp, source addresses, destination addresses, and other useful \nelements.   \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1562, T1562.006  TA0010  M1034  Page 859",
                "audit_command": "{ \n{ ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "{",
                    "augenrules --load",
                    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot",
                    "(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)",
                    "{UID_MIN}\" ] && printf \"",
                    "UID_MIN -F auid!=unset -k",
                    "UID_MIN -F auid!=unset -k",
                    "(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot"
                ]
            },
            "2.3.11": {
                "id": "2.3.11",
                "title": "Ensure session initiation information is collected \n(Automated)",
                "audit": "On disk configuration  \nRun the following command to check the on disk rules:  \n# awk '/^ * -w/ \\ \n&&(/\\/var\\/run\\/utmp/ \\ \n  ||/\\/var\\/log\\/wtmp/ \\ \n  ||/\\/var\\/log\\/btmp/) \\ \n&&/ +-p *wa/ \\ \n&&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules  \nVerify the output matches:  \n-w /var/run/utmp -p wa -k session  \n-w /var/log/wtmp -p wa -k session  \n-w /var/log/btmp -p wa -k session  \nRunning configuration  \nRun the following command to check loaded rules:  \n# auditctl -l | awk '/^ * -w/ \\ \n&&(/\\/var\\/run\\/utmp/ \\ \n  ||/\\/var\\/log\\/wtmp/ \\ \n  ||/\\/var\\/log\\/btmp/) \\ \n&&/ +-p *wa/ \\ \n&&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)'  \nVerify the output matches:  \n-w /var/run/utmp -p wa -k session  \n-w /var/log/wtmp -p wa -k session  \n-w /var/log/btmp -p wa -k session  \n  Page 861",
                "remediation": "Edit or create a file in the /etc/audit/rules.d/  directory, ending in .rules  extension, \nwith the relevant rules to monitor session initiation information.  \nExample:  \n# printf \"  \n-w /var/run/utmp -p wa -k session  \n-w /var/log/wtmp -p wa -k session  \n-w /var/log/btmp -p wa -k session  \n\" >> /etc/audit/rules.d/50 -session.rules  \nMerge and load the rules into active configuration:  \n# augenrules --load \nCheck if reboot is required.  \n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot \nrequired to load rules \\n\"; fi \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -3 \nAdditional Information:  \nPotential reboot required  \nIf the auditing configuration is locked ( -e 2), then augenrules  will not warn in any way \nthat rules could not be loaded into the running configuration. A system reboot will be \nrequired to load the rules into the running configuration.  \nSystem call structure  \nFor performance ( man 7 audit.rules ) reasons it is preferable to have all the system \ncalls on one line. However, your configuration may have them on one line each or some \nother combination. This is important to understand for both the auditing and remediation \nsections as the examples given are optimized for performance as per the man page.  \n  Page 862 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.5 Collect Detailed Audit Logs  \n Configure detailed audit logging for enterprise assets containing sensitive data. \nInclude event source, date, username, timestamp, source addresses, destination \naddresses, and other useful elements that could assist in a forensic investigation.   \u25cf \u25cf \nv7 4.9 Log and Alert on Unsuccessful Administrative Account \nLogin  \n Configure systems to issue a log entry and alert on unsuccessful logins to an \nadministrative account.   \u25cf \u25cf \nv7 16.13 Alert on Account Login Behavior Deviation  \n Alert when users deviate from normal login behavior, such as time -of-day, \nworkstation location and duration.    \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1562, T1562.006  TA0001  M1047  Page 863",
                "audit_command": "awk '/^ * -w/ \\ \nauditctl -l | awk '/^ * -w/ \\ ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "printf \"",
                    "augenrules --load",
                    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot",
                    "(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot"
                ]
            },
            "2.3.12": {
                "id": "2.3.12",
                "title": "Ensure login and logout events are collected \n(Automated)",
                "audit": "On disk configuration  \nRun the following command to check the on disk rules:  \n# awk '/^ * -w/ \\ \n&&(/\\/var\\/log\\/lastlog/ \\ \n  ||/\\/var\\/run\\/faillock/) \\ \n&&/ +-p *wa/ \\ \n&&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules  \nVerify the output matches:  \n-w /var/log/lastlog -p wa -k logins  \n-w /var/run/faillock -p wa -k logins  \nRunning configuration  \nRun the following command to check loaded rules:  \n# auditctl -l | awk '/^ * -w/ \\ \n&&(/\\/var\\/log\\/lastlog/ \\ \n  ||/\\/var\\/run\\/faillock/) \\ \n&&/ +-p *wa/ \\ \n&&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)'  \nVerify the output matches:  Page 864 -w /var/log/lastlog -p wa -k logins  \n-w /var/run/faillock -p wa -k logins",
                "remediation": "Edit or create a file in the /etc/audit/rules.d/  directory, ending in .rules  extension, \nwith the relevant rules to monitor login and logout events.  \nExample:  \n# printf \"  \n-w /var/log/lastlog -p wa -k logins  \n-w /var/run/faillock -p wa -k logins  \n\" >> /etc/audit/rules.d/50 -login.rules  \nMerge and load the rules into active configuration:  \n# augenrules --load \nCheck if reboot is required.  \n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \" Reboot \nrequired to load rules \\n\"; fi \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -3 \nAdditional Information:  \nPotential reboot required  \nIf the auditing configuration is locked ( -e 2), then augenrules  will not warn in any way \nthat rules could not be loaded into the running configuration. A system reboot will be \nrequired to load the rules into the running configuration.  \nSystem call structure  \nFor performance ( man 7 audit.rules ) reasons it is preferable to have all the system \ncalls on one line. However, your configuration may have them on one line each or some \nother combination. This is important to understand for both the auditing and remediation \nsections as the examples given are optimized for performance as per the man page.  \n  Page 865 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.5 Collect Detailed Audit Logs  \n Configure detailed audit logging for enterprise assets containing sensitive data. \nInclude event source, date, username, timestamp, source addresses, destination \naddresses, and other useful elements that could assist in a forensic investigation.   \u25cf \u25cf \nv7 4.9 Log and Alert on Unsuccessful Administrative Account \nLogin  \n Configure systems to issue a log entry and alert on unsuccessful logins to an \nadministrative account.   \u25cf \u25cf \nv7 16.11 Lock Workstation Sessions After Inactivity  \n Automatically lock workstation sessions after a standard period of inactivity.  \u25cf \u25cf \u25cf \nv7 16.13 Alert on Account Login Behavior Deviation  \n Alert when users deviate from normal login behavior, such as time -of-day, \nworkstation location and duration.    \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1562, T1562.006  TA0001  M1047  Page 866",
                "audit_command": "awk '/^ * -w/ \\ \nauditctl -l | awk '/^ * -w/ \\ ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "printf \"",
                    "augenrules --load",
                    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \" Reboot",
                    "(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \" Reboot"
                ]
            },
            "2.3.13": {
                "id": "2.3.13",
                "title": "Ensure file deletion events by users are collected \n(Automated)",
                "audit": "On disk configuration  \nRun the following command to check the on disk rules:  \n# { \n UID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n [ -n \"${UID_MIN}\" ] && awk \"/^ * -a *always,exit/ \\ \n &&/ -F *arch=b(32|64)/ \\ \n &&(/ -F *auid!=unset/||/ -F *auid!= -1/||/ -F *auid!=4294967295/) \\ \n &&/ -F *auid>=${UID_MIN}/ \\ \n &&/ -S/ \\ \n &&(/unlink/||/rename/||/unlinkat/||/renameat/) \\ \n &&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules \\ \n || printf \"ERROR: Variable 'UID_MIN' is unset. \\n\" \n} \nVerify the output matches:  \n-a always,exit -F arch=b64 -S unlink,unlinkat,rename,renameat -F auid>=1000 -\nF auid!=unset -k delete  \n-a always,exit -F arch=b32 -S unlink,unlinkat,rename,renameat -F auid>=1000 -\nF auid!=unset -k delete  \nRunning configuration  \nRun the following command to check loaded rules:  \n# { \n UID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ * -a *always,exit/ \\ \n &&/ -F *arch=b(32|64)/ \\ \n &&(/ -F *auid!=unset/||/ -F *auid!= -1/||/ -F *auid!=4294967295/) \\ \n &&/ -F *auid>=${UID_MIN}/ \\ \n &&/ -S/ \\ \n &&(/unlink/||/rename/||/unlinkat/||/renameat/) \\ \n &&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)\" \\ \n || printf \"ERROR: Variable 'UID_MIN' is unset. \\n\" \n} \nVerify the output matches:  \n-a always,exit -F arch=b64 -S rename,unlink,unlinkat,renameat -F auid>=1000 -\nF auid!= -1 -F key=delete  \n-a always,exit -F arch=b32 -S unlink,rename,unlinkat,renameat -F auid>=1000 -\nF auid!= -1 -F key=delete  \n  Page 868",
                "remediation": "Create audit rules  \nEdit or create a file in the /etc/audit/rules.d/  directory, ending in .rules  extension, \nwith the relevant rules to monitor file deletion events by users.  \nExample:  \n# { \nUID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n[ -n \"${UID_MIN}\" ] && printf \"  \n-a always,exit -F arch=b64 -S rename,unlink,unlinkat,renameat -F \nauid>=${UID_MIN} -F auid!=unset -F key=delete  \n-a always,exit -F arch=b32 -S rename,unlink,unlinkat ,renameat -F \nauid>=${UID_MIN} -F auid!=unset -F key=delete  \n\" >> /etc/audit/rules.d/50 -delete.rules || printf \"ERROR: Variable 'UID_MIN' \nis unset. \\n\" \n} \nLoad audit rules  \nMerge and load the rules into active configuration:  \n# augenrules --load \nCheck if reboot is required.  \n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot \nrequired to load rules \\n\"; fi \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -12, SC -7 \nAdditional Information:  \nPotential reboot required  \nIf the auditing configuration is locked ( -e 2), then augenrules  will not warn in any way \nthat rules could not be loaded into the running configuration. A system reboot will be \nrequired to load the rules into the running configuration.  \nSystem call structure  \nFor performance ( man 7 audit.rules ) reasons it is preferable to have all the system \ncalls on one line. However, your configuration may have them on one line each or some \nother combination. This is important to understand for both the auditing and remediation \nsections as the examples given are optimized for performance as per the man page.  Page 869 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.5 Collect Detailed Audit Logs  \n Configure detailed audit logging for enterprise assets containing sensitive data. \nInclude event source, date, username, timestamp, source addresses, destination \naddresses, and other useful elements that could assist in a forensic investigation.   \u25cf \u25cf \nv7 6.2 Activate audit logging  \n Ensure that local logging has been enabled on all systems and networking \ndevices.  \u25cf \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1562, T1562.006  TA0005  M1047  Page 870",
                "audit_command": "{ \n{ ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "{",
                    "augenrules --load",
                    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot",
                    "(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)",
                    "{UID_MIN}\" ] && printf \"",
                    "{UID_MIN} -F auid!=unset -F key=delete",
                    "{UID_MIN} -F auid!=unset -F key=delete",
                    "(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot"
                ]
            },
            "2.3.14": {
                "id": "2.3.14",
                "title": "Ensure events that modify the system's Mandatory \nAccess Controls are collected (Automated)",
                "audit": "On disk configuration  \nRun the following command to check the on disk rules:  \n# awk '/^ * -w/ \\ \n&&(/\\/etc\\/apparmor/ \\ \n  ||/\\/etc\\/apparmor.d/) \\ \n&&/ +-p *wa/ \\ \n&&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules  \nVerify the output matches:  \n-w /etc/apparmor/ -p wa -k MAC-policy \n-w /etc/apparmor.d/ -p wa -k MAC-policy \nRunning configuration  \nRun the following command to check loaded rules:  \n# auditctl -l | awk '/^ * -w/ \\ \n&&(/\\/etc\\/apparmor/ \\ \n  ||/\\/etc\\/apparmor.d/) \\ \n&&/ +-p *wa/ \\ \n&&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)'  \nVerify the output matches:  Page 871 -w /etc/apparmor/ -p wa -k MAC-policy \n-w /etc/apparmor.d/ -p wa -k MAC-policy",
                "remediation": "Edit or create a file in the /etc/audit/rules.d/  directory, ending in .rules  extension, \nwith the relevant rules to monitor events that modify the system's Mandatory Access \nControls.  \nExample:  \n# printf \"  \n-w /etc/apparmor/ -p wa -k MAC-policy \n-w /etc/apparmor.d/ -p wa -k MAC-policy \n\" >> /etc/audit/rules.d/50 -MAC-policy.rules  \nMerge and load the rules into active configuration:  \n# augenrules --load \nCheck if reboot is required.  \n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot \nrequired to load rules \\n\"; fi \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -3, CM -6 \nAdditional Information:  \nPotential reboot required  \nIf the auditing configuration is locked ( -e 2), then augenrules  will not warn in any way \nthat rules could not be loaded into the running configuration. A system reboot will be \nrequired to load the rules into the running configuration.  \nSystem call structure  \nFor performance ( man 7 audit.rules ) reasons it is preferable to have all the system \ncalls on one line. However, your configuration may have them on one line each or some \nother combination. This is important to understand for both the auditing and remediation \nsections as the examples given are optimized for performance as per the man page.  \n  Page 872 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.5 Collect Detailed Audit Logs  \n Configure detailed audit logging for enterprise assets containing sensitive data. \nInclude event source, date, username, timestamp, source addresses, destination \naddresses, and other useful elements that could assist in a forensic investigation.   \u25cf \u25cf \nv7 5.5 Implement Automated Configuration Monitoring \nSystems  \n Utilize a Security Content Automation Protocol (SCAP) compliant configuration \nmonitoring system to verify all security configuration elements, catalog approved \nexceptions, and alert when unauthorized changes occur.   \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1562, T1562.006  TA0004  M1022  Page 873",
                "audit_command": "awk '/^ * -w/ \\ \nauditctl -l | awk '/^ * -w/ \\ ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "printf \"",
                    "augenrules --load",
                    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot",
                    "(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot"
                ]
            },
            "2.3.15": {
                "id": "2.3.15",
                "title": "Ensure successful and unsuccessful attempts to use the \nchcon command are collected (Automated)",
                "audit": "On disk configuration  \nRun the following command to check the on disk rules:  \n# { \n UID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n [ -n \"${UID_MIN}\" ] && awk \"/^ * -a *always,exit/ \\ \n &&(/ -F *auid!=unset/||/ -F *auid!= -1/||/ -F *auid!=4294967295/) \\ \n &&/ -F *auid>=${UID_MIN}/ \\ \n &&/ -F *perm=x/ \\ \n &&/ -F *path= \\/usr\\/bin\\/chcon/ \\ \n &&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules \\ \n || printf \"ERROR: Variable 'UID_MIN' is unset. \\n\" \n} \nVerify the output matches:  \n-a always,exit -F path=/usr/bin/chcon -F perm=x -F auid>=1000 -F auid!=unset \n-k perm_chng  \nRunning configuration  \nRun the following command to check loaded rules:  \n# { \n UID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ * -a *always,exit/ \\ \n &&(/ -F *auid!=unset/||/ -F *auid!= -1/||/ -F *auid!=4294967295/) \\ \n &&/ -F *auid>=${UID_MIN}/ \\ \n &&/ -F *perm=x/ \\ \n &&/ -F *path=\\/usr\\/bin\\/chcon/ \\ \n &&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)\" \\ \n || printf \"ERROR: Variable 'UID_MIN' is unset. \\n\" \n} \nVerify the output matches:  \n-a always,exit -S all -F path=/usr/bin/chcon -F perm=x -F auid>=1000 -F \nauid!=-1 -F key=perm_chng  \n  Page 875",
                "remediation": "Create audit rules  \nEdit or create a file in the /etc/audit/rules.d/  directory, ending in .rules  extension, \nwith the relevant rules to monitor successful and unsuccessful attempts to use the \nchcon  command.  \nExample:  \n# { \n UID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n [ -n \"${UID_MIN}\" ] && printf \"  \n-a always,exit -F path=/usr/bin/chcon -F perm=x -F auid>=${UID_MIN} -F \nauid!=unset -k perm_chng  \n\" >> /etc/audit/rules.d/50 -perm_chng.rules || printf \"ERROR: Variable \n'UID_MIN' is unset. \\n\" \n} \nLoad audit rules  \nMerge and load the rules into active configuration:  \n# augenrules --load \nCheck if reboot is required.  \n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot \nrequired to load rules \\n\"; fi \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -2, AU -12, SI -5 \nAdditional Information:  \nPotential reboot required  \nIf the auditing configuration is locked ( -e 2), then augenrules  will not warn in any way \nthat rules could not be loaded into the running configuration. A system reboot will be \nrequired to load the rules into the running configuration.  \nSystem call structure  \nFor performance ( man 7 audit.rules ) reasons it is preferable to have all the system \ncalls on one line. However, your configuration may have them on one line each or some \nother combination. This is important to understand for both the auditing and remediation \nsections as the examples given are optimized for performance as per the man page.  Page 876 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.2 Collect Audit Logs  \n Collect audit logs. Ensure that logging, per the enterprise\u2019s audit log \nmanagement process, has been enabled across enterprise assets.  \u25cf \u25cf \u25cf \nv7 6.2 Activate audit logging  \n Ensure that local logging has been enabled on all systems and networking \ndevices.  \u25cf \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1562, T1562.006  TA0005  M1022  Page 877",
                "audit_command": "{ \n{ ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "{",
                    "augenrules --load",
                    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot",
                    "(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)",
                    "{UID_MIN}\" ] && printf \"",
                    "{UID_MIN} -F",
                    "(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot"
                ]
            },
            "2.3.16": {
                "id": "2.3.16",
                "title": "Ensure successful and unsuccessful attempts to use the \nsetfacl command are collected (Automated)",
                "audit": "On disk configuration  \nRun the following command to check the on disk rules:  \n# { \n UID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n [ -n \"${UID_MIN}\" ] && awk \"/^ * -a *always,exit/ \\ \n &&(/ -F *auid!=unset/||/ -F *auid!= -1/||/ -F *auid!=4294967295/) \\ \n &&/ -F *auid>=${UID_MIN}/ \\ \n &&/ -F *perm=x/ \\ \n &&/ -F *path= \\/usr\\/bin\\/setfacl/ \\ \n &&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules || \nprintf \"ERROR: Variable 'UID_MIN' is unset. \\n\" \n} \nVerify the output matches:  \n-a always,exit -F path=/usr/bin/setfacl -F perm=x -F auid>=1000 -F \nauid!=unset -k perm_chng  \nRunning configuration  \nRun the following command to check loaded rules:  \n# { \n UID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ * -a *always,exit/ \\ \n &&(/ -F *auid!=unset/||/ -F *auid!= -1/||/ -F *auid!=4294967295/) \\ \n &&/ -F *auid>=${UID_MIN}/ \\ \n &&/ -F *perm=x/ \\ \n &&/ -F *path=\\/usr\\/bin\\/setfacl/ \\ \n &&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)\" \\ \n || printf \"ERROR: Variable 'UID_MIN' is unset. \\n\" \n} \nVerify the output matches:  \n-a always,exit -S all -F path=/usr/bin/setfacl -F perm=x -F auid>=1000 -F \nauid!=-1 -F key=perm_chng  \n  Page 879",
                "remediation": "Create audit rules  \nEdit or create a file in the /etc/audit/rules.d/  directory, ending in .rules  extension, \nwith the relevant rules to monitor successful and unsuccessful attempts to use the \nsetfacl  command.  \nExample:  \n# { \n UID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n [ -n \"${UID_MIN}\" ] && printf \"  \n-a always,exit -F path=/usr/bin/setfacl -F perm=x -F auid>=${UID_MIN} -F \nauid!=unset -k perm_chng  \n\" >> /etc/audit/rules.d/50 -perm_chng.rules || printf \"ERROR: Va riable \n'UID_MIN' is unset. \\n\" \n} \nLoad audit rules  \nMerge and load the rules into active configuration:  \n# augenrules --load \nCheck if reboot is required.  \n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot \nrequired to load rules \\n\"; fi \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -2, AU -12, SI -5 \nAdditional Information:  \nPotential reboot required  \nIf the auditing configuration is locked ( -e 2), then augenrules  will not warn in any way \nthat rules could not be loaded into the running configuration. A system reboot will be \nrequired to load the rules into the running configuration.  \nSystem call structure  \nFor performance ( man 7 audit.rules ) reasons it is preferable to have all the system \ncalls on one line. However, your configuration may have them on one line each or some \nother combination. This is important to understand for both the auditing and remediation \nsections as the examples given are optimized for performance as per the man page.  Page 880 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.2 Collect Audit Logs  \n Collect audit logs. Ensure that logging, per the enterprise\u2019s audit log \nmanagement process, has been enabled across enterprise assets.  \u25cf \u25cf \u25cf \nv7 6.2 Activate audit logging  \n Ensure that local logging has been enabled on all systems and networking \ndevices.  \u25cf \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1562, T1562.006  TA0005  M1022  Page 881",
                "audit_command": "{ \n{ ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "{",
                    "augenrules --load",
                    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot",
                    "(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)",
                    "{UID_MIN}\" ] && printf \"",
                    "{UID_MIN} -F",
                    "(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot"
                ]
            },
            "2.3.17": {
                "id": "2.3.17",
                "title": "Ensure successful and unsuccessful attempts to use the \nchacl command are collected (Automated)",
                "audit": "On disk configuration  \nRun the following command to check the on disk rules:  \n# { \n UID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n [ -n \"${UID_MIN}\" ] && awk \"/^ * -a *always,exit/ \\ \n &&(/ -F *auid!=unset/||/ -F *auid!= -1/||/ -F *auid!=4294967295/) \\ \n &&/ -F *auid>=${UID_MIN}/ \\ \n &&/ -F *perm=x/ \\ \n &&/ -F *path= \\/usr\\/bin\\/chacl/ \\ \n &&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules \\ \n || printf \"ERROR: Variable 'UID_MIN' is unset. \\n\" \n} \nVerify the output matches:  \n-a always,exit -F path=/usr/bin/chacl -F perm=x -F auid>=1000 -F auid!=unset \n-k perm_chng  \nRunning configuration  \nRun the following command to check loaded rules:  \n# { \n UID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ * -a *always,exit/ \\ \n &&(/ -F *auid!=unset/||/ -F *auid!= -1/||/ -F *auid!=4294967295/) \\ \n &&/ -F *auid>=${UID_MIN}/ \\ \n &&/ -F *perm=x/ \\ \n &&/ -F *path=\\/usr\\/bin\\/chacl/ \\ \n &&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)\" \\ \n || printf \"ERROR: Variable 'UID_MIN' is unset. \\n\" \n} \nVerify the output matches:  \n-a always,exit -S all -F path=/usr/bin/chacl -F perm=x -F auid>=1000 -F \nauid!=-1 -F key=perm_chng  \n  Page 883",
                "remediation": "Create audit rules  \nEdit or create a file in the /etc/audit/rules.d/  directory, ending in .rules  extension, \nwith the relevant rules to monitor successful and unsuccessful attempts to use the \nchacl  command.  \nExample:  \n# { \n UID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n [ -n \"${UID_MIN}\" ] && printf \"  \n-a always,exit -F path=/usr/bin/chacl -F perm=x -F auid>=${UID_MIN} -F \nauid!=unset -k perm_chng  \n\" >> /etc/audit/rules.d/50 -perm_chng.rules || printf \"ERROR: Vari able \n'UID_MIN' is unset. \\n\" \n} \nLoad audit rules  \nMerge and load the rules into active configuration:  \n# augenrules --load \nCheck if reboot is required.  \n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot \nrequired to load rules \\n\"; fi \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -2, AU -12, SI -5 \nAdditional Information:  \nPotential reboot required  \nIf the auditing configuration is locked ( -e 2), then augenrules  will not warn in any way \nthat rules could not be loaded into the running configuration. A system reboot will be \nrequired to load the rules into the running configuration.  \nSystem call structure  \nFor performance ( man 7 audit.rules ) reasons it is preferable to have all the system \ncalls on one line. However, your configuration may have them on one line each or some \nother combination. This is important to understand for both the auditing and remediation \nsections as the examples given are optimized for performance as per the man page.  Page 884 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.2 Collect Audit Logs  \n Collect audit logs. Ensure that logging, per the enterprise\u2019s audit log \nmanagement process, has been enabled across enterprise assets.  \u25cf \u25cf \u25cf \nv7 6.2 Activate audit logging  \n Ensure that local logging has been enabled on all systems and networking \ndevices.  \u25cf \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1562, T1562.006  TA0005  M1022  Page 885",
                "audit_command": "{ \n{ ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "{",
                    "augenrules --load",
                    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot",
                    "(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)",
                    "{UID_MIN}\" ] && printf \"",
                    "{UID_MIN} -F",
                    "(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot"
                ]
            },
            "2.3.18": {
                "id": "2.3.18",
                "title": "Ensure successful and unsuccessful attempts to use the \nusermod command are collected (Automated)",
                "audit": "On disk configuration  \nRun the following command to check the on disk rules:  \n# { \n UID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n [ -n \"${UID_MIN}\" ] && awk \"/^ * -a *always,exit/ \\ \n &&(/ -F *auid!=unset/||/ -F *auid!= -1/||/ -F *auid!=4294967295/) \\ \n &&/ -F *auid>=${UID_MIN}/ \\ \n &&/ -F *perm=x/ \\ \n &&/ -F *path= \\/usr\\/sbin\\/usermod/ \\ \n &&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules \\ \n || printf \"ERROR: Variable 'UID_MIN' is unset. \\n\" \n} \nVerify the output matches:  \n-a always,exit -F path=/usr/sbin/usermod -F perm=x -F auid>=1000 -F \nauid!=unset -k usermod  \nRunning configuration  \nRun the following command to check loaded rules:  \n# { \n UID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ * -a *always,exit/ \\ \n &&(/ -F *auid!=unset/||/ -F *auid!= -1/||/ -F *auid!=4294967295/) \\ \n &&/ -F *auid>=${UID_MIN}/ \\ \n &&/ -F *perm=x/ \\ \n &&/ -F *path=\\/usr\\/sbin\\/usermod/ \\ \n &&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)\" \\ \n || printf \"ERROR: Variable 'UID_MIN' is unset. \\n\" \n} \nVerify the output matches:  \n-a always,exit -S all -F path=/usr/sbin/usermod -F perm=x -F auid>=1000 -F \nauid!=-1 -F key=usermod  \n  Page 887",
                "remediation": "Create audit rules  \nEdit or create a file in the /etc/audit/rules.d/  directory, ending in .rules  extension, \nwith the relevant rules to monitor successful and unsuccessful attempts to use the \nusermod  command.  \nExample:  \n# { \n UID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n [ -n \"${UID_MIN}\" ] && printf \"  \n-a always,exit -F path=/usr/sbin/usermod -F perm=x -F auid>=${UID_MIN} -F \nauid!=unset -k usermod  \n\" >> /etc/audit/rules.d/50 -usermod.rules || printf \"ERROR: Varia ble 'UID_MIN' \nis unset. \\n\" \n} \nLoad audit rules  \nMerge and load the rules into active configuration:  \n# augenrules --load \nCheck if reboot is required.  \n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot \nrequired to load rules \\n\"; fi \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -2, AU -12, SI -5 \nAdditional Information:  \nPotential reboot required  \nIf the auditing configuration is locked ( -e 2), then augenrules  will not warn in any way \nthat rules could not be loaded into the running configuration. A system reboot will be \nrequired to load the rules into the running configuration.  \nSystem call structure  \nFor performance ( man 7 audit.rules ) reasons it is preferable to have all the system \ncalls on one line. However, your configuration may have them on one line each or some \nother combination. This is important to understand for both the auditing and remediation \nsections as the examples given are optimized for performance as per the man page.  Page 888 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.2 Collect Audit Logs  \n Collect audit logs. Ensure that logging, per the enterprise\u2019s audit log \nmanagement process, has been enabled across enterprise assets.  \u25cf \u25cf \u25cf \nv7 6.2 Activate audit logging  \n Ensure that local logging has been enabled on all systems and networking \ndevices.  \u25cf \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1562, T1562.006  TA0005  M1022  Page 889",
                "audit_command": "{ \n{ ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "{",
                    "augenrules --load",
                    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot",
                    "(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)",
                    "{UID_MIN}\" ] && printf \"",
                    "{UID_MIN} -F",
                    "(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot"
                ]
            },
            "2.3.19": {
                "id": "2.3.19",
                "title": "Ensure kernel module loading unloading and \nmodification is collected (Automated)",
                "audit": "On disk configuration  \nRun the following script to check the on disk rules:  \n#!/usr/bin/env bash  \n \n{ \n  awk '/^ * -a *always,exit/ \\ \n  &&/ -F *arch=b(32|64)/ \\ \n  &&(/ -F auid!=unset/||/ -F auid!= -1/||/ -F auid!=4294967295/) \\ \n  &&/ -S/ \\ \n  &&(/init_module/ \\ \n    ||/finit_module/ \\ \n    ||/delete_module/ \\ \n    ||/create_module/ \\ \n    ||/query_module/) \\ \n  &&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules  \n \n  UID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n  [ -n \"${UID_MIN}\" ] && awk \"/^ * -a *always,exit/ \\ \n  &&(/ -F *auid!=unset/||/ -F *auid!= -1/||/ -F *auid!= 4294967295/) \\ \n  &&/ -F *auid>=${UID_MIN}/ \\ \n  &&/ -F *perm=x/ \\ \n  &&/ -F *path= \\/usr\\/bin\\/kmod/ \\ \n  &&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules \\ \n  || printf \"ERROR: Variable 'UID_MIN' is unset. \\n\" \n} \nVerify the output matches:  \n-a always,exit -F arch=b64 -S \ninit_module,finit_module,delete_module,create_module,query_module -F \nauid>=1000 -F auid!=unset -k kernel_modules  \n-a always,exit -F path=/usr/bin/kmod -F perm=x -F auid>=1000 -F auid!=unset -\nk kernel_modules  \nRunning configuration  \nRun the following script to check loaded rules:  Page 891 #!/usr/bin/env bash  \n \n{ \n  auditctl -l | awk '/^ * -a *always,exit/ \\ \n  &&/ -F *arch=b(32|64)/ \\ \n  &&(/ -F auid!=unset/||/ -F auid!= -1/||/ -F auid!=4294967295/) \\ \n  &&/ -S/ \\ \n  &&(/init_module/ \\ \n    ||/finit_module/ \\ \n    ||/delete_module/ \\ \n    ||/create_mo dule/ \\ \n    ||/query_module/) \\ \n  &&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)'  \n \n  UID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n  [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ * -a *always,exit/ \\ \n  &&(/ -F *auid!=unset/||/ -F *auid!= -1/||/ -F *auid! =4294967295/) \\ \n  &&/ -F *auid>=${UID_MIN}/ \\ \n  &&/ -F *perm=x/ \\ \n  &&/ -F *path= \\/usr\\/bin\\/kmod/ \\ \n  &&(/ key= *[! -~]* *$/||/ -k *[!-~]* *$/)\" \\ \n  || printf \"ERROR: Variable 'UID_MIN' is unset. \\n\" \n} \nVerify the output includes:  \n-a always,exit -F arch=b64 -S \ncreate_module,init_module,delete_module,query_module,finit_module -F \nauid>=1000 -F auid!= -1 -F key=kernel_modules  \n-a always,exit -S all -F path=/usr/bin/kmod -F perm=x -F auid>=1000 -F \nauid!=-1 -F key=kernel_modules  \nSymlink audit  \nRun the following script to audit if the symlinks kmod  accepts are indeed pointing at it:  \n#!/usr/bin/env bash  \n \n{ \n   a_files=(\"/usr/sbin/lsmod\" \"/usr/sbin/rmmod\" \"/usr/sbin/insmod\" \n\"/usr/sbin/modinfo\" \"/usr/sbin/modprobe\" \"/usr/sbin/depmod\")  \n   for l_file in \"${a_files[@]}\"; do  \n      if [ \"$(readlink -f \"$l_file\")\" = \"$(readlink -f /bin/kmod)\" ] ; then \n         printf \"OK: \\\"$l_file \\\"\\n\" \n      else \n         printf \"Issue with symlink for file: \\\"$l_file \\\"\\n\" \n      fi \n   done \n} \nVerify the output states OK. If there is a symlink pointing to a different location it should \nbe investigated  Page 892",
                "remediation": "Create audit rules  \nEdit or create a file in the /etc/audit/rules.d/  directory, ending in .rules  extension, \nwith the relevant rules to monitor kernel module modification.  \nExample:  \n#!/usr/bin/env bash  \n \n{ \n  UID_MIN=$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)  \n  [ -n \"${UID_MIN}\" ] && printf \"  \n  -a always,exit -F arch=b64 -S \ninit_module,finit_module,delete_module,create_module,query_module -F \nauid>=${UID_MIN} -F auid!=unset -k kernel_modules  \n  -a always,exit -F path=/usr/bin/kmod -F perm=x -F auid>=${UID_MIN} -F \nauid!=unset -k kernel_modules  \n  \" >> /etc/audit/rules.d/50 -kernel_modules.rules || printf \"ERROR: Variable \n'UID_MIN' is unset. \\n\" \n} \nLoad audit rules  \nMerge and load the rules into active configuration:  \n# augenrules --load \nCheck if reboot is required.  \n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot \nrequired to load rules \\n\"; fi \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -3, CM -6 \nAdditional Information:  \nPotential reboot required  \nIf the auditing configuration is locked ( -e 2), then augenrules  will not warn in any way \nthat rules could not be loaded into the running configuration. A system reboot will be \nrequired to load the rules into the running configuration.  \nSystem call structure  \nFor performance ( man 7 audit.rules ) reasons it is preferable to have all the system \ncalls on one line. However, your configuration may have them on one line each or some \nother combination. This is important to understand for both the auditing and remediation \nsections as the examples given are optimized for performance as per the man page.  Page 893 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.5 Collect Detailed Audit Logs  \n Configure detailed audit logging for enterprise assets containing sensitive data. \nInclude event source, date, username, timestamp, source addresses, destination \naddresses, and other useful elements that could assist in a forensic investigation.   \u25cf \u25cf \nv7 6.2 Activate audit logging  \n Ensure that local logging has been enabled on all systems and networking \ndevices.  \u25cf \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1562, T1562.006  TA0004  M1047  Page 894",
                "audit_command": "!/usr/bin/env bash  \n!/usr/bin/env bash  ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "!/usr/bin/env bash",
                    "augenrules --load",
                    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot",
                    "(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)",
                    "{UID_MIN}\" ] && printf \"",
                    "{UID_MIN} -F auid!=unset -k kernel_modules",
                    "{UID_MIN} -F",
                    "(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot"
                ]
            },
            "2.3.20": {
                "id": "2.3.20",
                "title": "Ensure the audit configuration is immutable (Automated)",
                "audit": "Run the following command and verify output matches:  \n# grep -Ph -- '^\\h*-e\\h+2\\b' /etc/audit/rules.d/*.rules | tail -1 \n \n-e 2",
                "remediation": "Edit or create the file /etc/audit/rules.d/99 -finalize.rules  and add the line -e \n2 at the end of the file:  \nExample:  \n# printf ' \\n%s' \"-e 2\" >> /etc/audit/rules.d/99 -finalize.rules  \nLoad audit rules  \nMerge and load the rules into active configuration:  \n# augenrules --load \nCheck if reboot is required.  \n# if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot \nrequired to load rules \\n\"; fi \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AC -3, AU -3, AU -12, MP -2 Page 895 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 3.3 Configure Data Access Control Lists  \n Configure data access control lists based on a user\u2019s need to know. Apply data \naccess control lists, also known as access permissions, to local and remote file \nsystems, databases, and applications.  \u25cf \u25cf \u25cf \nv8 8.5 Collect Detailed Audit Logs  \n Configure detailed audit logging for enterprise assets containing sensitive data. \nInclude event source, date, username, timestamp, source addresses, destination \naddresses, and other useful elements that could assist in a forensic investigation.   \u25cf \u25cf \nv7 6.2 Activate audit logging  \n Ensure that local logging has been enabled on all systems and networking \ndevices.  \u25cf \u25cf \u25cf \nv7 6.3 Enable Detailed Logging  \n Enable system logging to include detailed information such as an event source, \ndate, user, timestamp, source addresses, destination addresses, and other useful \nelements.   \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1562, T1562.001  TA0005  M1022  Page 896",
                "audit_command": "grep -Ph -- '^\\h*-e\\h+2\\b' /etc/audit/rules.d/*.rules | tail -1 ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "printf ' \\n%s' \"-e 2\" >> /etc/audit/rules.d/99 -finalize.rules",
                    "augenrules --load",
                    "if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot",
                    "(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot"
                ]
            },
            "2.3.21": {
                "id": "2.3.21",
                "title": "Ensure the running and on disk configuration is the same \n(Manual)",
                "audit": "Merged rule sets  \nEnsure that all rules in /etc/audit/rules.d  have been merged into \n/etc/audit/audit.rules : \n# augenrules --check \n \n/usr/sbin/augenrules: No change  \nShould there be any drift, run augenrules --load  to merge and load all rules.",
                "remediation": "If the rules are not aligned across all three () areas, run the following command to \nmerge and load all rules:  \n# augenrules --load \nCheck if reboot is required.  \nif [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then echo \"Reboot required \nto load rules\"; fi  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -3 Page 897 Additional Information:  \nPotential reboot required  \nIf the auditing configuration is locked ( -e 2), then augenrules  will not warn in any way \nthat rules could not be loaded into the running configuration. A system reboot will be \nrequired to load the rules into the running configuration.  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.5 Collect Detailed Audit Logs  \n Configure detailed audit logging for enterprise assets containing sensitive data. \nInclude event source, date, username, timestamp, source addresses, destination \naddresses, and other useful elements that could assist in a forensic investigation.   \u25cf \u25cf \nv7 6.3 Enable Detailed Logging  \n Enable system logging to include detailed information such as an event source, \ndate, user, timestamp, source addresses, destination addresses, and other useful \nelements.   \u25cf \u25cf \n Page 898",
                "audit_command": "augenrules --check ",
                "audit_output": "all rules in /etc/audit/rules.d  have been merged into",
                "remediation_command": [
                    "augenrules --load",
                    "(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then echo \"Reboot required"
                ]
            },
            "2.4.2": {
                "id": "2.4.2",
                "title": "Ensure audit log files owner is configured (Automated)",
                "audit": "Run the following script to verify audit log files are owned by the root  user:  \n#!/usr/bin/env bash  \n \n{ \n   l_output=\"\" l_output2=\"\"  \n   if [ -e \"/etc/audit/auditd.conf\" ]; then  \n      l_audit_log_directory=\"$(dirname \"$(awk -F= '/^\\s*log_file \\s*/{print \n$2}' /etc/audit/auditd.conf | xargs)\")\"  \n      if [ -d \"$l_audit_log_directory\" ]; then  \n         while IFS= read -r -d $'\\0' l_file; do  \n            l_output2=\"$l_output2 \\n  - File: \\\"$l_file \\\" is owned by user: \n\\\"$(stat -Lc '%U' \"$l_file\") \\\"\\n     (should be owned by user: \\\"root\\\")\\n\" \n         done < <(find \"$l_audit_log_directory\" -maxdepth  1 -type f ! -user \nroot -print0) \n      else \n         l_output2=\"$l_output2 \\n  - Log file directory not set in \n\\\"/etc/audit/auditd.conf \\\" please set log file directory\"  \n      fi \n   else \n      l_output2=\"$l_output2 \\n  - File: \\\"/etc/audit/auditd.conf \\\" not \nfound.\\n  - ** Verify auditd is installed **\"  \n   fi \n   if [ -z \"$l_output2\" ]; then  \n      l_output=\"$l_output \\n  - All files in \\\"$l_audit_log_directory \\\" are \nowned by user: \\\"root\\\"\\n\" \n      echo -e \"\\n- Audit Result: \\n  ** PASS ** \\n - * Correctly configur ed * \n:$l_output\"  \n   else \n      echo -e \"\\n- Audit Result: \\n  ** FAIL ** \\n - * Reasons for audit \nfailure * :$l_output2 \\n\" \n   fi \n}",
                "remediation": "Run the following command to configure the audit log files to be owned by the root  \nuser:  \n# [ -f /etc/audit/auditd.conf ] && find \"$(dirname $(awk -F \"=\" \n'/^\\s*log_file/ {print $2}' /etc/audit/auditd.conf | xargs))\" -type f ! -user \nroot -exec chown root {} +  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -3 Page 904 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 3.3 Configure Data Access Control Lists  \n Configure data access control lists based on a user\u2019s need to know. Apply data \naccess control lists, also known as access permissions, to local and remote file \nsystems, databases, and applications.  \u25cf \u25cf \u25cf \nv7 14.6 Protect Information through Access Control Lists  \n Protect all information stored on systems with file system, network share, \nclaims, application, or database specific access control lists. These controls will \nenforce the principle that only authorized individuals should have access to the \ninformation base d on their need to access the information as a part of their \nresponsibilities.  \u25cf \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1070, T1070.002, T1083, \nT1083.000  TA0007  M1022  Page 905",
                "audit_command": "!/usr/bin/env bash  \n2}' /etc/audit/auditd.conf | xargs)\")\"  ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "[ -f /etc/audit/auditd.conf ] && find \"$(dirname $(awk -F \"=\"",
                    "(dirname $(awk -F \"=\"",
                    "2}' /etc/audit/auditd.conf | xargs))\" -type f ! -user"
                ]
            },
            "2.4.3": {
                "id": "2.4.3",
                "title": "Ensure audit log files group owner is configured \n(Automated)",
                "audit": "Run the following command to verify log_group  parameter is set to either adm or root  \nin /etc/audit/auditd.conf : \n#  grep -Piws -- '^\\h*log_group \\h*=\\h*\\H+\\b' /etc/audit/auditd.conf | grep -\nPvi -- '(adm)' \nNothing should be returned  \nUsing the path of the directory containing the audit logs, verify audit log files are owned \nby the \"root\" or \"adm\" group by running the following script:  \n#!/usr/bin/env bash  \n \n{ \n  if [ -e /etc/audit/auditd.conf ]; then  \n      l_fpath=\"$(dirname \"$(awk -F \"=\" '/^ \\s*log_file/ {print $2}' \n/etc/audit/auditd.conf | xargs)\")\"  \n      find -L \"$l_fpath\" -not -path \"$l_fpath\"/lost+found -type f \\( ! -group \nroot -a ! -group adm \\) -exec ls -l {} + \n   fi \n} \nNothing should be returned  \n  Page 906",
                "remediation": "Run the following command to configure the audit log files to be group owned by adm: \n# find $(dirname $(awk -F\"=\" '/^ \\s*log_file/ {print $2}' \n/etc/audit/auditd.conf | xargs)) -type f \\( ! -group adm -a ! -group root \\) \n-exec chgrp adm {} +  \nRun the following command to set the log_group  parameter in the audit configuration \nfile to log_group = adm : \n# sed -ri 's/^\\s*#?\\s*log_group \\s*=\\s*\\S+(\\s*#.*)?.*$/log_group = adm \\1/' \n/etc/audit/auditd.conf  \nRun the following command to restart the audit daemon to reload the configuration file:  \n# systemctl restart auditd  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -3 \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 3.3 Configure Data Access Control Lists  \n Configure data access control lists based on a user\u2019s need to know. Apply data \naccess control lists, also known as access permissions, to local and remote file \nsystems, databases, and applications.  \u25cf \u25cf \u25cf \nv7 14.6 Protect Information through Access Control Lists  \n Protect all information stored on systems with file system, network share, \nclaims, application, or database specific access control lists. These controls will \nenforce the principle that only authorized individuals should have access to the \ninformation base d on their need to access the information as a part of their \nresponsibilities.  \u25cf \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1070, T1070.002, T1083, \nT1083.000  TA0007  M1022  Page 907",
                "audit_command": "grep -Piws -- '^\\h*log_group \\h*=\\h*\\H+\\b' /etc/audit/auditd.conf | grep -\n!/usr/bin/env bash  ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "find $(dirname $(awk -F\"=\" '/^ \\s*log_file/ {print $2}'",
                    "sed -ri 's/^\\s*#?\\s*log_group \\s*=\\s*\\S+(\\s*#.*)?.*$/log_group = adm \\1/'",
                    "systemctl restart auditd",
                    "(dirname $(awk -F\"=\" '/^ \\s*log_file/ {print $2}'",
                    "/log_group = adm \\1/'"
                ]
            },
            "2.4.4": {
                "id": "2.4.4",
                "title": "Ensure the audit log file directory mode is configured \n(Automated)",
                "audit": "Run the following script to verify the audit log directory is mode 0750 or more restrictive:  \n#!/usr/bin/env bash  \n \n{ \n   l_perm_mask=\"0027\"  \n   if [ -e \"/etc/audit/auditd.conf\" ]; then  \n      l_audit_log_directory=\"$(dirname \"$(awk -F= '/^\\s*log_file \\s*/{print \n$2}' /etc/audit/auditd.conf | xargs)\")\"  \n      if [ -d \"$l_audit_log_directory\" ]; then  \n         l_maxperm=\"$(printf '%o' $(( 0777 & ~$l_perm_mask )) )\"  \n         l_directory_mode=\"$(stat -Lc '%#a' \"$l_audit_log_directory\")\"  \n         if [ $(( $l_directory_mode & $l_perm_mask )) -gt 0 ]; then  \n            echo -e \"\\n- Audit Result: \\n  ** FAIL ** \\n  - Directory: \n\\\"$l_audit_log_directory \\\" is mode: \\\"$l_directory_mode \\\"\\n     (should be \nmode: \\\"$l_maxperm \\\" or more restrictive) \\n\" \n         else \n            echo -e \"\\n- Audit Result: \\n  ** PASS ** \\n  - Directory: \n\\\"$l_audit_log_directory \\\" is mode: \\\"$l_directory_mode \\\"\\n     (should be \nmode: \\\"$l_maxperm \\\" or more restrictive) \\n\" \n         fi         \n      else \n         echo -e \"\\n- Audit Result: \\n  ** FAIL ** \\n  - Log file directory not \nset in \\\"/etc/audit/auditd.conf \\\" please set log file directory\"  \n      fi \n   else \n      echo -e \"\\n- Audit Result: \\n  ** FAIL ** \\n  - File: \n\\\"/etc/audit/auditd.conf \\\" not found \\n  - ** Verify auditd is installed **\"  \n   fi \n}",
                "remediation": "Run the following command to configure the audit log directory to have a mode of \n\"0750\" or less permissive:  \n# chmod g -w,o-rwx \"$(dirname \"$(awk -F= '/^\\s*log_file \\s*/{print $2}' \n/etc/audit/auditd.conf | xargs)\")\"",
                "audit_command": "!/usr/bin/env bash  \n2}' /etc/audit/auditd.conf | xargs)\")\"  ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "chmod g -w,o-rwx \"$(dirname \"$(awk -F= '/^\\s*log_file \\s*/{print $2}'",
                    "(dirname \"$(awk -F= '/^\\s*log_file \\s*/{print $2}'"
                ]
            },
            "2.4.5": {
                "id": "2.4.5",
                "title": "Ensure audit configuration files mode is configured \n(Automated)",
                "audit": "Run the following script to verify that the audit configuration files are mode 0640  or more \nrestrictive:  \n#!/usr/bin/env bash  \n \n{ \n   l_output=\"\" l_output2=\"\" l_perm_mask=\"0137\"  \n   l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_perm_mask )) )\"  \n   while IFS= read -r -d $'\\0' l_fname; do  \n      l_mode=$(stat -Lc '%#a' \"$l_fname\")  \n      if [ $(( \"$l_mode\" & \"$l_perm_mask\"  )) -gt 0 ]; then  \n         l_output2=\"$l_output2 \\n - file: \\\"$l_fname \\\" is mode: \\\"$l_mode \\\" \n(should be mode: \\\"$l_maxperm \\\" or more restrictive)\"  \n      fi \n   done < <(find /etc/audit/ -type f \\( -name \"*.conf\" -o -name '*.rules' \\) \n-print0) \n   if [ -z \"$l_output2\" ]; then  \n      echo -e \"\\n- Audit Result: \\n  ** PASS ** \\n - All audit configuration \nfiles are mode: \\\"$l_maxperm \\\" or more restrictive\"  \n   else \n      echo -e \"\\n- Audit Result: \\n  ** FAIL ** \\n$l_output2\"  \n   fi \n} \n  Page 911",
                "remediation": "Run the following command to remove more permissive mode than 0640  from the audit \nconfiguration files:  \n# find /etc/audit/ -type f \\( -name '*.conf' -o -name '*.rules' \\) -exec \nchmod u-x,g-wx,o-rwx {} +  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -3 \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 3.3 Configure Data Access Control Lists  \n Configure data access control lists based on a user\u2019s need to know. Apply data \naccess control lists, also known as access permissions, to local and remote file \nsystems, databases, and applications.  \u25cf \u25cf \u25cf \nv7 14.6 Protect Information through Access Control Lists  \n Protect all information stored on systems with file system, network share, \nclaims, application, or database specific access control lists. These controls will \nenforce the principle that only authorized individuals should have access to the \ninformation base d on their need to access the information as a part of their \nresponsibilities.  \u25cf \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1070, T1070.002, T1083, \nT1083.000  TA0007  M1022  Page 912",
                "audit_command": "!/usr/bin/env bash  ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "find /etc/audit/ -type f \\( -name '*.conf' -o -name '*.rules' \\) -exec",
                    "chmod"
                ]
            },
            "2.4.6": {
                "id": "2.4.6",
                "title": "Ensure audit configuration files owner is configured \n(Automated)",
                "audit": "Run the following command to verify that the audit configuration files are owned by the \nroot user:  \n# find /etc/audit/ -type f \\( -name '*.conf' -o -name '*.rules' \\) ! -user \nroot \nNothing should be returned",
                "remediation": "Run the following command to change ownership to root  user:  \n# find /etc/audit/ -type f \\( -name '*.conf' -o -name '*.rules' \\) ! -user \nroot -exec chown root {} +  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -3 Page 913 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 3.3 Configure Data Access Control Lists  \n Configure data access control lists based on a user\u2019s need to know. Apply data \naccess control lists, also known as access permissions, to local and remote file \nsystems, databases, and applications.  \u25cf \u25cf \u25cf \nv7 14.6 Protect Information through Access Control Lists  \n Protect all information stored on systems with file system, network share, \nclaims, application, or database specific access control lists. These controls will \nenforce the principle that only authorized individuals should have access to the \ninformation base d on their need to access the information as a part of their \nresponsibilities.  \u25cf \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1070, T1070.002, T1083, \nT1083.000  TA0007  M1022  Page 914",
                "audit_command": "find /etc/audit/ -type f \\( -name '*.conf' -o -name '*.rules' \\) ! -user ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "find /etc/audit/ -type f \\( -name '*.conf' -o -name '*.rules' \\) ! -user"
                ]
            },
            "2.4.7": {
                "id": "2.4.7",
                "title": "Ensure audit configuration files group owner is configured \n(Automated)",
                "audit": "Run the following command to verify that the audit configuration files are owned by the \ngroup root : \n# find /etc/audit/ -type f \\( -name '*.conf' -o -name '*.rules' \\) ! -group \nroot \nNothing should be returned",
                "remediation": "Run the following command to change group to root : \n# find /etc/audit/ -type f \\( -name '*.conf' -o -name '*.rules' \\) ! -group \nroot -exec chgrp root {} +  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -3 Page 915 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 3.3 Configure Data Access Control Lists  \n Configure data access control lists based on a user\u2019s need to know. Apply data \naccess control lists, also known as access permissions, to local and remote file \nsystems, databases, and applications.  \u25cf \u25cf \u25cf \nv7 14.6 Protect Information through Access Control Lists  \n Protect all information stored on systems with file system, network share, \nclaims, application, or database specific access control lists. These controls will \nenforce the principle that only authorized individuals should have access to the \ninformation base d on their need to access the information as a part of their \nresponsibilities.  \u25cf \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1070, T1070.002, T1083, \nT1083.000  TA0007  M1022  Page 916",
                "audit_command": "find /etc/audit/ -type f \\( -name '*.conf' -o -name '*.rules' \\) ! -group ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "find /etc/audit/ -type f \\( -name '*.conf' -o -name '*.rules' \\) ! -group"
                ]
            },
            "2.4.8": {
                "id": "2.4.8",
                "title": "Ensure audit tools mode is configured (Automated)",
                "audit": "Run the following script to verify the audit tools are mode 0755  or more restrictive:  \n#!/usr/bin/env bash  \n \n{ \n   l_output=\"\" l_output2=\"\" l_perm_mask=\"0022\"  \n   l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_perm_mask )) )\"  \n   a_audit_tools=(\"/sbin/auditctl\" \"/sbin/aureport\" \"/sbin/ausearch\" \n\"/sbin/autrace\" \"/sbin/auditd\" \"/sbin/augenrules\")  \n   for l_audit_tool in \"${a_audit_tools[@]}\"; do  \n      l_mode=\"$(stat -Lc '%#a'  \"$l_audit_tool\")\"  \n      if [ $(( \"$l_mode\" & \"$l_perm_mask\" )) -gt 0 ]; then  \n         l_output2=\"$l_output2 \\n - Audit tool \\\"$l_audit_tool \\\" is mode: \n\\\"$l_mode \\\" and should be mode: \\\"$l_maxperm \\\" or more restrictive\"  \n      else \n         l_output=\"$l_outp ut\\n - Audit tool \\\"$l_audit_tool \\\" is correctly \nconfigured to mode: \\\"$l_mode \\\"\" \n      fi \n   done \n   if [ -z \"$l_output2\" ]; then  \n      echo -e \"\\n- Audit Result: \\n  ** PASS ** \\n - * Correctly configured * \n:$l_output\"  \n   else \n      echo -e \"\\n- Audit Resu lt:\\n  ** FAIL ** \\n - * Reasons for audit \nfailure * :$l_output2 \\n\" \n      [ -n \"$l_output\" ] && echo -e \"\\n - * Correctly configured * \n:\\n$l_output \\n\" \n   fi \n   unset a_audit_tools  \n}",
                "remediation": "Run the following command to remove more permissive mode from the audit tools:  \n# chmod go -w /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace \n/sbin/auditd /sbin/augenrules  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -3 \n  Page 918 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 3.3 Configure Data Access Control Lists  \n Configure data access control lists based on a user\u2019s need to know. Apply data \naccess control lists, also known as access permissions, to local and remote file \nsystems, databases, and applications.  \u25cf \u25cf \u25cf \nv7 14.6 Protect Information through Access Control Lists  \n Protect all information stored on systems with file system, network share, \nclaims, application, or database specific access control lists. These controls will \nenforce the principle that only authorized individuals should have access to the \ninformation base d on their need to access the information as a part of their \nresponsibilities.  \u25cf \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1070, T1070.002, T1083, \nT1083.000  TA0007  M1022  Page 919",
                "audit_command": "!/usr/bin/env bash  ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "chmod go -w /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace"
                ]
            },
            "2.4.9": {
                "id": "2.4.9",
                "title": "Ensure audit tools owner is configured (Automated)",
                "audit": "Run the following command to verify the audit tools are owned by the root  user:  \n# stat -Lc \"%n %U\" /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace \n/sbin/auditd /sbin/augenrules | awk '$2 != \"root\" {print}'  \nNothing should be returned",
                "remediation": "Run the following command to change the owner of the audit tools to the root  user:  \n# chown root /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace \n/sbin/auditd /sbin/augenrules  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -3 \n  Page 920 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 3.3 Configure Data Access Control Lists  \n Configure data access control lists based on a user\u2019s need to know. Apply data \naccess control lists, also known as access permissions, to local and remote file \nsystems, databases, and applications.  \u25cf \u25cf \u25cf \nv7 14.6 Protect Information through Access Control Lists  \n Protect all information stored on systems with file system, network share, \nclaims, application, or database specific access control lists. These controls will \nenforce the principle that only authorized individuals should have access to the \ninformation base d on their need to access the information as a part of their \nresponsibilities.  \u25cf \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1070, T1070.002, T1083, \nT1083.000  TA0007  M1022  Page 921",
                "audit_command": "stat -Lc \"%n %U\" /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "chown root /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace"
                ]
            },
            "2.4.10": {
                "id": "2.4.10",
                "title": "Ensure audit tools group owner is configured \n(Automated)",
                "audit": "Run the following command to verify the audit tools are owned by the group root  \n# stat -Lc \"%n %G\" /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace \n/sbin/auditd /sbin/augenrules | awk '$2 != \"root\" {print}'  \nNothing should be returned",
                "remediation": "Run the following command to change group ownership to the groop root : \n# chgrp root /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace \n/sbin/auditd /sbin/augenrules  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -3 \n  Page 922 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 3.3 Configure Data Access Control Lists  \n Configure data access control lists based on a user\u2019s need to know. Apply data \naccess control lists, also known as access permissions, to local and remote file \nsystems, databases, and applications.  \u25cf \u25cf \u25cf \nv7 14.6 Protect Information through Access Control Lists  \n Protect all information stored on systems with file system, network share, \nclaims, application, or database specific access control lists. These controls will \nenforce the principle that only authorized individuals should have access to the \ninformation base d on their need to access the information as a part of their \nresponsibilities.  \u25cf \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1070, T1070.002, T1083, \nT1083.000  TA0007  M1022",
                "audit_command": "stat -Lc \"%n %G\" /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "chgrp root /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace"
                ]
            }
        }
    },
    "168": {
        "description": "",
        "sub_rules": {
            "168.50.42": {
                "id": "168.50.42",
                "title": "ServerKeyFile=/etc/ssl/private/journal -upload.pem  \nServerCertificateFile=/etc/ssl/certs/journal -upload.pem  \nTrustedCertificateFile=/etc/ssl/ca/trusted.pem  \nExample script to create systemd drop -in configuration file:  \n#!/usr/bin/env bash  \n \n{ \n   a_settings=(\"URL=192.168.50.42\" \"ServerKeyFile=/etc/ssl/private/journal -\nupload.pem\" \\ \n   \"ServerCertificateFile=/etc/ssl/certs/journal -upload.pem\" \n\"TrustedCertificateFile=/etc/ssl/ca/trusted.pem\")  \n   [ ! -d /etc/systemd/journal -upload.conf.d/ ] && mkdir \n/etc/systemd/journal -upload.conf.d/  \n   if grep -Psq -- '^\\h*\\[Upload\\]' /etc/systemd/journal -upload.conf.d/60 -\njournald_upload.conf; then  \n      printf '%s \\n' \"\" \"${a_settings[@]}\" >> /etc/systemd/journal -\nupload.conf.d/60 -journald_upl oad.conf  \n   else \n      printf '%s \\n' \"\" \"[Journal]\" \"${a_settings[@]}\" >> \n/etc/systemd/journal -upload.conf.d/60 -journald_upload.conf  \n   fi \n} \nRun the following command to update the parameters in the service:  \n# systemctl reload -or-restart systemd -journal-upload \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -2, AU -12 Page 747 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.2 Collect Audit Logs  \n Collect audit logs. Ensure that logging, per the enterprise\u2019s audit log \nmanagement process, has been enabled across enterprise assets.  \u25cf \u25cf \u25cf \nv7 6.2 Activate audit logging  \n Ensure that local logging has been enabled on all systems and networking \ndevices.  \u25cf \u25cf \u25cf \nv7 6.3 Enable Detailed Logging  \n Enable system logging to include detailed information such as an event \nsource, date, user, timestamp, source addresses, destination addresses, and \nother useful elements.   \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1070, T1070.002, T1562, \nT1562.006  TA0040  M1029  Page 748 6.1.2.1.3 Ensure systemd -journal -upload is enabled and active \n(Automated)",
                "audit": "Run the following command to verify systemd-journal-upload  is enabled.  \n# systemctl is -enabled systemd -journal-upload.service  \n \nenabled \nRun the following command to verify systemd-journal-upload  is active:  \n# systemctl is -active systemd -journal-upload.service  \n \nactive",
                "remediation": "Run the following commands to unmask, enable and start systemd-journal-upload : \n# systemctl unmask systemd -journal-upload.service  \n# systemctl --now enable systemd -journal-upload.service  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: AU -2, AU -12 Page 749 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 8.2 Collect Audit Logs  \n Collect audit logs. Ensure that logging, per the enterprise\u2019s audit log \nmanagement process, has been enabled across enterprise assets.  \u25cf \u25cf \u25cf \nv7 6.2 Activate audit logging  \n Ensure that local logging has been enabled on all systems and networking \ndevices.  \u25cf \u25cf \u25cf \nv7 6.3 Enable Detailed Logging  \n Enable system logging to include detailed information such as an event \nsource, date, user, timestamp, source addresses, destination addresses, and \nother useful elements.   \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1070, T1070.002, T1562, \nT1562.006  TA0040  M1029  Page 750",
                "audit_command": "systemctl is -enabled systemd -journal-upload.service  \nsystemctl is -active systemd -journal-upload.service  ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "systemctl unmask systemd -journal-upload.service",
                    "systemctl --now enable systemd -journal-upload.service"
                ]
            }
        }
    }
}