{
    "5": {
        "description": "",
        "sub_rules": {
            "5.3.1": {
                "id": "5.3.1",
                "title": "Configure PAM software packages  \nUpdated versions of PAM include  additional functionality  Page 598 5.3.1.1 Ensure latest version of pam is installed (Automated)",
                "audit": "Run the following command to verify the version of libpam-runtime  on the system:  \n# dpkg-query -s libpam -runtime | grep -P -- '^(Status|Version) \\b' \nThe output should be similar to:  \nStatus: install ok installed  \nVersion:",
                "remediation": "",
                "audit_command": "dpkg-query -s libpam -runtime | grep -P -- '^(Status|Version) \\b' ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": []
            },
            "5.3.3": {
                "id": "5.3.3",
                "title": "Configure PAM Arguments  \nPluggable Authentication Modules (PAM) uses arguments to pass information to a \npluggable module during authentication for a particular module type. These arguments \nallow the PAM configuration files for particular programs to use a common PAM module \nbut in different ways.  \nInvalid arguments are ignored and do not otherwise affect the success or failure of the \nPAM module. When an invalid argument is passed, an error is usually written to \n/var/log/messages  file. However, since the reporting method is controlled by the PAM \nmodule, the module must be written correctly to log the error to this file.  \nNote:  If custom PAM files are being used, for this section's remediation, the \ncorresponding files in /etc/pam.d/  would need to be edited directly, and the pamauth-update --enable <EDITED_PROFILE_NAME>  command skipped  Page 614 5.3.3.1 Configure pam_faillock module  \npam_faillock.so  provides a way to configure the default settings for locking the user \nafter multiple failed authentication attempts.  \nOptions:  \n<dir=/path/to/tally -directory>  - The directory where the user files with the \nfailure records are kept. The default is /var/run/faillock. Note: These files will \ndisappear after reboot on systems configured with directory /var/run/faillock \nmounted on virtual memory.  \naudit  - Will log the user name into the system log if the user is not found.  \nsilent  - Don't print informative messages to the user. Please note that when \nthis option is not used there will be difference in the authentication behavior for \nusers which exist on the system and non -existing users.  \nno_log_info  - Don't log informative messages via syslog(3).  \nlocal_users_only  - Only track failed user authentications attempts for local \nusers in /etc/passwd and ignore centralized (AD, IdM, LDAP, etc.) users. The \nfaillock(8) command will also no longer track user failed authentication attempts. \nEnabling this option will prevent a  double -lockout scenario where a user is locked \nout locally and in the centralized mechanism.  \nnodelay  - Don't enforce a delay after authentication failures.  \ndeny=<n>  - Deny access if the number of consecutive authentication failures for \nthis user during the recent interval exceeds . The default is 3.  \nfail_interval=n  - The length of the interval during which the consecutive \nauthentication failures must happen for the user account lock out is n seconds. \nThe default is 900 (15 minutes).  \nunlock_time=n  - The access will be re -enabled after n seconds after the lock \nout. The value 0 has the same meaning as value never - the access will not be \nre-enabled without resetting the faillock entries by the faillock(8) command. The \ndefault is 600 (10 minutes). Not e that the default directory that pam_faillock uses \nis usually cleared on system boot so the access will be also re -enabled after \nsystem reboot. If that is undesirable a different tally directory must be set with the \ndir option. Also note that  it is usually undesirable to permanently lock out users \nas they can become easily a target of denial of service attack unless the \nusernames are random and kept secret to potential attackers.  \neven_deny_root  - Root account can become locked as well as regular accounts.  \nroot_unlock_time=n  - This option implies even_deny_root option. Allow access \nafter n seconds to root account after the account is locked. In case the option is \nnot specified the value is the same as of the unlock_time option.  \nadmin_group=name  - If a group name is specified with this option, members of \nthe group will be handled by this module the same as the root account (the \noptions even_deny_root and root_unlock_time will apply to them. By default the \noption is not set.  Page 615 5.3.3.1.1 Ensure password failed attempts lockout is configured \n(Automated)",
                "audit": "Run the following command to verify that Number of failed logon attempts before the \naccount is locked is no greater than 5 and meets local site policy:  \n# grep -Pi -- '^\\h*deny\\h*=\\h*[1-5]\\b' /etc/security/faillock.conf  \n \ndeny = 5  \nRun the following command to verify that the deny  argument has not been set, or 5 or \nless and meets local site policy:  \n# grep -Pi -- \n'^\\h*auth\\h+(requisite|required|sufficient) \\h+pam_faillock \\.so\\h+([^#\\n\\r]+\\h\n+)?deny\\h*=\\h*(0|[6-9]|[1-9][0-9]+)\\b' /etc/pam.d/common -auth \nNothing should be returned",
                "remediation": "Create or edit the following line in /etc/security/faillock.conf  setting the deny  \noption to 5 or less:  \ndeny = 5  \nRun the following command:  \n# grep -Pl -- '\\bpam_faillock \\.so\\h+([^#\\n\\r]+\\h+)?deny \\b' /usr/share/pam -\nconfigs/*  \nEdit any returned files and remove the deny=<N>  arguments from the \npam_faillock.so  line(s):  Page 616",
                "audit_command": "grep -Pi -- '^\\h*deny\\h*=\\h*[1-5]\\b' /etc/security/faillock.conf  \ngrep -Pi -- ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "grep -Pl -- '\\bpam_faillock \\.so\\h+([^#\\n\\r]+\\h+)?deny \\b' /usr/share/pam -"
                ]
            }
        }
    },
    "1": {
        "description": "",
        "sub_rules": {
            "1.5.3": {
                "id": "1.5.3",
                "title": "-5 \nRemediation:  \n- IF - the version of libpam-modules  on the system is less than version 1.5.3-5: \nRun the following command to update to the latest version of PAM: \n# apt upgrade libpam -modules Page 600 5.3.1.3 Ensure libpam -pwquality is installed (Automated)",
                "audit": "Run the following command to verify libpam-pwquality  is installed:  \n# dpkg-query -s libpam -pwquality | grep -P -- '^(Status|Version) \\b' \nThe output should be similar to:  \nStatus: install ok installed  \nVersion:",
                "remediation": "",
                "audit_command": "dpkg-query -s libpam -pwquality | grep -P -- '^(Status|Version) \\b' ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": []
            },
            "1.4.5": {
                "id": "1.4.5",
                "title": "-3+build1  \nRemediation:  \nRun the following command to install libpam-pwquality : \n# apt install libpam -pwquality  \nReferences:  \n1. https://packages.debian.org/buster/libpam -pwquality  \nPage 601 5.3.2 Configure pam -auth -update profiles  \npam-auth-update  is a utility that permits configuring the central authentication policy \nfor the system using pre -defined profiles as supplied by PAM module packages.  \nProfiles - Shipped in the /usr/share/pam -configs/  directory specify the modules, \nwith options, to enable; the preferred ordering with respect to other profiles; and \nwhether a profile should be enabled by default. Packages providing PAM modules \nregister their profiles at install time by calling pam -auth-update --package.  \nSelection of profiles is done using the standard debconf  interface. The profile selection \nquestion will be asked at medium  priority when packages are added or removed, so no \nuser interaction is required by default. Users may invoke pam-auth-update  directly to \nchange their authentication configuration.  \nThe pam-auth-update  script makes every effort to respect local changes to \n/etc/pam.d/common -*. Local modifications to the list of module options will be \npreserved, and additions of modules within the managed portion of the stack will cause \npam-auth-update to treat the config files as locally modified and not make further \nchanges to the config files  unless given the --force  option.  \nIf the user specifies that pam-auth-update  should override local configuration changes, \nthe locally -modified files will be saved in /etc/pam.d/ with a suffix of .pam-old. Page 602 5.3.2.1 Ensure pam_unix module is enabled (Automated)",
                "audit": "Run the following command to verify that pam_unix  is enabled:  \n# grep -P -- '\\bpam_unix \\.so\\b' /etc/pam.d/common -\n{account,session,auth,password}  \nOutput should be simular to:  \n/etc/pam.d/common -account:account   [success=1 new_authtok_reqd=done \ndefault=ignore]   pam_unix.so  \n/etc/pam.d/common -session:session   required   pam_unix.so  \n/etc/pam.d/common -auth:auth   [success=2 default=ignore]   pam_unix.so \ntry_first_pass  \n/etc/pam.d/c ommon-password:password   [success=1 default=ignore]   \npam_unix.so obscure use_authtok try_first_pass yescrypt  \n  Page 603",
                "remediation": "Run the following command to enable the pam_unix  module:  \n# pam-auth-update --enable unix  \nNote:  If a site specific custom profile is being used in your environment to configure \nPAM that includes the configuration for the pam_faillock  module, enable that module \ninstead  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: IA -5(1) \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 3.3 Configure Data Access Control Lists  \n Configure data access control lists based on a user\u2019s need to know. Apply data \naccess control lists, also known as access permissions, to local and remote file \nsystems, databases, and applications.  \u25cf \u25cf \u25cf \nv7 14.6 Protect Information through Access Control Lists  \n Protect all information stored on systems with file system, network share, \nclaims, application, or database specific access control lists. These controls will \nenforce the principle that only authorized individuals should have access to the \ninformation base d on their need to access the information as a part of their \nresponsibilities.  \u25cf \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1110, T1110.001, \nT1110.002, T1110.003, \nT1178.001, T1178.002, \nT1178.003, T1178.004  TA0006  M1027  Page 604",
                "audit_command": "grep -P -- '\\bpam_unix \\.so\\b' /etc/pam.d/common -",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "pam-auth-update --enable unix"
                ]
            }
        }
    },
    "3": {
        "description": "",
        "sub_rules": {
            "3.2.2": {
                "id": "3.2.2",
                "title": "Ensure minimum password length is configured \n(Automated)",
                "audit": "Run the following command to verify that password length is 14 or more characters, and \nconforms to local site policy:  \n# grep -Psi -- '^\\h*minlen \\h*=\\h*(1[4-9]|[2-9][0-9]|[1-9][0-9]{2,})\\b' \n/etc/security/pwquality.conf /etc/security/pwquality.conf.d/*.conf  \nExample output:  \n/etc/security/pwquality.conf.d/50 -pwlength.conf:minlen = 14  \nVerify returned value(s) are no less than 14 characters and meet local site policy  \nRun the following command to verify that minlen  is not set, or is 14 or more characters, \nand conforms to local site policy:  \n# grep -Psi -- \n'^\\h*password \\h+(requisite|required|sufficient) \\h+pam_pwquality \\.so\\h+([^#\\n\\\nr]+\\h+)?minlen \\h*=\\h*([0-9]|1[0-3])\\b' /etc/pam.d/system -auth \n/etc/pam.d/common -password  \nNothing should be returned  \nNote:  \nsettings should be configured in only one location for clarity  \nSettings observe an order of precedence:  \no module arguments override the settings in the \n/etc/security/pwquality.conf  configuration file  \no settings in the /etc/security/pwquality.conf  configuration file \noverride settings in a .conf  file in the \n/etc/security/pwquality.conf.d/  directory  \no settings in a .conf  file in the /etc/security/pwquality.conf.d/  \ndirectory are read in canonical order, with last read file containing the \nsetting taking precedence  \nIt is recommended that settings be configured in a .conf  file in the \n/etc/security/pwquality.conf.d/  directory for clarity, convenience, and \ndurability.  \n  Page 631",
                "remediation": "Create or modify a file ending in .conf  in the /etc/security/pwquality.conf.d/  \ndirectory or the file /etc/security/pwquality.conf  and add or modify the following \nline to set password length of 14 or more characters. Ensure that password length \nconforms to local site policy:  \nExample:  \n#!/usr/bin/env bash  \n \n{ \n   sed -ri 's/^\\s*minlen \\s*=/# &/' /etc/security/pwquality.conf  \n   [ ! -d /etc/security/pwquality.conf.d/ ] && mkdir \n/etc/security/pwquality.conf.d/  \n   printf ' \\n%s' \"minlen = 14\" > /etc/security/pwquality.conf.d/50 -\npwlength.conf  \n} \nRun the following command:  \n# grep -Pl -- '\\bpam_pwquality \\.so\\h+([^#\\n\\r]+\\h+)?minlen \\b' /usr/share/pam -\nconfigs/*  \nEdit any returned files and remove the minlen  argument from the pam_pwquality.so  \nline(s):",
                "audit_command": "grep -Psi -- '^\\h*minlen \\h*=\\h*(1[4-9]|[2-9][0-9]|[1-9][0-9]{2,})\\b' \ngrep -Psi -- ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "!/usr/bin/env bash",
                    "&/' /etc/security/pwquality.conf",
                    "grep -Pl -- '\\bpam_pwquality \\.so\\h+([^#\\n\\r]+\\h+)?minlen \\b' /usr/share/pam -"
                ]
            },
            "3.2.3": {
                "id": "3.2.3",
                "title": "Ensure password complexity is configured (Manual)",
                "audit": "Run the following command to verify:  \ndcredit , ucredit , lcredit , and ocredit  are not set to a value greater than 0 \nComplexity conforms to local site policy:  \n# grep -Psi -- '^\\h*(minclass|[dulo]credit) \\b' /etc/security/pwquality.conf \n/etc/security/pwquality.conf.d/*.conf  \nExample output:  \n/etc/security/pwquality.conf.d/50 -pwcomplexity.conf:minclass = 3  \n/etc/security/pwquality.conf.d/50 -pwcomplexity.conf:ucredit = -2 \n/etc/security/pwquality.conf.d/50 -pwcomplexity.conf:lcredit = -2 \n/etc/security/pwquality.conf.d/50 -pwcomplexity.conf:dcredit =  -1 \n/etc/security/pwquality.conf.d/50 -pwcomplexity.conf:ocredit = 0  \nThe example represents a requirement of three character classes, with passwords \nrequiring two upper case, two lower case, and one numeric character.  \nRun the following command to verify that module arguments in the configuration file(s) \nare not being overri dden by arguments in /etc/pam.d/common -password : \n# grep -Psi -- \n'^\\h*password \\h+(requisite|required|sufficient) \\h+pam_pwquality \\.so\\h+([^#\\n\\\nr]+\\h+)?(minclass= \\d*|[dulo]credit= -?\\d*)\\b' /etc/pam.d/common -password  \nNothing should be returned  \nNote:  \nsettings should be configured in only one location for clarity  \nSettings observe an order of precedence:  \no module arguments override the settings in the \n/etc/security/pwquality.conf  configuration file  \no settings in the /etc/security/pwquality.conf  configuration file \noverride settings in a .conf  file in the \n/etc/security/pwquality.conf.d/  directory  \no settings in a .conf  file in the /etc/security/pwquality.conf.d/  \ndirectory are read in canonical order, with last read file containing the \nsetting taking precedence  \nIt is recommended that settings be configured in a .conf  file in the \n/etc/security/pwquality.conf.d/  directory for clarity, convenience, and \ndurability.  \n  Page 635",
                "remediation": "Run the following command:  \n# grep -Pl -- \n'\\bpam_pwquality \\.so\\h+([^#\\n\\r]+\\h+)?(minclass|[dulo]credit) \\b' \n/usr/share/pam -configs/*  \nEdit any returned files and remove the minclass , dcredit , ucredit , lcredit , and \nocredit  arguments from the pam_pwquality.so  line(s)  \nCreate or modify a file ending in .conf  in the /etc/security/pwquality.conf.d/  \ndirectory or the file /etc/security/pwquality.conf  and add or modify the following \nline(s) to set complexity according to local site policy:  \nminclass = _N_  \ndcredit = _N_  # Value should be either 0 or a number proceeded by a minus ( -\n) symbol  \nucredit = -1 # Value should be either 0 or a number proceeded by a minus ( -) \nsymbol  \nocredit = -1 # Value should be either 0 or a number proceeded by a minus ( -) \nsymbol  \nlcredit = -1 # Value should be either 0 or a number proceeded by a minus ( -) \nsymbol  \nExample 1 - Set minclass = 3 : \n#!/usr/bin/env bash  \n \n{ \n   sed -ri 's/^\\s*minclass \\s*=/# &/' /etc/security/pwquality.conf  \n   sed -ri 's/^\\s*[dulo]credit \\s*=/# &/' /etc/security/pwquality.conf  \n   [ ! -d /etc/security/pwquality.conf.d/ ] && mkdir \n/etc/security/pwquality.conf.d/  \n   printf ' \\n%s' \"minclass = 3\" > /etc/security/pwquality.conf.d/50 -\npwcomplexity.conf  \n} \nExample 2 - set dcredit = -1, ucredit = -1, and lcredit = -1: \n#!/usr/bin/env bash  \n \n{ \n   sed -ri 's/^\\s*minclass \\s*=/# &/' /etc/security/pwquality.conf  \n   sed -ri 's/^\\s*[dulo]credit \\s*=/# &/' /etc/security/pwquality.conf  \n   [ ! -d /etc/security/pwquality.conf.d/ ] && mkdir \n/etc/security/pwquality.conf.d/  \n   printf '% s\\n' \"dcredit = -1\" \"ucredit = -1\" \"lcredit = -1\" > \n/etc/security/pwquality.conf.d/50 -pwcomplexity.conf  \n} \n  Page 636",
                "audit_command": "grep -Psi -- '^\\h*(minclass|[dulo]credit) \\b' /etc/security/pwquality.conf \ngrep -Psi -- ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "grep -Pl --",
                    "\\n\\r]+\\h+)?(minclass|[dulo]credit) \\b'",
                    "Value should be either 0 or a number proceeded by a minus ( -",
                    "Value should be either 0 or a number proceeded by a minus ( -)",
                    "Value should be either 0 or a number proceeded by a minus ( -)",
                    "Value should be either 0 or a number proceeded by a minus ( -)",
                    "!/usr/bin/env bash",
                    "&/' /etc/security/pwquality.conf",
                    "&/' /etc/security/pwquality.conf",
                    "!/usr/bin/env bash",
                    "&/' /etc/security/pwquality.conf",
                    "&/' /etc/security/pwquality.conf"
                ]
            },
            "3.2.4": {
                "id": "3.2.4",
                "title": "Ensure password same consecutive characters is \nconfigured (Automated)",
                "audit": "Run the following command to verify that the maxrepeat  option is set to 3 or less, not 0, \nand follows local site policy:  \n# grep -Psi -- '^\\h*maxrepeat \\h*=\\h*[1-3]\\b' /etc/security/pwquality.conf \n/etc/security/pwquality.conf.d/*.conf  \nExample output:  \n/etc/security/pwquality.conf.d/50 -pwrepeat.conf:maxrepeat = 3  \nVerify returned value(s) are 3 or less, not 0, and meet local site policy  \nRun the following command to verify that maxrepeat  is not set, is 3 or less, not 0, and \nconforms to local site policy:  \n# grep -Psi -- \n'^\\h*password \\h+(requisite|required|sufficient) \\h+pam_pwquality \\.so\\h+([^#\\n\\\nr]+\\h+)?maxrepeat \\h*=\\h*(0|[4-9]|[1-9][0-9]+)\\b' /etc/pam.d/common -password  \nNothing should be returned  \nNote:  \nsettings should be configured in only one location for clarity  \nSettings observe an order of precedence:  \no module arguments override the settings in the \n/etc/security/pwquality.conf  configuration file  \no settings in the /etc/security/pwquality.conf  configuration file \noverride settings in a .conf  file in the \n/etc/security/pwquality.conf.d/  directory  \no settings in a .conf  file in the /etc/security/pwquality.conf.d/  \ndirectory are read in canonical order, with last read file containing the \nsetting taking precedence  \nIt is recommended that settings be configured in a .conf  file in the \n/etc/security/pwquality.conf.d/  directory for clarity, convenience, and \ndurability.  \n  Page 639",
                "remediation": "Create or modify a file ending in .conf  in the /etc/security/pwquality.conf.d/  \ndirectory or the file /etc/security/pwquality.conf  and add or modify the following \nline to set maxrepeat  to 3 or less and not 0. Ensure setting conforms to local site policy:  \nExample:  \n#!/usr/bin/env bash  \n \n{ \n   sed -ri 's/^\\s*maxrepeat \\s*=/# &/' /etc/security/pwquality.conf  \n   [ ! -d /etc/security/pwquality.conf.d/ ] && mkdir \n/etc/security/pwquality.conf.d/  \n   printf ' \\n%s' \"maxrepeat = 3\" > /etc/security/pwquality.conf.d/50 -\npwrepeat.con f \n} \nRun the following command:  \n# grep -Pl -- '\\bpam_pwquality \\.so\\h+([^#\\n\\r]+\\h+)?maxrepeat \\b' \n/usr/share/pam -configs/*  \nEdit any returned files and remove the maxrepeat  argument from the \npam_pwquality.so  line(s):",
                "audit_command": "grep -Psi -- '^\\h*maxrepeat \\h*=\\h*[1-3]\\b' /etc/security/pwquality.conf \ngrep -Psi -- ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "!/usr/bin/env bash",
                    "&/' /etc/security/pwquality.conf",
                    "grep -Pl -- '\\bpam_pwquality \\.so\\h+([^#\\n\\r]+\\h+)?maxrepeat \\b'"
                ]
            },
            "3.1.2": {
                "id": "3.1.2",
                "title": "Ensure password unlock time is configured (Automated)",
                "audit": "Run the following command to verify that the time in seconds before the account is \nunlocked is either 0 (never) or 900 (15 minutes) or more and meets local site policy:  \n# grep -Pi -- '^\\h*unlock_time \\h*=\\h*(0|9[0 -9][0-9]|[1-9][0-9]{3,})\\b' \n/etc/security/faillock.conf  \n \nunlock_time = 900  \nRun the following command to verify that the unlock_time  argument has not been set, \nor is either 0 (never) or 900 (15 minutes) or more and meets local site policy:  \n# grep -Pi -- \n'^\\h*auth\\h+(requisite|required|sufficient) \\h+pam_faillock \\.so\\h+([^#\\n\\r]+\\h\n+)?unlock_time \\h*=\\h*([1-9]|[1-9][0-9]|[1-8][0-9][0-9])\\b' /etc/pam.d/common -\nauth \nNothing should be returned",
                "remediation": "Set password unlock time to conform to site policy. unlock_time  should be 0 (never), \nor 900 seconds or greater.  \nEdit /etc/security/faillock.conf  and update or add the following line:  \nunlock_time = 900  \nRun the following command: remove the unlock_time  argument from the \npam_faillock.so  module in the PAM files:  \n# grep -Pl -- '\\bpam_faillock \\.so\\h+([^#\\n\\r]+\\h+)?unlock_time \\b' \n/usr/share/pam -configs/*  \nEdit any returned files and remove the unlock_time=<N>  argument from the \npam_faillock.so  line(s):",
                "audit_command": "grep -Pi -- '^\\h*unlock_time \\h*=\\h*(0|9[0 -9][0-9]|[1-9][0-9]{3,})\\b' \ngrep -Pi -- ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "grep -Pl -- '\\bpam_faillock \\.so\\h+([^#\\n\\r]+\\h+)?unlock_time \\b'"
                ]
            },
            "3.1.3": {
                "id": "3.1.3",
                "title": "Ensure password failed attempts lockout includes root \naccount (Automated)",
                "audit": "Run the following command to verify that even_deny_root  and/or root_unlock_time  \nis enabled:  \n# grep -Pi -- '^\\h*(even_deny_root|root_unlock_time \\h*=\\h*\\d+)\\b' \n/etc/security/faillock.conf  \nExample output:  \neven_deny_root  \n \n--AND/OR-- \n \nroot_unlock_time = 60  \nRun the following command to verify that - IF - root_unlock_time  is set, it is set to 60 \n(One minute) or more:  \n# grep -Pi -- '^\\h*root_unlock_time \\h*=\\h*([1-9]|[1-5][0-9])\\b' \n/etc/security/faillock.conf  \nNothing should be returned  \nRun the following command to check the pam_faillock.so  module for the \nroot_unlock_time  argument. Verify -IF- root_unlock_time  is set, it is set to 60 (One \nminute) or more:  \n# grep -Pi -- \n'^\\h*auth\\h+([^#\\n\\r]+\\h+)pam_faillock \\.so\\h+([^#\\n\\r]+\\h+)?root_unlock_time \\\nh*=\\h*([1-9]|[1-5][0-9])\\b' /etc/pam.d/common -auth \nNothing should be returned",
                "remediation": "Edit /etc/security/faillock.conf : \nRemove or update any line containing root_unlock_time , - OR - set it to a \nvalue of 60 or more  \nUpdate or add the following line:  \neven_deny_root  \nRun the following command:  \n# grep -Pl -- \n'\\bpam_faillock \\.so\\h+([^#\\n\\r]+\\h+)?(even_deny_root|root_unlock_time)' \n/usr/share/pam -configs/*  \nEdit any returned files and remove the even_deny_root  and root_unlock_time  \narguments from the pam_faillock.so  line(s):",
                "audit_command": "grep -Pi -- '^\\h*(even_deny_root|root_unlock_time \\h*=\\h*\\d+)\\b' \ngrep -Pi -- '^\\h*root_unlock_time \\h*=\\h*([1-9]|[1-5][0-9])\\b' \ngrep -Pi -- ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "grep -Pl --",
                    "\\n\\r]+\\h+)?(even_deny_root|root_unlock_time)'"
                ]
            },
            "3.3.2": {
                "id": "3.3.2",
                "title": "Ensure password history is enforced for the root user \n(Automated)",
                "audit": "Run the following command to verify that the enforce_for_root  argument is exists on \nthe pwhistory  line in /etc/pam.d/common -password : \n# grep -Psi -- \n'^\\h*password \\h+[^#\\n\\r]+\\h+pam_pwhistory \\.so\\h+([^#\\n\\r]+\\h+)?enforce_for_ro\not\\b' /etc/pam.d/common -password  \nOutput should be similar to:  \npassword   requisite   pam_pwhistory.so remember=24 enforce_for_root \ntry_first_pass use_authtok  \n  Page 658",
                "remediation": "Run the following command:  \n# awk '/Password -Type:/{ f = 1;next } / -Type:/{ f = 0 } f {if \n(/pam_pwhistory \\.so/) print FILENAME}' /usr/share/pam -configs/*  \nEdit any returned files and add the enforce_for_root  argument to the \npam_pwhistory  line in the Password  section:  \nExample File:  \nName: pwhistory password history checking  \nDefault: yes  \nPriority: 1024  \nPassword -Type: Primary  \nPassword:  \n   requisite   pam_pwhistory.so remember=24 enforce_for_root try_first_pass \nuse_authtok # < - **ensure line includes enforce_for_root**  \nRun the following command to update the files in the /etc/pam.d/  directory:  \n# pam-auth-update --enable <MODIFIED_PROFILE_NAME>  \nExample:  \n# pam-auth-update --enable pwhistory",
                "audit_command": "grep -Psi -- ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "awk '/Password -Type:/{ f = 1;next } / -Type:/{ f = 0 } f {if",
                    "< - **ensure line includes enforce_for_root**",
                    "pam-auth-update --enable <MODIFIED_PROFILE_NAME>",
                    "pam-auth-update --enable pwhistory"
                ]
            },
            "3.2.5": {
                "id": "3.2.5",
                "title": "Ensure password maximum sequential characters is \nconfigured (Automated)",
                "audit": "Run the following command to verify that the maxsequence  option is set to 3 or less, not \n0, and follows local site policy:  \n# grep -Psi -- '^\\h*maxsequence \\h*=\\h*[1-3]\\b' /etc/security/pwquality.conf \n/etc/security/pwquality.conf.d/*.conf  \nExample output:  \n/etc/security/pwquality.conf.d/50 -pwmaxsequence.conf:maxsequence = 3  \nVerify returned value(s) are 3 or less, not 0, and meet local site policy  \nRun the following command to verify that maxsequence  is not set, is 3 or less, not 0, and \nconforms to local site policy:  \n# grep -Psi -- \n'^\\h*password \\h+(requisite|required|sufficient) \\h+pam_pwquality \\.so\\h+([^#\\n\\\nr]+\\h+)?maxsequence \\h*=\\h*(0|[4-9]|[1-9][0-9]+)\\b' /etc/pam.d/common -password  \nNothing should be returned  \nNote:  \nsettings should be configured in only one location for clarity  \nSettings observe an order of precedence:  \no module arguments override the settings in the \n/etc/security/pwquality.conf  configuration file  \no settings in the /etc/security/pwquality.conf  configuration file \noverride settings in a .conf  file in the \n/etc/security/pwquality.conf.d/  directory  \no settings in a .conf  file in the /etc/security/pwquality.conf.d/  \ndirectory are read in canonical order, with last read file containing the \nsetting taking precedence  \nIt is recommended that settings be configured in a .conf  file in the \n/etc/security/pwquality.conf.d/  directory for clarity, convenience, and \ndurability.  \n  Page 643",
                "remediation": "Create or modify a file ending in .conf  in the /etc/security/pwquality.conf.d/  \ndirectory or the file /etc/security/pwquality.conf  and add or modify the following \nline to set maxsequence  to 3 or less and not 0. Ensure setting conforms to local site \npolicy:  \nExample:  \n#!/usr/bin/env bash  \n \n{ \n   sed -ri 's/^\\s*maxsequence \\s*=/# &/' /etc/security/pwquality.conf  \n   [ ! -d /etc/security/pwquality.conf.d/ ] && mkdir \n/etc/security/pwquality.conf.d/  \n   printf ' \\n%s' \"maxsequence = 3\" > /etc/security/pwquality.conf.d/50 -\npwmaxseq uence.conf  \n} \nRun the following command:  \n# grep -Pl -- '\\bpam_pwquality \\.so\\h+([^#\\n\\r]+\\h+)?maxsequence \\b' \n/usr/share/pam -configs/*  \nEdit any returned files and remove the maxsequence  argument from the \npam_pwquality.so  line(s):",
                "audit_command": "grep -Psi -- '^\\h*maxsequence \\h*=\\h*[1-3]\\b' /etc/security/pwquality.conf \ngrep -Psi -- ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "!/usr/bin/env bash",
                    "&/' /etc/security/pwquality.conf",
                    "grep -Pl -- '\\bpam_pwquality \\.so\\h+([^#\\n\\r]+\\h+)?maxsequence \\b'"
                ]
            },
            "3.2.6": {
                "id": "3.2.6",
                "title": "Ensure password dictionary check is enabled \n(Automated)",
                "audit": "Run the following command to verify that the dictcheck  option is not set to 0 (disabled) \nin a pwquality configuration file:  \n# grep -Psi -- '^\\h*dictcheck \\h*=\\h*0\\b' /etc/security/pwquality.conf \n/etc/security/pwquality.conf.d/*.conf  \nNothing should be returned  \nRun the following command to verify that the dictcheck  option is not set to 0 (disabled) \nas a module argument in a PAM file:  \n# grep -Psi -- \n'^\\h*password \\h+(requisite|required|sufficient) \\h+pam_pwquality \\.so\\h+([^#\\n\\\nr]+\\h+)?dictcheck \\h*=\\h*0\\b' /etc/pam.d/common -password  \nNothing should be returned  \nNote:  \nSettings observe an order of precedence:  \no module arguments override the settings in the \n/etc/security/pwquality.conf  configuration file  \no settings in the /etc/security/pwquality.conf  configuration file \noverride settings in a .conf  file in the \n/etc/security/pwquality.conf.d/  directory  \no settings in a .conf  file in the /etc/security/pwquality.conf.d/  \ndirectory are read in canonical order, with last read file containing the \nsetting taking precedence  \nIt is recommended that settings be configured in a .conf  file in the \n/etc/security/pwquality.conf.d/  directory for clarity, convenience, and \ndurability.",
                "remediation": "Edit any file ending in .conf  in the /etc/security/pwquality.conf.d/  directory \nand/or the file /etc/security/pwquality.conf  and comment out or remove any \ninstance of dictcheck = 0 : \nExample:  \n# sed -ri 's/^\\s*dictcheck \\s*=/# &/' /etc/security/pwquality.conf \n/etc/security/pwquality.conf.d/*.conf  \nRun the following command:  \n# grep -Pl -- '\\bpam_pwquality \\.so\\h+([^#\\n\\r]+\\h+)?dictcheck \\b' \n/usr/share/pam -configs/*  \nEdit any returned files and remove the dictcheck  argument from the \npam_pwquality.so  line(s)  Page 647",
                "audit_command": "grep -Psi -- '^\\h*dictcheck \\h*=\\h*0\\b' /etc/security/pwquality.conf \ngrep -Psi -- ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "sed -ri 's/^\\s*dictcheck \\s*=/# &/' /etc/security/pwquality.conf",
                    "grep -Pl -- '\\bpam_pwquality \\.so\\h+([^#\\n\\r]+\\h+)?dictcheck \\b'"
                ]
            },
            "3.2.7": {
                "id": "3.2.7",
                "title": "Ensure password quality checking is enforced \n(Automated)",
                "audit": "Run the following command to verify that enforcing=0  has not been set in a \npwquality  configuration file:  \n# grep -PHsi -- '^\\h*enforcing \\h*=\\h*0\\b' /etc/security/pwquality.conf \n/etc/security/pwquality.conf.d/*.conf  \nNothing should be returned  \nRun the following command to verify that the enforcing=0  argument has not been set \non the pam_pwquality  module:  \n# grep -PHsi -- \n'^\\h*password \\h+[^#\\n\\r]+\\h+pam_pwquality \\.so\\h+([^#\\n\\r]+\\h+)?enforcing=0 \\b' \n/etc/pam.d/common -password  \nNothing should be returned  \n  Page 649",
                "remediation": "Run the following command:  \n# grep -Pl -- '\\bpam_pwquality \\.so\\h+([^#\\n\\r]+\\h+)?enforcing=0 \\b' \n/usr/share/pam -configs/*  \nEdit any returned files and remove the enforcing=0  argument from the \npam_pwquality.so  line(s)  \nEdit /etc/security/pwquality.conf  and all files ending in .conf  in the \n/etc/security/pwquality.conf.d/  directory and remove or comment out any line \ncontaining the enforcing = 0  argument:  \nExample:  \n# sed -ri 's/^\\s*enforcing \\s*=\\s*0/# &/' /etc/security/pwquality.conf \n/etc/security/pwquality.conf.d/*.conf",
                "audit_command": "grep -PHsi -- '^\\h*enforcing \\h*=\\h*0\\b' /etc/security/pwquality.conf \ngrep -PHsi -- ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "grep -Pl -- '\\bpam_pwquality \\.so\\h+([^#\\n\\r]+\\h+)?enforcing=0 \\b'",
                    "sed -ri 's/^\\s*enforcing \\s*=\\s*0/# &/' /etc/security/pwquality.conf"
                ]
            },
            "3.2.8": {
                "id": "3.2.8",
                "title": "Ensure password quality is enforced for the root user \n(Automated)",
                "audit": "Run the following command to verify that the enforce_for_root  option is enabled in a \npwquality configuration file:  \n# grep -Psi -- '^\\h*enforce_for_root \\b' /etc/security/pwquality.conf \n/etc/security/pwquality.conf.d/*.conf  \nExample output:  \n/etc/security/pwquality.conf.d/50 -pwroot.conf:enforce_for_root  \nNote:  \nSettings observe an order of precedence:  \no module arguments override the settings in the \n/etc/security/pwquality.conf  configuration file  \no settings in the /etc/security/pwquality.conf  configuration file \noverride settings in a .conf  file in the \n/etc/security/pwquality.conf.d/  directory  \no settings in a .conf  file in the /etc/security/pwquality.conf.d/  \ndirectory are read in canonical order, with last read file containing the \nsetting taking precedence  \nIt is recommended that settings be configured in a .conf  file in the \n/etc/security/pwquality.conf.d/  directory for clarity, convenience, and \ndurability.",
                "remediation": "Edit or add the following line in a *.conf  file in /etc/security/pwquality.conf.d  or \nin /etc/security/pwquality.conf : \nExample:  \n#!/urs/bin/env bash  \n \n{ \n   [ ! -d /etc/security/pwquality.conf.d/ ] && mkdir \n/etc/security/pwquality.conf.d/  \n   printf ' \\n%s\\n' \"enforce_for_root\" > /etc/security/pwquality.conf.d/50 -\npwroot.conf  \n}",
                "audit_command": "grep -Psi -- '^\\h*enforce_for_root \\b' /etc/security/pwquality.conf ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "!/urs/bin/env bash"
                ]
            },
            "3.3.3": {
                "id": "3.3.3",
                "title": "Ensure pam_pwhistory includes use_authtok \n(Automated)",
                "audit": "Run the following command to verify that the use_authtok  argument exists on the \npwhistory  line in /etc/pam.d/common -password : \n# grep -Psi -- \n'^\\h*password \\h+[^#\\n\\r]+\\h+pam_pwhistory \\.so\\h+([^#\\n\\r]+\\h+)?use_authtok \\b' \n/etc/pam.d/common -password  \nOutput should be similar to:  \npassword   requisite   pam_pwhistory.so remember=24 enforce_for_root \ntry_first_pass use_authtok  \n  Page 661",
                "remediation": "Run the following command:  \n# awk '/Password -Type:/{ f = 1;next } / -Type:/{ f = 0 } f {if \n(/pam_pwhistory \\.so/) print FILENAME}' /usr/share/pam -configs/*  \nEdit any returned files and add the use_authtok  argument to the pam_pwhistory  line \nin the Password  section:  \nExample File:  \nName: pwhistory password history checking  \nDefault: yes  \nPriority: 1024  \nPassword -Type: Primary  \nPassword:  \n   requisite   pam_pwhistory.so remember=24 enforce_for_root try_first_pass \nuse_authtok # < - **ensure line includes use_authtok**  \nRun the following command to update the files in the /etc/pam.d/  directory:  \n# pam-auth-update --enable <MODIFIED_PROFILE_NAME>  \nExample:  \n# pam-auth-update --enable pwhistory  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: IA -5 \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 3.11 Encrypt Sensitive Data at Rest  \n Encrypt sensitive data at rest on servers, applications, and databases containing \nsensitive data. Storage -layer encryption, also known as server -side encryption, \nmeets the minimum requirement of this Safeguard. Additional encryption methods \nmay include app lication -layer encryption, also known as client -side encryption, \nwhere access to the data storage device(s) does not permit access to the plain -text \ndata.   \u25cf \u25cf \nv7 16.4 Encrypt or Hash all Authentication Credentials  \n Encrypt or hash with a salt all authentication credentials when stored.   \u25cf \u25cf \n Page 662 MITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1003, T1003.008, T1110, \nT1110.002  TA0006  M1041  Page 663",
                "audit_command": "grep -Psi -- ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "awk '/Password -Type:/{ f = 1;next } / -Type:/{ f = 0 } f {if",
                    "< - **ensure line includes use_authtok**",
                    "pam-auth-update --enable <MODIFIED_PROFILE_NAME>",
                    "pam-auth-update --enable pwhistory"
                ]
            },
            "3.3.4": {
                "id": "3.3.4",
                "title": "Configure pam_unix module  \nThe pam_unix.so  module is the standard Unix authentication module. It uses standard \ncalls from the system's libraries to retrieve and set account information as well as \nauthentication. Usually this is obtained from the /etc/passwd  and the /etc/shadow  file \nas well if shadow is enabled.  Page 664 5.3.3.4.1 Ensure pam_unix does not include nullok (Automated)",
                "audit": "Run the following command to verify that the nullok  argument is not set on the \npam_unix.so  module:  \n# grep -PH -- '^\\h*^\\h*[^#\\n\\r]+\\h+pam_unix \\.so\\b' /etc/pam.d/common -\n{password,auth,account,session,session -noninteractive} | grep -Pv -- \n'\\bnullok\\b' \nOutput should be similar to:  \n/etc/pam.d/common -password:password   [success=1 default=ignore]   \npam_unix.so obscure use_authtok try_first_pass yescrypt  \n/etc/pam.d/common -auth:auth   [success=2 default=ignore]   pam_unix.so \ntry_first_pass  \n/etc/pam.d/common -account:account   [success=1 new_authtok_reqd=done \ndefault=ignore]   pam_unix.so  \n/etc/pam.d/common -session:session   required   pam_unix.so  \n/etc/pam.d/common -session-noninteractive:session   required   pam_unix.so  \n  Page 665",
                "remediation": "Run the following command:  \n# grep -PH -- '^\\h*([^#\\n\\r]+\\h+)?pam_unix \\.so\\h+([^#\\n\\r]+\\h+)?nullok \\b' \n/usr/share/pam -configs/*  \nEdit any files returned and remove the nullok  argument for the pam_unix  lines \nExample File:  \nName: Unix authentication  \nDefault: yes  \nPriority: 256  \nAuth-Type: Primary  \nAuth: \n        [success=end default=ignore]    pam_unix.so try_first_pass # < - \n**ensure line does not include nullok nullok**  \nAuth-Initial:  \n        [success=end default=ignore]    pam_unix.so # < - **ensure line does \nnot include nullok nullok**  \nAccount-Type: Primary  \nAccount:  \n        [success=end new_aut htok_reqd=done default=ignore]      pam_unix.so  \nAccount-Initial:  \n        [success=end new_authtok_reqd=done default=ignore]      pam_unix.so  \nSession-Type: Additional  \nSession:  \n        required        pam_unix.so  \nSession-Initial:  \n        required        pam_ unix.so \nPassword -Type: Primary  \nPassword:  \n        [success=end default=ignore]    pam_unix.so obscure use_authtok \ntry_first_pass yescrypt  \nPassword -Initial:  \n        [success=end default=ignore]    pam_unix.so obscure yescrypt  \nRun the following command to update the files in the /etc/pam.d/  directory:  \n# pam-auth-update --enable <EDITED_PROFILE_NAME>  \nExample:  \n# pam-auth-update --enable unix  \nNote:  If custom files are being used, the corresponding files in /etc/pam.d/  would \nneed to be edited directly, and the pam-auth-update --enable \n<EDITED_PROFILE_NAME>  command skipped  Page 666 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 5.2 Use Unique Passwords  \n Use unique passwords for all enterprise assets. Best practice implementation \nincludes, at a minimum, an 8 -character password for accounts using MFA and a \n14-character password for accounts not using MFA.  \u25cf \u25cf \u25cf \nv7 4.4 Use Unique Passwords  \n Where multi -factor authentication is not supported (such as local administrator, \nroot, or service accounts), accounts will use passwords that are unique to that \nsystem.   \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1003, T1003.008, T1110, \nT1110.002  TA0006  M1041  Page 667",
                "audit_command": "grep -PH -- '^\\h*^\\h*[^#\\n\\r]+\\h+pam_unix \\.so\\b' /etc/pam.d/common -",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "grep -PH -- '^\\h*([^#\\n\\r]+\\h+)?pam_unix \\.so\\h+([^#\\n\\r]+\\h+)?nullok \\b'",
                    "< -",
                    "< - **ensure line does",
                    "pam-auth-update --enable <EDITED_PROFILE_NAME>",
                    "pam-auth-update --enable unix"
                ]
            },
            "3.4.2": {
                "id": "3.4.2",
                "title": "Ensure pam_unix does not include remember \n(Automated)",
                "audit": "Run the following command to verify that the remember  argument is not set on the \npam_unix.so  module:  \n# grep -PH -- '^\\h*^\\h*[^#\\n\\r]+\\h+pam_unix \\.so\\b' /etc/pam.d/common -\n{password,auth,account,session,session -noninteractive} | grep -Pv -- \n'\\bremember= \\d+\\b' \nOutput should be similar to:  \n/etc/pam.d/common -password:password   [success=1 default=ignore]   \npam_unix.so obscure yescrypt  \n/etc/pam.d/common -auth:auth   [success=1 default=ignore]   pam_unix.so  \n/etc/pam.d/common -account:account   [success=1 new_authtok_reqd=done \ndefault=ignore]   pa m_unix.so  \n/etc/pam.d/common -session:session   required   pam_unix.so  \n/etc/pam.d/common -session-noninteractive:session   required   pam_unix.so  \n  Page 668",
                "remediation": "Run the following command:  \n# grep -PH -- '^\\h*([^#\\n\\r]+\\h+)?pam_unix \\.so\\h+([^#\\n\\r]+\\h+)?remember \\b' \n/usr/share/pam -configs/*  \nEdit any files returned and remove the remember=_<N>_  argument for the pam_unix  \nlines \nExample output:  \n[success=end default=ignore]   pam_unix.so obscure use_authtok try_first_pass \nyescrypt remember=5 # **< - remove remember=<N>**  \n[success=end default=ignore]   pam_unix.so obscure yescrypt remember=5 # **< - \nremove remember=<N>**  \nRun the following command to update the files in the /etc/pam.d/  directory:  \n# pam-auth-update --enable <EDITED_PROFILE_NAME>  \nExample:  \n# pam-auth-update --enable unix  \nNote:  If custom files are being used, the corresponding files in /etc/pam.d/  would \nneed to be edited directly, and the pam-auth-update --enable \n<EDITED_PROFILE_NAME>  command skipped  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 5.2 Use Unique Passwords  \n Use unique passwords for all enterprise assets. Best practice implementation \nincludes, at a minimum, an 8 -character password for accounts using MFA and a \n14-character password for accounts not using MFA.  \u25cf \u25cf \u25cf \nv7 4.4 Use Unique Passwords  \n Where multi -factor authentication is not supported (such as local administrator, \nroot, or service accounts), accounts will use passwords that are unique to that \nsystem.   \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1003, T1003.008, T1110, \nT1110.002  TA0006  M1041  Page 669",
                "audit_command": "grep -PH -- '^\\h*^\\h*[^#\\n\\r]+\\h+pam_unix \\.so\\b' /etc/pam.d/common -",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "grep -PH -- '^\\h*([^#\\n\\r]+\\h+)?pam_unix \\.so\\h+([^#\\n\\r]+\\h+)?remember \\b'",
                    "**< - remove remember=<N>**",
                    "**< -",
                    "pam-auth-update --enable <EDITED_PROFILE_NAME>",
                    "pam-auth-update --enable unix"
                ]
            },
            "3.4.3": {
                "id": "3.4.3",
                "title": "Ensure pam_unix includes a strong password hashing \nalgorithm (Automated)",
                "audit": "Run the following command to verify that a strong password hashing algorithm is set on \nthe pam_unix.so module:  \n# grep -PH -- \n'^\\h*password \\h+([^#\\n\\r]+)\\h+pam_unix \\.so\\h+([^#\\n\\r]+\\h+)?(sha512|yescrypt)\n\\b' /etc/pam.d/common -password  \nOutput should be similar to:  \n/etc/pam.d/common -password:password   [success=1 default=ignore]   \npam_unix.so obscure use_authtok try_first_pass yescrypt  \nVerify that the line(s) include either sha512  - OR - yescrypt",
                "remediation": "Run the following command:  \n# awk '/Password -Type:/{ f = 1;next } / -Type:/{ f = 0 } f {if \n(/pam_unix \\.so/) print FILENAME}' /usr/share/pam -configs/*  \nEdit any returned files and edit or add a strong hashing algorithm, either sha512 or \nyescrypt, that meets local site policy to the pam_unix  lines in the Password  section:  \nExample File:  \nName: Unix authentication  \nDefault: yes  \nPriority: 256  \nAuth-Type: Primary # < - Start of \"Auth\" section  \nAuth: \n        [success=end default=ignore]    pam_unix.so try_first_pass  \nAuth-Initial:  \n        [success=end default=ignore]    pam_unix.so  \nAccount-Type: Pr imary # < - Start of \"Account\" section  \nAccount:  \n        [success=end new_authtok_reqd=done default=ignore]      pam_unix.so  \nAccount-Initial:  \n        [success=end new_authtok_reqd=done default=ignore]      pam_unix.so  \nSession-Type: Additional  # < - Start of \"Session\" section  \nSession:  \n        required        pam_unix.so  \nSession-Initial:  \n        required        pam_unix.so  \nPassword -Type: Primary # < - Start of \"Password\" section  \nPassword:  \n        [success=end default=ignore]    pam_unix.so obscure use_authtok \ntry_first_pass yescrypt # < - **ensure hashing algorithm is either sha512 or \nyescrypt**  \nPassword -Initial:  \n        [success=end default=ignore]    pam_unix.so obscure yescrypt # < - \n**ensure hashing algorithm is either sha512 or yescrypt**  \nRun the following command to update the files in the /etc/pam.d/  directory:  Page 671 # pam-auth-update --enable <MODIFIED_PROFILE_NAME>  \nExample:  \n# pam-auth-update --enable unix  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: IA -5 \nAdditional Information:  \nThe following command may be used to expire all non -system user ID's immediately \nand force them to change their passwords on next login. Any system accounts that \nneed to be expired should be carefully done separately by the system administrator to \nprevent any potential problems.  \n# awk -F: '( $3<'\"$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)\"' && $1 != \n\"nfsnobody\" ) { print $1 }' /etc/passwd | xargs -n 1 chage -d 0 \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 3.11 Encrypt Sensitive Data at Rest  \n Encrypt sensitive data at rest on servers, applications, and databases containing \nsensitive data. Storage -layer encryption, also known as server -side encryption, \nmeets the minimum requirement of this Safeguard. Additional encryption methods \nmay include app lication -layer encryption, also known as client -side encryption, \nwhere access to the data storage device(s) does not permit access to the plain -text \ndata.   \u25cf \u25cf \nv7 16.4 Encrypt or Hash all Authentication Credentials  \n Encrypt or hash with a salt all authentication credentials when stored.   \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1003, T1003.008, T1110, \nT1110.002  TA0006  M1041  Page 672",
                "audit_command": "grep -PH -- ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "awk '/Password -Type:/{ f = 1;next } / -Type:/{ f = 0 } f {if",
                    "< - Start of \"Auth\" section",
                    "< - Start of \"Account\" section",
                    "< - Start of \"Session\" section",
                    "< - Start of \"Password\" section",
                    "< - **ensure hashing algorithm is either sha512 or",
                    "< -",
                    "pam-auth-update --enable <MODIFIED_PROFILE_NAME>",
                    "pam-auth-update --enable unix",
                    "awk -F: '( $3<'\"$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)\"' && $1 !=",
                    "3<'\"$(awk '/^ \\s*UID_MIN/{print $2}' /etc/login.defs)\"' && $1 !=",
                    "1 }' /etc/passwd | xargs -n 1 chage -d 0"
                ]
            },
            "3.4.4": {
                "id": "3.4.4",
                "title": "Ensure pam_unix includes use_authtok (Automated)",
                "audit": "Run the following command to verify that use_authtok  is set on the pam_unix.so \nmodule lines in the password stack:  \n# grep -PH -- \n'^\\h*password \\h+([^#\\n\\r]+)\\h+pam_unix \\.so\\h+([^#\\n\\r]+\\h+)?use_authtok \\b' \n/etc/pam.d/common -password  \nOutput should be similar to:  \n/etc/pam.d/common -password:password   [success=1 default=ignore]   \npam_unix.so obscure use_authtok try_first_pass yescrypt  \nVerify that the line(s) include use_authtok  \n  Page 673",
                "remediation": "Run the following command:  \n# awk '/Password -Type:/{ f = 1;next } / -Type:/{ f = 0 } f {if \n(/pam_unix \\.so/) print FILENAME}' /usr/share/pam -configs/*  \nEdit any returned files add use_authtok  to the pam_unix  line in the Password  section \nunder Password:  subsection:  \nNote:  The if the file's Password  section includes a Password -Initial:  subsection, \nuse_authtok  should not be added to the pam_unix  line in the Password -Initial:  \nsubsection  \nExample File:  \nName: Unix authentication  \nDefault: yes  \nPriority: 256  \nAuth-Type: Primary # < - Start of \"Auth\" section  \nAuth: \n        [success=end default=ignore]    pam_unix.so try_first_pass  \nAuth-Initial:  \n        [success=end default=ignore]    pam_unix.so  \nAccount-Type: Primary # < - Start of \"Account\" section  \nAccount:  \n        [success=end new_authtok_reqd=done default=ignore]      pam_ unix.so \nAccount-Initial:  \n        [success=end new_authtok_reqd=done default=ignore]      pam_unix.so  \nSession-Type: Additional  # < - Start of \"Session\" section  \nSession:  \n        required        pam_unix.so  \nSession-Initial:  \n        required        pam_unix.so  \nPassword -Type: Primary # < - Start of \"Password\" section  \nPassword:  \n        [success=end default=ignore]    pam_unix.so obscure use_authtok \ntry_first_pass yescrypt # < - **ensure line includes use_authtok**  \nPassword -Initial:  \n        [success=end default=ignor e]    pam_unix.so obscure yescrypt # < - \n**Password -Initial: subsection does not include use_authtok  \nRun the following command to update the files in the /etc/pam.d/  directory:  \n# pam-auth-update --enable <MODIFIED_PROFILE_NAME>  \nExample:  \n# pam-auth-update --enable unix  \nReferences:  \n1. NIST SP 800 -53 Rev. 5: IA -5 Page 674 CIS Controls:  \nControls \nVersion  Control  IG 1 IG 2 IG 3 \nv8 3.11 Encrypt Sensitive Data at Rest  \n Encrypt sensitive data at rest on servers, applications, and databases containing \nsensitive data. Storage -layer encryption, also known as server -side encryption, \nmeets the minimum requirement of this Safeguard. Additional encryption methods \nmay include app lication -layer encryption, also known as client -side encryption, \nwhere access to the data storage device(s) does not permit access to the plain -text \ndata.   \u25cf \u25cf \nv7 16.4 Encrypt or Hash all Authentication Credentials  \n Encrypt or hash with a salt all authentication credentials when stored.   \u25cf \u25cf \n \nMITRE ATT&CK Mappings:  \nTechniques / Sub -\ntechniques  Tactics  Mitigations  \nT1003, T1003.008, T1110, \nT1110.002  TA0006  M1041",
                "audit_command": "grep -PH -- ",
                "audit_output": "No specific audit output provided.",
                "remediation_command": [
                    "awk '/Password -Type:/{ f = 1;next } / -Type:/{ f = 0 } f {if",
                    "< - Start of \"Auth\" section",
                    "< - Start of \"Account\" section",
                    "< - Start of \"Session\" section",
                    "< - Start of \"Password\" section",
                    "< - **ensure line includes use_authtok**",
                    "< -",
                    "pam-auth-update --enable <MODIFIED_PROFILE_NAME>",
                    "pam-auth-update --enable unix"
                ]
            }
        }
    }
}